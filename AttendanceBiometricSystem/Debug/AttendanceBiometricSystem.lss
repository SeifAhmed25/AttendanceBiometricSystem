
AttendanceBiometricSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001488  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000148  00800060  00001488  0000151c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  008001a8  008001a8  00001664  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001664  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001694  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000348  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000042ab  00000000  00000000  00001a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000131e  00000000  00000000  00005cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000233e  00000000  00000000  00006fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000720  00000000  00000000  00009320  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f40  00000000  00000000  00009a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d69  00000000  00000000  0000a980  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000288  00000000  00000000  0000c6e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 d9 09 	jmp	0x13b2	; 0x13b2 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e8       	ldi	r30, 0x88	; 136
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a8 ea       	ldi	r26, 0xA8	; 168
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3b       	cpi	r26, 0xB9	; 185
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 06 07 	call	0xe0c	; 0xe0c <main>
      8a:	0c 94 42 0a 	jmp	0x1484	; 0x1484 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_Init>:
*  Return Value     : NONE
*************************************************************************/
void APP_Init(void)
{
	u8 key = KEYPAD_RELEASED;
	H_Lcd_Void_LCDClear();
      92:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <H_Lcd_Void_LCDClear>
	H_Lcd_Void_LCDGoTo(0,0);
      96:	60 e0       	ldi	r22, 0x00	; 0
      98:	80 e0       	ldi	r24, 0x00	; 0
      9a:	0e 94 43 06 	call	0xc86	; 0xc86 <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteString((u8*)"Please Press");
      9e:	83 e9       	ldi	r24, 0x93	; 147
      a0:	90 e0       	ldi	r25, 0x00	; 0
      a2:	0e 94 cd 05 	call	0xb9a	; 0xb9a <H_Lcd_Void_LCDWriteString>
	H_Lcd_Void_LCDGoTo(1,0);
      a6:	60 e0       	ldi	r22, 0x00	; 0
      a8:	81 e0       	ldi	r24, 0x01	; 1
      aa:	0e 94 43 06 	call	0xc86	; 0xc86 <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteString((u8*)"(*) : Attendance");
      ae:	80 ea       	ldi	r24, 0xA0	; 160
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	0e 94 cd 05 	call	0xb9a	; 0xb9a <H_Lcd_Void_LCDWriteString>
	H_Lcd_Void_LCDGoTo(2,0);
      b6:	60 e0       	ldi	r22, 0x00	; 0
      b8:	82 e0       	ldi	r24, 0x02	; 2
      ba:	0e 94 43 06 	call	0xc86	; 0xc86 <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteString((u8*)"(#) : New Employee");
      be:	81 eb       	ldi	r24, 0xB1	; 177
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	0e 94 cd 05 	call	0xb9a	; 0xb9a <H_Lcd_Void_LCDWriteString>
*  parameters (out) : None
*  Return Value     : NONE
*************************************************************************/
void APP_Init(void)
{
	u8 key = KEYPAD_RELEASED;
      c6:	81 e0       	ldi	r24, 0x01	; 1
	H_Lcd_Void_LCDGoTo(1,0);
	H_Lcd_Void_LCDWriteString((u8*)"(*) : Attendance");
	H_Lcd_Void_LCDGoTo(2,0);
	H_Lcd_Void_LCDWriteString((u8*)"(#) : New Employee");
	
 	while ((key != (NEW_ENROLLEMENT_BUTTON_PRESSED)) && (key != (CONFIRM_ATTENDANCE_BUTTON_PRESSED))){
      c8:	02 c0       	rjmp	.+4      	; 0xce <APP_Init+0x3c>
 		key = H_KeyPad_U8_KeyPadRead();
      ca:	0e 94 54 04 	call	0x8a8	; 0x8a8 <H_KeyPad_U8_KeyPadRead>
	H_Lcd_Void_LCDGoTo(1,0);
	H_Lcd_Void_LCDWriteString((u8*)"(*) : Attendance");
	H_Lcd_Void_LCDGoTo(2,0);
	H_Lcd_Void_LCDWriteString((u8*)"(#) : New Employee");
	
 	while ((key != (NEW_ENROLLEMENT_BUTTON_PRESSED)) && (key != (CONFIRM_ATTENDANCE_BUTTON_PRESSED))){
      ce:	83 32       	cpi	r24, 0x23	; 35
      d0:	11 f0       	breq	.+4      	; 0xd6 <APP_Init+0x44>
      d2:	8a 32       	cpi	r24, 0x2A	; 42
      d4:	d1 f7       	brne	.-12     	; 0xca <APP_Init+0x38>
 		key = H_KeyPad_U8_KeyPadRead();
 	}
	switch(key)
      d6:	83 32       	cpi	r24, 0x23	; 35
      d8:	31 f0       	breq	.+12     	; 0xe6 <APP_Init+0x54>
      da:	8a 32       	cpi	r24, 0x2A	; 42
      dc:	39 f4       	brne	.+14     	; 0xec <APP_Init+0x5a>
	{
	case CONFIRM_ATTENDANCE_BUTTON_PRESSED:
	g_SystemState = CONFIRM_ATTENDANCE_ENTER_ID;
      de:	87 e0       	ldi	r24, 0x07	; 7
      e0:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <g_SystemState>
	break;
      e4:	08 95       	ret
	case NEW_ENROLLEMENT_BUTTON_PRESSED:
	g_SystemState = NEW_ENROLLMENT_SET_NEW_ID;
      e6:	81 e0       	ldi	r24, 0x01	; 1
      e8:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <g_SystemState>
      ec:	08 95       	ret

000000ee <APP_GetID>:
*  parameters (in)  : None
*  parameters (out) : APP_EmpID ID value
*  Return Value     : from 0x01 to 0x0F
*************************************************************************/
APP_EmpID APP_GetID(void)
{
      ee:	cf 93       	push	r28
      f0:	df 93       	push	r29
	APP_EmpID Copy_ID =0;
	u8 Temp_keyPressed =0;

	/*go to the first place in the second line */
	H_Lcd_Void_LCDClear();
      f2:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <H_Lcd_Void_LCDClear>
	H_Lcd_Void_LCDGoTo(0,0);
      f6:	60 e0       	ldi	r22, 0x00	; 0
      f8:	80 e0       	ldi	r24, 0x00	; 0
      fa:	0e 94 43 06 	call	0xc86	; 0xc86 <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteString((u8*)"Please Enter Your ID");
      fe:	84 ec       	ldi	r24, 0xC4	; 196
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	0e 94 cd 05 	call	0xb9a	; 0xb9a <H_Lcd_Void_LCDWriteString>
	H_Lcd_Void_LCDGoTo(1,0);
     106:	60 e0       	ldi	r22, 0x00	; 0
     108:	81 e0       	ldi	r24, 0x01	; 1
     10a:	0e 94 43 06 	call	0xc86	; 0xc86 <H_Lcd_Void_LCDGoTo>
*  parameters (out) : APP_EmpID ID value
*  Return Value     : from 0x01 to 0x0F
*************************************************************************/
APP_EmpID APP_GetID(void)
{
	APP_EmpID Copy_ID =0;
     10e:	d0 e0       	ldi	r29, 0x00	; 0

	/*this while loop keeps taking input buttons from user via Keypad
	 *until user press ENTER button and convert the input uint8 char into u8 integer value*/
	do
	{
		Temp_keyPressed = H_KeyPad_U8_KeyPadRead();/*get char reading from user via keypad*/
     110:	0e 94 54 04 	call	0x8a8	; 0x8a8 <H_KeyPad_U8_KeyPadRead>
		if(GOBACK_BUTTON_PRESSED == Temp_keyPressed || MAIN_MENU_BUTTON_PRESSED == Temp_keyPressed)
     114:	81 34       	cpi	r24, 0x41	; 65
     116:	d9 f0       	breq	.+54     	; 0x14e <APP_GetID+0x60>
     118:	83 34       	cpi	r24, 0x43	; 67
     11a:	d9 f0       	breq	.+54     	; 0x152 <APP_GetID+0x64>
		{	/*if the user pressed the go-back button in the middle of the operation
		 	  Ignore the inputs by overwriting the Copy_ID by 0xFF and break the loop*/
			Copy_ID = GOBACK;
			break;
		}
		if(((Temp_keyPressed >= MIN_DIGIT) && (Temp_keyPressed <= MAX_DIGIT)))
     11c:	c0 ed       	ldi	r28, 0xD0	; 208
     11e:	c8 0f       	add	r28, r24
     120:	ca 30       	cpi	r28, 0x0A	; 10
     122:	90 f4       	brcc	.+36     	; 0x148 <APP_GetID+0x5a>
		{
			/*convert the ASCII to decimal char by char BY -THE ZERO ASCII (48) from the input*/
			Temp_keyPressed-=48;

			H_Lcd_Void_LCDWriteNumber(Temp_keyPressed);/*display the number on the LCD for User interface*/
     124:	6c 2f       	mov	r22, r28
     126:	70 e0       	ldi	r23, 0x00	; 0
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <H_Lcd_Void_LCDWriteNumber>

			Copy_ID = ((Copy_ID * 10 ) + Temp_keyPressed) ;/*convert ID into u8 integer value*/
     130:	dd 0f       	add	r29, r29
     132:	8d 2f       	mov	r24, r29
     134:	88 0f       	add	r24, r24
     136:	88 0f       	add	r24, r24
     138:	d8 0f       	add	r29, r24
     13a:	dc 0f       	add	r29, r28
			if(Copy_ID>MAX_ALLOWED_ID) Copy_ID = OUT_OF_RANGE_ID;
     13c:	d0 31       	cpi	r29, 0x10	; 16
     13e:	10 f4       	brcc	.+4      	; 0x144 <APP_GetID+0x56>
			break;
		}
		if(((Temp_keyPressed >= MIN_DIGIT) && (Temp_keyPressed <= MAX_DIGIT)))
		{
			/*convert the ASCII to decimal char by char BY -THE ZERO ASCII (48) from the input*/
			Temp_keyPressed-=48;
     140:	8c 2f       	mov	r24, r28
     142:	02 c0       	rjmp	.+4      	; 0x148 <APP_GetID+0x5a>
     144:	8c 2f       	mov	r24, r28

			H_Lcd_Void_LCDWriteNumber(Temp_keyPressed);/*display the number on the LCD for User interface*/

			Copy_ID = ((Copy_ID * 10 ) + Temp_keyPressed) ;/*convert ID into u8 integer value*/
			if(Copy_ID>MAX_ALLOWED_ID) Copy_ID = OUT_OF_RANGE_ID;
     146:	de ef       	ldi	r29, 0xFE	; 254
		}
	} while(ENTER_BUTTON_PRESSED != Temp_keyPressed);
     148:	84 34       	cpi	r24, 0x44	; 68
     14a:	11 f7       	brne	.-60     	; 0x110 <APP_GetID+0x22>
     14c:	03 c0       	rjmp	.+6      	; 0x154 <APP_GetID+0x66>
	{
		Temp_keyPressed = H_KeyPad_U8_KeyPadRead();/*get char reading from user via keypad*/
		if(GOBACK_BUTTON_PRESSED == Temp_keyPressed || MAIN_MENU_BUTTON_PRESSED == Temp_keyPressed)
		{	/*if the user pressed the go-back button in the middle of the operation
		 	  Ignore the inputs by overwriting the Copy_ID by 0xFF and break the loop*/
			Copy_ID = GOBACK;
     14e:	df ef       	ldi	r29, 0xFF	; 255
     150:	01 c0       	rjmp	.+2      	; 0x154 <APP_GetID+0x66>
     152:	df ef       	ldi	r29, 0xFF	; 255
			if(Copy_ID>MAX_ALLOWED_ID) Copy_ID = OUT_OF_RANGE_ID;
		}
	} while(ENTER_BUTTON_PRESSED != Temp_keyPressed);
	
	return Copy_ID;/*return the ID u8 integer value*/
}
     154:	8d 2f       	mov	r24, r29
     156:	df 91       	pop	r29
     158:	cf 91       	pop	r28
     15a:	08 95       	ret

0000015c <APP_CheckIDPresence>:
*  Return Value     : CONFIRM_ATTENDANCE_NOTFOUND_ID
*  					  CONFIRM_ATTENDANCE_FOUND_ID
*************************************************************************/

APP_CurrentState APP_CheckIDPresence ( APP_EmpID copy_ID)
{
     15c:	cf 93       	push	r28
     15e:	c8 2f       	mov	r28, r24
	/*check if the ID value is saved in the EEPROM
	 * or not and return the state of presence */
	APP_CurrentState Local_Is_found = 0;
	if(copy_ID == H_Void_EEPROMRead(copy_ID))
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	0e 94 ee 01 	call	0x3dc	; 0x3dc <H_Void_EEPROMRead>
     166:	c8 13       	cpse	r28, r24
     168:	02 c0       	rjmp	.+4      	; 0x16e <APP_CheckIDPresence+0x12>
	{
		Local_Is_found = FOUND_ID;
     16a:	89 e0       	ldi	r24, 0x09	; 9
     16c:	01 c0       	rjmp	.+2      	; 0x170 <APP_CheckIDPresence+0x14>
	}
	else
	{
		Local_Is_found = NOTFOUND_ID;
     16e:	88 e0       	ldi	r24, 0x08	; 8
	}
	return Local_Is_found;
}
     170:	cf 91       	pop	r28
     172:	08 95       	ret

00000174 <APP_SetNewID>:
*  parameters (out) : None
*  Return Value     : None
*************************************************************************/
void APP_SetNewID(APP_EmpID copy_ID)
{
	H_Void_EEPROMWrite((u16)copy_ID , copy_ID);
     174:	68 2f       	mov	r22, r24
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <H_Void_EEPROMWrite>
	g_SystemState = NEW_ENROLLMENT_ID_SUCCESS;
     17c:	82 e0       	ldi	r24, 0x02	; 2
     17e:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <g_SystemState>
     182:	08 95       	ret

00000184 <APP_NewEnrollemtSuccessful>:
*  parameters (in)  : None
*  parameters (out) : None
*  Return Value     : None
*************************************************************************/
void APP_NewEnrollemtSuccessful(void){
	H_Lcd_Void_LCDClear();
     184:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <H_Lcd_Void_LCDClear>
	H_Lcd_Void_LCDWriteString((u8*) "ENROLLMENT SUCCESS");
     188:	89 ed       	ldi	r24, 0xD9	; 217
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	0e 94 cd 05 	call	0xb9a	; 0xb9a <H_Lcd_Void_LCDWriteString>
	H_LED_Void_LedOn(LED_GRN);
     190:	83 e0       	ldi	r24, 0x03	; 3
     192:	0e 94 81 06 	call	0xd02	; 0xd02 <H_LED_Void_LedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     196:	2f ef       	ldi	r18, 0xFF	; 255
     198:	83 e2       	ldi	r24, 0x23	; 35
     19a:	94 ef       	ldi	r25, 0xF4	; 244
     19c:	21 50       	subi	r18, 0x01	; 1
     19e:	80 40       	sbci	r24, 0x00	; 0
     1a0:	90 40       	sbci	r25, 0x00	; 0
     1a2:	e1 f7       	brne	.-8      	; 0x19c <APP_NewEnrollemtSuccessful+0x18>
     1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <APP_NewEnrollemtSuccessful+0x22>
     1a6:	00 00       	nop
	_delay_ms(DISPLAY_FOR_5_SEC);
	H_LED_Void_LedOff(LED_GRN);
     1a8:	83 e0       	ldi	r24, 0x03	; 3
     1aa:	0e 94 a0 06 	call	0xd40	; 0xd40 <H_LED_Void_LedOff>
     1ae:	08 95       	ret

000001b0 <APP_RTC_Display_Time_and_Date>:
*  parameters (out) : None
*  Return Value     : None
*************************************************************************/

void  APP_RTC_Display_Time_and_Date(Date_And_Time * ptr)
{
     1b0:	cf 93       	push	r28
     1b2:	df 93       	push	r29
     1b4:	ec 01       	movw	r28, r24
    H_Lcd_Void_LCDGoTo(2,0);
     1b6:	60 e0       	ldi	r22, 0x00	; 0
     1b8:	82 e0       	ldi	r24, 0x02	; 2
     1ba:	0e 94 43 06 	call	0xc86	; 0xc86 <H_Lcd_Void_LCDGoTo>
    H_Lcd_Void_LCDWriteString(RTC_Day_str_display[ptr->day]);
     1be:	8b 81       	ldd	r24, Y+3	; 0x03
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	88 0f       	add	r24, r24
     1c4:	99 1f       	adc	r25, r25
     1c6:	88 0f       	add	r24, r24
     1c8:	99 1f       	adc	r25, r25
     1ca:	80 5a       	subi	r24, 0xA0	; 160
     1cc:	9f 4f       	sbci	r25, 0xFF	; 255
     1ce:	0e 94 cd 05 	call	0xb9a	; 0xb9a <H_Lcd_Void_LCDWriteString>
    H_Lcd_Void_LCDWriteCharacter(' ');
     1d2:	80 e2       	ldi	r24, 0x20	; 32
     1d4:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <H_Lcd_Void_LCDWriteCharacter>
    H_Lcd_Void_LCDWriteNumber(ptr->date);
     1d8:	6c 81       	ldd	r22, Y+4	; 0x04
     1da:	70 e0       	ldi	r23, 0x00	; 0
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <H_Lcd_Void_LCDWriteNumber>
    H_Lcd_Void_LCDWriteCharacter('/');
     1e4:	8f e2       	ldi	r24, 0x2F	; 47
     1e6:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <H_Lcd_Void_LCDWriteCharacter>
    H_Lcd_Void_LCDWriteNumber(ptr->month);
     1ea:	6d 81       	ldd	r22, Y+5	; 0x05
     1ec:	70 e0       	ldi	r23, 0x00	; 0
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <H_Lcd_Void_LCDWriteNumber>
    H_Lcd_Void_LCDWriteCharacter('/');
     1f6:	8f e2       	ldi	r24, 0x2F	; 47
     1f8:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <H_Lcd_Void_LCDWriteCharacter>
    H_Lcd_Void_LCDWriteNumber(20);
     1fc:	64 e1       	ldi	r22, 0x14	; 20
     1fe:	70 e0       	ldi	r23, 0x00	; 0
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <H_Lcd_Void_LCDWriteNumber>
    H_Lcd_Void_LCDWriteNumber(ptr->year);
     208:	6e 81       	ldd	r22, Y+6	; 0x06
     20a:	70 e0       	ldi	r23, 0x00	; 0
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <H_Lcd_Void_LCDWriteNumber>
	H_Lcd_Void_LCDGoTo(3,0);
     214:	60 e0       	ldi	r22, 0x00	; 0
     216:	83 e0       	ldi	r24, 0x03	; 3
     218:	0e 94 43 06 	call	0xc86	; 0xc86 <H_Lcd_Void_LCDGoTo>
    H_Lcd_Void_LCDWriteNumber(ptr->hours);
     21c:	6a 81       	ldd	r22, Y+2	; 0x02
     21e:	70 e0       	ldi	r23, 0x00	; 0
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <H_Lcd_Void_LCDWriteNumber>
    H_Lcd_Void_LCDWriteCharacter(':');
     228:	8a e3       	ldi	r24, 0x3A	; 58
     22a:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <H_Lcd_Void_LCDWriteCharacter>
    H_Lcd_Void_LCDWriteNumber(ptr->min);
     22e:	69 81       	ldd	r22, Y+1	; 0x01
     230:	70 e0       	ldi	r23, 0x00	; 0
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <H_Lcd_Void_LCDWriteNumber>
    H_Lcd_Void_LCDWriteCharacter(':');
     23a:	8a e3       	ldi	r24, 0x3A	; 58
     23c:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <H_Lcd_Void_LCDWriteCharacter>
    H_Lcd_Void_LCDWriteNumber(ptr->sec);
     240:	68 81       	ld	r22, Y
     242:	70 e0       	ldi	r23, 0x00	; 0
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <H_Lcd_Void_LCDWriteNumber>
    if((ptr->hours>=9)&&(ptr->min>0)){
     24c:	8a 81       	ldd	r24, Y+2	; 0x02
     24e:	89 30       	cpi	r24, 0x09	; 9
     250:	40 f0       	brcs	.+16     	; 0x262 <APP_RTC_Display_Time_and_Date+0xb2>
     252:	89 81       	ldd	r24, Y+1	; 0x01
     254:	88 23       	and	r24, r24
     256:	29 f0       	breq	.+10     	; 0x262 <APP_RTC_Display_Time_and_Date+0xb2>
    	H_Lcd_Void_LCDWriteString((u8*) " LATE");
     258:	8c ee       	ldi	r24, 0xEC	; 236
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	0e 94 cd 05 	call	0xb9a	; 0xb9a <H_Lcd_Void_LCDWriteString>
     260:	04 c0       	rjmp	.+8      	; 0x26a <APP_RTC_Display_Time_and_Date+0xba>
    }
    else{
    	H_Lcd_Void_LCDWriteString((u8*) " welcome");
     262:	82 ef       	ldi	r24, 0xF2	; 242
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	0e 94 cd 05 	call	0xb9a	; 0xb9a <H_Lcd_Void_LCDWriteString>
    }
}
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	08 95       	ret

00000270 <APP_Confirm_Attendance_Success>:
*  Reentrance       : Reentrant
*  parameters (in)  : None
*  parameters (out) : None
*  Return Value     : None
*************************************************************************/
void APP_Confirm_Attendance_Success(APP_EmpID copy_ID, Date_And_Time* CurrentDateAndTime_ptr){
     270:	0f 93       	push	r16
     272:	1f 93       	push	r17
     274:	cf 93       	push	r28
     276:	c8 2f       	mov	r28, r24
     278:	8b 01       	movw	r16, r22
	H_Lcd_Void_LCDClear();
     27a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <H_Lcd_Void_LCDClear>
	/*LCD says Hi Tarek for ID 7, Hi youssef for ID 6 and Hi seif for ID 5 */
	if(copy_ID == TAREK_ID){
     27e:	c7 30       	cpi	r28, 0x07	; 7
     280:	49 f4       	brne	.+18     	; 0x294 <APP_Confirm_Attendance_Success+0x24>
		H_Lcd_Void_LCDWriteString((u8*) "Hi Tarek");
     282:	8b ef       	ldi	r24, 0xFB	; 251
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	0e 94 cd 05 	call	0xb9a	; 0xb9a <H_Lcd_Void_LCDWriteString>
		H_Lcd_Void_LCDGoTo(1,0);
     28a:	60 e0       	ldi	r22, 0x00	; 0
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	0e 94 43 06 	call	0xc86	; 0xc86 <H_Lcd_Void_LCDGoTo>
     292:	15 c0       	rjmp	.+42     	; 0x2be <APP_Confirm_Attendance_Success+0x4e>
	}
	else if(copy_ID == YOUSSEF_ID){
     294:	c6 30       	cpi	r28, 0x06	; 6
     296:	49 f4       	brne	.+18     	; 0x2aa <APP_Confirm_Attendance_Success+0x3a>
		H_Lcd_Void_LCDWriteString((u8*) "Hi Youssef");
     298:	84 e0       	ldi	r24, 0x04	; 4
     29a:	91 e0       	ldi	r25, 0x01	; 1
     29c:	0e 94 cd 05 	call	0xb9a	; 0xb9a <H_Lcd_Void_LCDWriteString>
		H_Lcd_Void_LCDGoTo(1,0);
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	0e 94 43 06 	call	0xc86	; 0xc86 <H_Lcd_Void_LCDGoTo>
     2a8:	0a c0       	rjmp	.+20     	; 0x2be <APP_Confirm_Attendance_Success+0x4e>
	}
	else if(copy_ID == SEIF_ID){
     2aa:	c5 30       	cpi	r28, 0x05	; 5
     2ac:	41 f4       	brne	.+16     	; 0x2be <APP_Confirm_Attendance_Success+0x4e>
		H_Lcd_Void_LCDWriteString((u8*) "Hi Seif");
     2ae:	8f e0       	ldi	r24, 0x0F	; 15
     2b0:	91 e0       	ldi	r25, 0x01	; 1
     2b2:	0e 94 cd 05 	call	0xb9a	; 0xb9a <H_Lcd_Void_LCDWriteString>
		H_Lcd_Void_LCDGoTo(1,0);
     2b6:	60 e0       	ldi	r22, 0x00	; 0
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	0e 94 43 06 	call	0xc86	; 0xc86 <H_Lcd_Void_LCDGoTo>
	}
	H_Lcd_Void_LCDWriteString((u8*) "Attendance success");
     2be:	87 e1       	ldi	r24, 0x17	; 23
     2c0:	91 e0       	ldi	r25, 0x01	; 1
     2c2:	0e 94 cd 05 	call	0xb9a	; 0xb9a <H_Lcd_Void_LCDWriteString>
	/*Get the current time and display it on LCD to show if late or not*/
	RTC_Get_Time(CurrentDateAndTime_ptr);
     2c6:	c8 01       	movw	r24, r16
     2c8:	0e 94 ca 06 	call	0xd94	; 0xd94 <RTC_Get_Time>
	APP_RTC_Display_Time_and_Date(CurrentDateAndTime_ptr);
     2cc:	c8 01       	movw	r24, r16
     2ce:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <APP_RTC_Display_Time_and_Date>
	/*Opens the door for the employee and the green led for 5 secs*/
	Relay_ON(RELAY_1_PIN);
     2d2:	85 e2       	ldi	r24, 0x25	; 37
     2d4:	0e 94 bf 06 	call	0xd7e	; 0xd7e <Relay_ON>
	H_LED_Void_LedOn(LED_GRN);
     2d8:	83 e0       	ldi	r24, 0x03	; 3
     2da:	0e 94 81 06 	call	0xd02	; 0xd02 <H_LED_Void_LedOn>
     2de:	2f ef       	ldi	r18, 0xFF	; 255
     2e0:	83 e2       	ldi	r24, 0x23	; 35
     2e2:	94 ef       	ldi	r25, 0xF4	; 244
     2e4:	21 50       	subi	r18, 0x01	; 1
     2e6:	80 40       	sbci	r24, 0x00	; 0
     2e8:	90 40       	sbci	r25, 0x00	; 0
     2ea:	e1 f7       	brne	.-8      	; 0x2e4 <APP_Confirm_Attendance_Success+0x74>
     2ec:	00 c0       	rjmp	.+0      	; 0x2ee <APP_Confirm_Attendance_Success+0x7e>
     2ee:	00 00       	nop
	_delay_ms(DISPLAY_FOR_5_SEC);
	Relay_OFF(RELAY_1_PIN);
     2f0:	85 e2       	ldi	r24, 0x25	; 37
     2f2:	0e 94 c3 06 	call	0xd86	; 0xd86 <Relay_OFF>
	H_LED_Void_LedOff(LED_GRN);
     2f6:	83 e0       	ldi	r24, 0x03	; 3
     2f8:	0e 94 a0 06 	call	0xd40	; 0xd40 <H_LED_Void_LedOff>
}
     2fc:	cf 91       	pop	r28
     2fe:	1f 91       	pop	r17
     300:	0f 91       	pop	r16
     302:	08 95       	ret

00000304 <APP_PutFingerToScan>:
*  parameters (in)  : None
*  parameters (out) : None
*  Return Value     : None
*************************************************************************/
void APP_PutFingerToScan(void){
	H_Lcd_Void_LCDClear();
     304:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <H_Lcd_Void_LCDClear>
	H_Lcd_Void_LCDWriteString((u8*) "Put finger to scan");
     308:	8a e2       	ldi	r24, 0x2A	; 42
     30a:	91 e0       	ldi	r25, 0x01	; 1
     30c:	0e 94 cd 05 	call	0xb9a	; 0xb9a <H_Lcd_Void_LCDWriteString>
     310:	08 95       	ret

00000312 <APP_WarningHandler>:
*  Reentrance       : Reentrant
*  parameters (in)  : WarningType
*  parameters (out) : None
*  Return Value     : user_action (GOBACK_BUTTON_PRESSED or MAIN_MENU_BUTTON_PRESSED)
*************************************************************************/
u8 APP_WarningHandler(APP_Warnings warningType){
     312:	cf 93       	push	r28
     314:	c8 2f       	mov	r28, r24
	* led red on  +  lcd warning display
	* wait  for the go back key to get pressed
	* then
	* initial state */
	u8 user_action = KEYPAD_RELEASED;
	H_LED_Void_LedOn(LED_RED);
     316:	84 e0       	ldi	r24, 0x04	; 4
     318:	0e 94 81 06 	call	0xd02	; 0xd02 <H_LED_Void_LedOn>
	H_Lcd_Void_LCDClear();
     31c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <H_Lcd_Void_LCDClear>
	H_Lcd_Void_LCDWriteString((u8*) "Warning:");
     320:	8d e3       	ldi	r24, 0x3D	; 61
     322:	91 e0       	ldi	r25, 0x01	; 1
     324:	0e 94 cd 05 	call	0xb9a	; 0xb9a <H_Lcd_Void_LCDWriteString>
	H_Lcd_Void_LCDGoTo(1,0);
     328:	60 e0       	ldi	r22, 0x00	; 0
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	0e 94 43 06 	call	0xc86	; 0xc86 <H_Lcd_Void_LCDGoTo>
	/*Switch on warning type and print the warning on LCD*/
	switch (warningType){
     330:	c1 30       	cpi	r28, 0x01	; 1
     332:	81 f0       	breq	.+32     	; 0x354 <APP_WarningHandler+0x42>
     334:	28 f0       	brcs	.+10     	; 0x340 <APP_WarningHandler+0x2e>
     336:	c2 30       	cpi	r28, 0x02	; 2
     338:	91 f0       	breq	.+36     	; 0x35e <APP_WarningHandler+0x4c>
     33a:	ce 3f       	cpi	r28, 0xFE	; 254
     33c:	31 f0       	breq	.+12     	; 0x34a <APP_WarningHandler+0x38>
     33e:	1b c0       	rjmp	.+54     	; 0x376 <APP_WarningHandler+0x64>
	case ALREADY_TAKEN_ID:
		H_Lcd_Void_LCDWriteString((u8*) "ALREADY TAKEN ID");
     340:	86 e4       	ldi	r24, 0x46	; 70
     342:	91 e0       	ldi	r25, 0x01	; 1
     344:	0e 94 cd 05 	call	0xb9a	; 0xb9a <H_Lcd_Void_LCDWriteString>
	break;
     348:	16 c0       	rjmp	.+44     	; 0x376 <APP_WarningHandler+0x64>
	case OUT_OF_RANGE_ID:
		H_Lcd_Void_LCDWriteString((u8*) "OUT OF RANGE ID");
     34a:	87 e5       	ldi	r24, 0x57	; 87
     34c:	91 e0       	ldi	r25, 0x01	; 1
     34e:	0e 94 cd 05 	call	0xb9a	; 0xb9a <H_Lcd_Void_LCDWriteString>
	break;
     352:	11 c0       	rjmp	.+34     	; 0x376 <APP_WarningHandler+0x64>
	case ID_NOT_FOUND:
		H_Lcd_Void_LCDWriteString((u8*) "ID NOT FOUND");
     354:	87 e6       	ldi	r24, 0x67	; 103
     356:	91 e0       	ldi	r25, 0x01	; 1
     358:	0e 94 cd 05 	call	0xb9a	; 0xb9a <H_Lcd_Void_LCDWriteString>
	break;
     35c:	0c c0       	rjmp	.+24     	; 0x376 <APP_WarningHandler+0x64>
	case FINGERPRINT_NOT_FOUND:
		H_Lcd_Void_LCDWriteString((u8*) "FINGERPRINT NOTFOUND"); 
     35e:	84 e7       	ldi	r24, 0x74	; 116
     360:	91 e0       	ldi	r25, 0x01	; 1
     362:	0e 94 cd 05 	call	0xb9a	; 0xb9a <H_Lcd_Void_LCDWriteString>
		H_Lcd_Void_LCDGoTo(2,0); 
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	82 e0       	ldi	r24, 0x02	; 2
     36a:	0e 94 43 06 	call	0xc86	; 0xc86 <H_Lcd_Void_LCDGoTo>
		H_Lcd_Void_LCDWriteString((u8*) "PLEASE TRY AGAIN"); 
     36e:	89 e8       	ldi	r24, 0x89	; 137
     370:	91 e0       	ldi	r25, 0x01	; 1
     372:	0e 94 cd 05 	call	0xb9a	; 0xb9a <H_Lcd_Void_LCDWriteString>
	break;
	}
	H_Lcd_Void_LCDGoTo(3,0);
     376:	60 e0       	ldi	r22, 0x00	; 0
     378:	83 e0       	ldi	r24, 0x03	; 3
     37a:	0e 94 43 06 	call	0xc86	; 0xc86 <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteString((u8*) "C : Main Menu");
     37e:	8a e9       	ldi	r24, 0x9A	; 154
     380:	91 e0       	ldi	r25, 0x01	; 1
     382:	0e 94 cd 05 	call	0xb9a	; 0xb9a <H_Lcd_Void_LCDWriteString>
	/* sequence
	* led red on  +  lcd warning display
	* wait  for the go back key to get pressed
	* then
	* initial state */
	u8 user_action = KEYPAD_RELEASED;
     386:	c1 e0       	ldi	r28, 0x01	; 1
		H_Lcd_Void_LCDWriteString((u8*) "PLEASE TRY AGAIN"); 
	break;
	}
	H_Lcd_Void_LCDGoTo(3,0);
	H_Lcd_Void_LCDWriteString((u8*) "C : Main Menu");
	while(user_action != MAIN_MENU_BUTTON_PRESSED){
     388:	03 c0       	rjmp	.+6      	; 0x390 <APP_WarningHandler+0x7e>
		user_action=H_KeyPad_U8_KeyPadRead();
     38a:	0e 94 54 04 	call	0x8a8	; 0x8a8 <H_KeyPad_U8_KeyPadRead>
     38e:	c8 2f       	mov	r28, r24
		H_Lcd_Void_LCDWriteString((u8*) "PLEASE TRY AGAIN"); 
	break;
	}
	H_Lcd_Void_LCDGoTo(3,0);
	H_Lcd_Void_LCDWriteString((u8*) "C : Main Menu");
	while(user_action != MAIN_MENU_BUTTON_PRESSED){
     390:	c3 34       	cpi	r28, 0x43	; 67
     392:	d9 f7       	brne	.-10     	; 0x38a <APP_WarningHandler+0x78>
		user_action=H_KeyPad_U8_KeyPadRead();
	}
	H_LED_Void_LedOff(LED_RED);
     394:	84 e0       	ldi	r24, 0x04	; 4
     396:	0e 94 a0 06 	call	0xd40	; 0xd40 <H_LED_Void_LedOff>
	return user_action;
}
     39a:	8c 2f       	mov	r24, r28
     39c:	cf 91       	pop	r28
     39e:	08 95       	ret

000003a0 <H_Void_EEPROMWrite>:
 *
 * Created: 3/27/2024 5:29:15 PM
 *  Author: seif
 */ 
#include "EEPROM_Interfac.h"
void H_Void_EEPROMWrite(u16 address, u8 data){
     3a0:	1f 93       	push	r17
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
     3a6:	ec 01       	movw	r28, r24
     3a8:	16 2f       	mov	r17, r22
	/*Address to Write = 0011 1010 1111*/  
	/*				   & 0011 0000 0000*/
	/*		0xA0	   |      1010 0000*/
	M_U8_I2C_Start();  
     3aa:	0e 94 79 09 	call	0x12f2	; 0x12f2 <M_U8_I2C_Start>
	/*SEND 1010 + E A9 A8 + W*/
	M_U8_I2C_SendSlaveAddressWithWrite((u8)(0xA0 | ((address & 0x300) >> 7))); 
     3ae:	ce 01       	movw	r24, r28
     3b0:	88 27       	eor	r24, r24
     3b2:	93 70       	andi	r25, 0x03	; 3
     3b4:	88 0f       	add	r24, r24
     3b6:	89 2f       	mov	r24, r25
     3b8:	88 1f       	adc	r24, r24
     3ba:	99 0b       	sbc	r25, r25
     3bc:	91 95       	neg	r25
     3be:	80 6a       	ori	r24, 0xA0	; 160
     3c0:	0e 94 84 09 	call	0x1308	; 0x1308 <M_U8_I2C_SendSlaveAddressWithWrite>
	/*Complete Address to write data in*/
	M_U8_I2C_Write((u8) address); 
     3c4:	8c 2f       	mov	r24, r28
     3c6:	0e 94 a1 09 	call	0x1342	; 0x1342 <M_U8_I2C_Write>
	M_U8_I2C_Write(data); 
     3ca:	81 2f       	mov	r24, r17
     3cc:	0e 94 a1 09 	call	0x1342	; 0x1342 <M_U8_I2C_Write>
	M_Void_I2C_STOP(); 
     3d0:	0e 94 b8 09 	call	0x1370	; 0x1370 <M_Void_I2C_STOP>
} 
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	1f 91       	pop	r17
     3da:	08 95       	ret

000003dc <H_Void_EEPROMRead>:
u8 H_Void_EEPROMRead (u16 address){ 
     3dc:	0f 93       	push	r16
     3de:	1f 93       	push	r17
     3e0:	cf 93       	push	r28
     3e2:	df 93       	push	r29
     3e4:	8c 01       	movw	r16, r24
	u8 data;
	/*Write Address = 0011 1010 1111*/
	/*              & 0011 0000 0000*/
	/*              |      1010 0000*/
	M_U8_I2C_Start(); 
     3e6:	0e 94 79 09 	call	0x12f2	; 0x12f2 <M_U8_I2C_Start>
	/*SEND 1010 + E A9 A8 + W*/
	M_U8_I2C_SendSlaveAddressWithWrite((u8)((0xA0) | ((address & 0x300) >> 7)));
     3ea:	e8 01       	movw	r28, r16
     3ec:	cc 27       	eor	r28, r28
     3ee:	d3 70       	andi	r29, 0x03	; 3
     3f0:	cc 0f       	add	r28, r28
     3f2:	cd 2f       	mov	r28, r29
     3f4:	cc 1f       	adc	r28, r28
     3f6:	dd 0b       	sbc	r29, r29
     3f8:	d1 95       	neg	r29
     3fa:	8c 2f       	mov	r24, r28
     3fc:	80 6a       	ori	r24, 0xA0	; 160
     3fe:	0e 94 84 09 	call	0x1308	; 0x1308 <M_U8_I2C_SendSlaveAddressWithWrite>
	/*Complete address to read from*/ 
	M_U8_I2C_Write((u8) address);  
     402:	80 2f       	mov	r24, r16
     404:	0e 94 a1 09 	call	0x1342	; 0x1342 <M_U8_I2C_Write>
	M_U8_I2C_Repeated_Start();  
     408:	0e 94 8d 09 	call	0x131a	; 0x131a <M_U8_I2C_Repeated_Start>
	M_U8_I2C_SendSlaveAddressWithRead((u8)(0xA0 | ((address & 0x300) >> 7) | 0x01)); 
     40c:	8c 2f       	mov	r24, r28
     40e:	81 6a       	ori	r24, 0xA1	; 161
     410:	0e 94 98 09 	call	0x1330	; 0x1330 <M_U8_I2C_SendSlaveAddressWithRead>
	data = M_U8_I2C_ReadWithNack(); 
     414:	0e 94 b1 09 	call	0x1362	; 0x1362 <M_U8_I2C_ReadWithNack>
     418:	c8 2f       	mov	r28, r24
	M_Void_I2C_STOP(); 
     41a:	0e 94 b8 09 	call	0x1370	; 0x1370 <M_Void_I2C_STOP>
	return data; 
     41e:	8c 2f       	mov	r24, r28
     420:	df 91       	pop	r29
     422:	cf 91       	pop	r28
     424:	1f 91       	pop	r17
     426:	0f 91       	pop	r16
     428:	08 95       	ret

0000042a <FingerP_send>:
	
	UART_sendByte(NUM_OF_PAGES_TO_SEARCH>>ONE_BYTE_SHIFT);
	UART_sendByte(NUM_OF_PAGES_TO_SEARCH>>NO_BYTE_SHIFT);
	
	UART_sendByte((PCK_ID_COMMAND_PACK+LENGTH_8BYTE+SEARCH_FINGER+CHAR_BUFFER_1+FIRST_PAGE_ID+NUM_OF_PAGES_TO_SEARCH)>>ONE_BYTE_SHIFT);
	UART_sendByte((PCK_ID_COMMAND_PACK+LENGTH_8BYTE+SEARCH_FINGER+CHAR_BUFFER_1+FIRST_PAGE_ID+NUM_OF_PAGES_TO_SEARCH)>>NO_BYTE_SHIFT);
     42a:	1f 93       	push	r17
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	18 2f       	mov	r17, r24
     432:	c6 2f       	mov	r28, r22
     434:	d7 2f       	mov	r29, r23
     436:	8f ee       	ldi	r24, 0xEF	; 239
     438:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     442:	8f ef       	ldi	r24, 0xFF	; 255
     444:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     448:	8f ef       	ldi	r24, 0xFF	; 255
     44a:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     44e:	8f ef       	ldi	r24, 0xFF	; 255
     450:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     454:	8f ef       	ldi	r24, 0xFF	; 255
     456:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     45a:	81 2f       	mov	r24, r17
     45c:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     460:	8d 2f       	mov	r24, r29
     462:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     466:	8c 2f       	mov	r24, r28
     468:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	1f 91       	pop	r17
     472:	08 95       	ret

00000474 <FingerPS_AuraLedConfig>:
     474:	67 e0       	ldi	r22, 0x07	; 7
     476:	70 e0       	ldi	r23, 0x00	; 0
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	0e 94 15 02 	call	0x42a	; 0x42a <FingerP_send>
     47e:	85 e3       	ldi	r24, 0x35	; 53
     480:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     484:	82 e0       	ldi	r24, 0x02	; 2
     486:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     48a:	8f e0       	ldi	r24, 0x0F	; 15
     48c:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     490:	83 e0       	ldi	r24, 0x03	; 3
     492:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     4a2:	82 e5       	ldi	r24, 0x52	; 82
     4a4:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     4a8:	08 95       	ret

000004aa <FingerPS_genImg>:
     4aa:	63 e0       	ldi	r22, 0x03	; 3
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	0e 94 15 02 	call	0x42a	; 0x42a <FingerP_send>
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     4c0:	85 e0       	ldi	r24, 0x05	; 5
     4c2:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     4c6:	08 95       	ret

000004c8 <FingerPS_convertImg1CharFile>:
     4c8:	8f ee       	ldi	r24, 0xEF	; 239
     4ca:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     4ce:	81 e0       	ldi	r24, 0x01	; 1
     4d0:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     4d4:	8f ef       	ldi	r24, 0xFF	; 255
     4d6:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     4da:	8f ef       	ldi	r24, 0xFF	; 255
     4dc:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     4e0:	8f ef       	ldi	r24, 0xFF	; 255
     4e2:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     4e6:	8f ef       	ldi	r24, 0xFF	; 255
     4e8:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     4f8:	84 e0       	ldi	r24, 0x04	; 4
     4fa:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     4fe:	82 e0       	ldi	r24, 0x02	; 2
     500:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     510:	88 e0       	ldi	r24, 0x08	; 8
     512:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     516:	08 95       	ret

00000518 <FingerPS_convertImg2CharFile>:
     518:	8f ee       	ldi	r24, 0xEF	; 239
     51a:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     524:	8f ef       	ldi	r24, 0xFF	; 255
     526:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     52a:	8f ef       	ldi	r24, 0xFF	; 255
     52c:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     530:	8f ef       	ldi	r24, 0xFF	; 255
     532:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     536:	8f ef       	ldi	r24, 0xFF	; 255
     538:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     548:	84 e0       	ldi	r24, 0x04	; 4
     54a:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     54e:	82 e0       	ldi	r24, 0x02	; 2
     550:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     554:	82 e0       	ldi	r24, 0x02	; 2
     556:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     560:	89 e0       	ldi	r24, 0x09	; 9
     562:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     566:	08 95       	ret

00000568 <FingerPS_genTemplate>:
     568:	8f ee       	ldi	r24, 0xEF	; 239
     56a:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     574:	8f ef       	ldi	r24, 0xFF	; 255
     576:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     57a:	8f ef       	ldi	r24, 0xFF	; 255
     57c:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     580:	8f ef       	ldi	r24, 0xFF	; 255
     582:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     586:	8f ef       	ldi	r24, 0xFF	; 255
     588:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     598:	83 e0       	ldi	r24, 0x03	; 3
     59a:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     59e:	85 e0       	ldi	r24, 0x05	; 5
     5a0:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     5aa:	89 e0       	ldi	r24, 0x09	; 9
     5ac:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     5b0:	08 95       	ret

000005b2 <FingerPS_strTemplate>:
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	ec 01       	movw	r28, r24
     5b8:	66 e0       	ldi	r22, 0x06	; 6
     5ba:	70 e0       	ldi	r23, 0x00	; 0
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	0e 94 15 02 	call	0x42a	; 0x42a <FingerP_send>
     5c2:	86 e0       	ldi	r24, 0x06	; 6
     5c4:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     5ce:	8d 2f       	mov	r24, r29
     5d0:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     5d4:	8c 2f       	mov	r24, r28
     5d6:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     5da:	ce 01       	movw	r24, r28
     5dc:	0e 96       	adiw	r24, 0x0e	; 14
     5de:	89 2f       	mov	r24, r25
     5e0:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     5e4:	8c 2f       	mov	r24, r28
     5e6:	82 5f       	subi	r24, 0xF2	; 242
     5e8:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     5ec:	df 91       	pop	r29
     5ee:	cf 91       	pop	r28
     5f0:	08 95       	ret

000005f2 <FingerPS_LoadCharFile>:
}  
void FingerPS_LoadCharFile(u16 address){
     5f2:	cf 93       	push	r28
     5f4:	df 93       	push	r29
     5f6:	c8 2f       	mov	r28, r24
     5f8:	d9 2f       	mov	r29, r25
	UART_sendByte(0xef);
     5fa:	8f ee       	ldi	r24, 0xEF	; 239
     5fc:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
	UART_sendByte(0x01);
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
	UART_sendByte(0xff);
     606:	8f ef       	ldi	r24, 0xFF	; 255
     608:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
	UART_sendByte(0xff);
     60c:	8f ef       	ldi	r24, 0xFF	; 255
     60e:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
	UART_sendByte(0xff);
     612:	8f ef       	ldi	r24, 0xFF	; 255
     614:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
	UART_sendByte(0xff);
     618:	8f ef       	ldi	r24, 0xFF	; 255
     61a:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
	UART_sendByte(0x01);
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
	UART_sendByte(0x00);
     624:	80 e0       	ldi	r24, 0x00	; 0
     626:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
	UART_sendByte(0x06);
     62a:	86 e0       	ldi	r24, 0x06	; 6
     62c:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
	UART_sendByte(0x07);
     630:	87 e0       	ldi	r24, 0x07	; 7
     632:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
	UART_sendByte(0x02); /*load in the char file 2*/
     636:	82 e0       	ldi	r24, 0x02	; 2
     638:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
	UART_sendByte(address>>ONE_BYTE_SHIFT);
     63c:	8d 2f       	mov	r24, r29
     63e:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
	UART_sendByte(address>>NO_BYTE_SHIFT);
     642:	8c 2f       	mov	r24, r28
     644:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
	UART_sendByte(0x00); 
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
	UART_sendByte(0x14);
     64e:	84 e1       	ldi	r24, 0x14	; 20
     650:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
} 
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	08 95       	ret

0000065a <FingerPS_match>:
void FingerPS_match(){
	UART_sendByte(0xef);
     65a:	8f ee       	ldi	r24, 0xEF	; 239
     65c:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
	UART_sendByte(0x01);
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
	UART_sendByte(0xff);
     666:	8f ef       	ldi	r24, 0xFF	; 255
     668:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
	UART_sendByte(0xff);
     66c:	8f ef       	ldi	r24, 0xFF	; 255
     66e:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
	UART_sendByte(0xff);
     672:	8f ef       	ldi	r24, 0xFF	; 255
     674:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
	UART_sendByte(0xff);
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
	UART_sendByte(0x01);
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
	UART_sendByte(0x00);
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
	UART_sendByte(0x03);
     68a:	83 e0       	ldi	r24, 0x03	; 3
     68c:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
	UART_sendByte(0x03);
     690:	83 e0       	ldi	r24, 0x03	; 3
     692:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
	UART_sendByte(0x00);
     696:	80 e0       	ldi	r24, 0x00	; 0
     698:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
	UART_sendByte(0x07);
     69c:	87 e0       	ldi	r24, 0x07	; 7
     69e:	0e 94 ce 09 	call	0x139c	; 0x139c <UART_sendByte>
     6a2:	08 95       	ret

000006a4 <StoreAckBytes>:
}
/********************************************** ISR	***************************************/
void StoreAckBytes (u8 RecivedByte){
	static u8 i = 0;
	AckPack [i] = RecivedByte; 
     6a4:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <__data_end>
     6a8:	e9 2f       	mov	r30, r25
     6aa:	f0 e0       	ldi	r31, 0x00	; 0
     6ac:	e7 55       	subi	r30, 0x57	; 87
     6ae:	fe 4f       	sbci	r31, 0xFE	; 254
     6b0:	80 83       	st	Z, r24
	if (i==11){
     6b2:	9b 30       	cpi	r25, 0x0B	; 11
     6b4:	19 f4       	brne	.+6      	; 0x6bc <StoreAckBytes+0x18>
		i = 0;
     6b6:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <__data_end>
     6ba:	08 95       	ret
	}
	else i++;
     6bc:	9f 5f       	subi	r25, 0xFF	; 255
     6be:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <__data_end>
     6c2:	08 95       	ret

000006c4 <FingerPS_CheckAck>:
}
/********************************************* FUNCTION TO CHECK THE SUM OF EACH ACKNOWLEDGMENT PACK	***************/
u8 FingerPS_CheckAck (){
	u8 CheckResult;
	if (AckPack[11] == 0x0A){
     6c4:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <AckPack+0xb>
     6c8:	8a 30       	cpi	r24, 0x0A	; 10
     6ca:	21 f4       	brne	.+8      	; 0x6d4 <FingerPS_CheckAck+0x10>
		CheckResult = true ;
		AckPack [11] = 0x00; 
     6cc:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <AckPack+0xb>
}
/********************************************* FUNCTION TO CHECK THE SUM OF EACH ACKNOWLEDGMENT PACK	***************/
u8 FingerPS_CheckAck (){
	u8 CheckResult;
	if (AckPack[11] == 0x0A){
		CheckResult = true ;
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	08 95       	ret
		AckPack [11] = 0x00; 
	}
	else{
		CheckResult = false;
     6d4:	80 e0       	ldi	r24, 0x00	; 0
	}
	return CheckResult;
} 
     6d6:	08 95       	ret

000006d8 <FingerPS_SetNewFingerPrint>:
void FingerPS_SetNewFingerPrint (u16 address){
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
     6dc:	ec 01       	movw	r28, r24
	/*********************************************		FIRST IMAGE GENERATION	******************************************/
	RepeatGenImag1:
	FingerPS_genImg();
     6de:	0e 94 55 02 	call	0x4aa	; 0x4aa <FingerPS_genImg>
     6e2:	2f ef       	ldi	r18, 0xFF	; 255
     6e4:	81 ee       	ldi	r24, 0xE1	; 225
     6e6:	94 e0       	ldi	r25, 0x04	; 4
     6e8:	21 50       	subi	r18, 0x01	; 1
     6ea:	80 40       	sbci	r24, 0x00	; 0
     6ec:	90 40       	sbci	r25, 0x00	; 0
     6ee:	e1 f7       	brne	.-8      	; 0x6e8 <FingerPS_SetNewFingerPrint+0x10>
     6f0:	00 c0       	rjmp	.+0      	; 0x6f2 <FingerPS_SetNewFingerPrint+0x1a>
     6f2:	00 00       	nop
	_delay_ms(100);
	if (FingerPS_CheckAck() == false) goto RepeatGenImag1; /*WAIT FOR ACK*/
     6f4:	0e 94 62 03 	call	0x6c4	; 0x6c4 <FingerPS_CheckAck>
     6f8:	88 23       	and	r24, r24
     6fa:	89 f3       	breq	.-30     	; 0x6de <FingerPS_SetNewFingerPrint+0x6>
	/*********************************************	FIRST CHARACTER FILE GENERATION	**************************************/
	RepeatConvertFile1:
	FingerPS_convertImg1CharFile();
     6fc:	0e 94 64 02 	call	0x4c8	; 0x4c8 <FingerPS_convertImg1CharFile>
     700:	2f ef       	ldi	r18, 0xFF	; 255
     702:	81 ee       	ldi	r24, 0xE1	; 225
     704:	94 e0       	ldi	r25, 0x04	; 4
     706:	21 50       	subi	r18, 0x01	; 1
     708:	80 40       	sbci	r24, 0x00	; 0
     70a:	90 40       	sbci	r25, 0x00	; 0
     70c:	e1 f7       	brne	.-8      	; 0x706 <FingerPS_SetNewFingerPrint+0x2e>
     70e:	00 c0       	rjmp	.+0      	; 0x710 <FingerPS_SetNewFingerPrint+0x38>
     710:	00 00       	nop
	_delay_ms(100);
	if (FingerPS_CheckAck() == false) goto RepeatConvertFile1; /*WAIT FOR ACK*/
     712:	0e 94 62 03 	call	0x6c4	; 0x6c4 <FingerPS_CheckAck>
     716:	88 23       	and	r24, r24
     718:	89 f3       	breq	.-30     	; 0x6fc <FingerPS_SetNewFingerPrint+0x24>
	/*********************************************		SECOND IMAGE GENERATION		**************************************/
	RepeatGenImag2:
	FingerPS_genImg();
     71a:	0e 94 55 02 	call	0x4aa	; 0x4aa <FingerPS_genImg>
     71e:	2f ef       	ldi	r18, 0xFF	; 255
     720:	81 ee       	ldi	r24, 0xE1	; 225
     722:	94 e0       	ldi	r25, 0x04	; 4
     724:	21 50       	subi	r18, 0x01	; 1
     726:	80 40       	sbci	r24, 0x00	; 0
     728:	90 40       	sbci	r25, 0x00	; 0
     72a:	e1 f7       	brne	.-8      	; 0x724 <FingerPS_SetNewFingerPrint+0x4c>
     72c:	00 c0       	rjmp	.+0      	; 0x72e <FingerPS_SetNewFingerPrint+0x56>
     72e:	00 00       	nop
	_delay_ms(100);
	if (FingerPS_CheckAck() == false) goto RepeatGenImag2;/*WAIT FOR ACK*/
     730:	0e 94 62 03 	call	0x6c4	; 0x6c4 <FingerPS_CheckAck>
     734:	88 23       	and	r24, r24
     736:	89 f3       	breq	.-30     	; 0x71a <FingerPS_SetNewFingerPrint+0x42>
	/*********************************************		SECONED CHAR FILE GENERATED		**********************************/
	RepeatConvertFile2:
	FingerPS_convertImg2CharFile();
     738:	0e 94 8c 02 	call	0x518	; 0x518 <FingerPS_convertImg2CharFile>
     73c:	2f ef       	ldi	r18, 0xFF	; 255
     73e:	81 ee       	ldi	r24, 0xE1	; 225
     740:	94 e0       	ldi	r25, 0x04	; 4
     742:	21 50       	subi	r18, 0x01	; 1
     744:	80 40       	sbci	r24, 0x00	; 0
     746:	90 40       	sbci	r25, 0x00	; 0
     748:	e1 f7       	brne	.-8      	; 0x742 <FingerPS_SetNewFingerPrint+0x6a>
     74a:	00 c0       	rjmp	.+0      	; 0x74c <FingerPS_SetNewFingerPrint+0x74>
     74c:	00 00       	nop
	_delay_ms(100);
	if (FingerPS_CheckAck() == false) goto RepeatConvertFile2;/*WAIT FOR ACK*/
     74e:	0e 94 62 03 	call	0x6c4	; 0x6c4 <FingerPS_CheckAck>
     752:	88 23       	and	r24, r24
     754:	89 f3       	breq	.-30     	; 0x738 <FingerPS_SetNewFingerPrint+0x60>
	/********************************************		Generate Tempelate			**********************************/
	FingerPS_genTemplate();
     756:	0e 94 b4 02 	call	0x568	; 0x568 <FingerPS_genTemplate>
     75a:	2f ef       	ldi	r18, 0xFF	; 255
     75c:	89 e6       	ldi	r24, 0x69	; 105
     75e:	98 e1       	ldi	r25, 0x18	; 24
     760:	21 50       	subi	r18, 0x01	; 1
     762:	80 40       	sbci	r24, 0x00	; 0
     764:	90 40       	sbci	r25, 0x00	; 0
     766:	e1 f7       	brne	.-8      	; 0x760 <FingerPS_SetNewFingerPrint+0x88>
     768:	00 c0       	rjmp	.+0      	; 0x76a <FingerPS_SetNewFingerPrint+0x92>
     76a:	00 00       	nop
	_delay_ms(500);
	if (FingerPS_CheckAck() == false) goto RepeatGenImag1;/*WAIT FOR ACK*/
     76c:	0e 94 62 03 	call	0x6c4	; 0x6c4 <FingerPS_CheckAck>
     770:	88 23       	and	r24, r24
     772:	09 f4       	brne	.+2      	; 0x776 <FingerPS_SetNewFingerPrint+0x9e>
     774:	b4 cf       	rjmp	.-152    	; 0x6de <FingerPS_SetNewFingerPrint+0x6>
	/*******************************************		Tempelate Storing			***********************************/
	RepeatStrTemp:
	FingerPS_strTemplate(address);
     776:	ce 01       	movw	r24, r28
     778:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <FingerPS_strTemplate>
     77c:	2f ef       	ldi	r18, 0xFF	; 255
     77e:	81 ee       	ldi	r24, 0xE1	; 225
     780:	94 e0       	ldi	r25, 0x04	; 4
     782:	21 50       	subi	r18, 0x01	; 1
     784:	80 40       	sbci	r24, 0x00	; 0
     786:	90 40       	sbci	r25, 0x00	; 0
     788:	e1 f7       	brne	.-8      	; 0x782 <FingerPS_SetNewFingerPrint+0xaa>
     78a:	00 c0       	rjmp	.+0      	; 0x78c <FingerPS_SetNewFingerPrint+0xb4>
     78c:	00 00       	nop
	_delay_ms(100);
	if (FingerPS_CheckAck() == false) goto RepeatStrTemp;/*WAIT FOR ACK*/
     78e:	0e 94 62 03 	call	0x6c4	; 0x6c4 <FingerPS_CheckAck>
     792:	88 23       	and	r24, r24
     794:	81 f3       	breq	.-32     	; 0x776 <FingerPS_SetNewFingerPrint+0x9e>
}
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	08 95       	ret

0000079c <FingerPS_CheckOneToOneMatch>:
u8 FingerPS_CheckOneToOneMatch(u16 address){
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	ec 01       	movw	r28, r24
	u8 match_result; 
	/*******************************************		Generate Image to check one to one match	********************/
	RepeatCheckImagGen:
	FingerPS_genImg();
     7a2:	0e 94 55 02 	call	0x4aa	; 0x4aa <FingerPS_genImg>
     7a6:	2f ef       	ldi	r18, 0xFF	; 255
     7a8:	81 ee       	ldi	r24, 0xE1	; 225
     7aa:	94 e0       	ldi	r25, 0x04	; 4
     7ac:	21 50       	subi	r18, 0x01	; 1
     7ae:	80 40       	sbci	r24, 0x00	; 0
     7b0:	90 40       	sbci	r25, 0x00	; 0
     7b2:	e1 f7       	brne	.-8      	; 0x7ac <FingerPS_CheckOneToOneMatch+0x10>
     7b4:	00 c0       	rjmp	.+0      	; 0x7b6 <FingerPS_CheckOneToOneMatch+0x1a>
     7b6:	00 00       	nop
	_delay_ms(100);
	if (FingerPS_CheckAck() == false) goto RepeatCheckImagGen; /*WAIT FOR ACK*/
     7b8:	0e 94 62 03 	call	0x6c4	; 0x6c4 <FingerPS_CheckAck>
     7bc:	88 23       	and	r24, r24
     7be:	89 f3       	breq	.-30     	; 0x7a2 <FingerPS_CheckOneToOneMatch+0x6>
	H_Lcd_Void_LCDWriteCharacter('*');
     7c0:	8a e2       	ldi	r24, 0x2A	; 42
     7c2:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <H_Lcd_Void_LCDWriteCharacter>
	/******************************************			Generate char from Check Image	****************************************/
	RepeatCharCheckFileGen:
	FingerPS_convertImg1CharFile();
     7c6:	0e 94 64 02 	call	0x4c8	; 0x4c8 <FingerPS_convertImg1CharFile>
     7ca:	2f ef       	ldi	r18, 0xFF	; 255
     7cc:	81 ee       	ldi	r24, 0xE1	; 225
     7ce:	94 e0       	ldi	r25, 0x04	; 4
     7d0:	21 50       	subi	r18, 0x01	; 1
     7d2:	80 40       	sbci	r24, 0x00	; 0
     7d4:	90 40       	sbci	r25, 0x00	; 0
     7d6:	e1 f7       	brne	.-8      	; 0x7d0 <FingerPS_CheckOneToOneMatch+0x34>
     7d8:	00 c0       	rjmp	.+0      	; 0x7da <FingerPS_CheckOneToOneMatch+0x3e>
     7da:	00 00       	nop
	_delay_ms(100);
	if (FingerPS_CheckAck() == false) goto RepeatCharCheckFileGen; /*WAIT FOR ACK*/
     7dc:	0e 94 62 03 	call	0x6c4	; 0x6c4 <FingerPS_CheckAck>
     7e0:	88 23       	and	r24, r24
     7e2:	89 f3       	breq	.-30     	; 0x7c6 <FingerPS_CheckOneToOneMatch+0x2a>
	H_Lcd_Void_LCDWriteCharacter('*');
     7e4:	8a e2       	ldi	r24, 0x2A	; 42
     7e6:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <H_Lcd_Void_LCDWriteCharacter>
	/******************************************			Load Char in char file 2	***********************************/
	RepeatLoadCharFile:
	FingerPS_LoadCharFile(address);
     7ea:	ce 01       	movw	r24, r28
     7ec:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <FingerPS_LoadCharFile>
     7f0:	2f ef       	ldi	r18, 0xFF	; 255
     7f2:	81 ee       	ldi	r24, 0xE1	; 225
     7f4:	94 e0       	ldi	r25, 0x04	; 4
     7f6:	21 50       	subi	r18, 0x01	; 1
     7f8:	80 40       	sbci	r24, 0x00	; 0
     7fa:	90 40       	sbci	r25, 0x00	; 0
     7fc:	e1 f7       	brne	.-8      	; 0x7f6 <FingerPS_CheckOneToOneMatch+0x5a>
     7fe:	00 c0       	rjmp	.+0      	; 0x800 <__DATA_REGION_LENGTH__>
     800:	00 00       	nop
	_delay_ms(100);
	if (FingerPS_CheckAck() == false) goto RepeatLoadCharFile; /*Wait for ACK*/
     802:	0e 94 62 03 	call	0x6c4	; 0x6c4 <FingerPS_CheckAck>
     806:	88 23       	and	r24, r24
     808:	81 f3       	breq	.-32     	; 0x7ea <FingerPS_CheckOneToOneMatch+0x4e>
	H_Lcd_Void_LCDWriteCharacter('*');
     80a:	8a e2       	ldi	r24, 0x2A	; 42
     80c:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <H_Lcd_Void_LCDWriteCharacter>
	/******************************************			CHECK MATCH				****************************************/
	FingerPS_match();
     810:	0e 94 2d 03 	call	0x65a	; 0x65a <FingerPS_match>
     814:	2f ef       	ldi	r18, 0xFF	; 255
     816:	81 ee       	ldi	r24, 0xE1	; 225
     818:	94 e0       	ldi	r25, 0x04	; 4
     81a:	21 50       	subi	r18, 0x01	; 1
     81c:	80 40       	sbci	r24, 0x00	; 0
     81e:	90 40       	sbci	r25, 0x00	; 0
     820:	e1 f7       	brne	.-8      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     822:	00 c0       	rjmp	.+0      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     824:	00 00       	nop
	_delay_ms(100); 
	if (AckPack[9] == 0x00){
     826:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <AckPack+0x9>
     82a:	81 11       	cpse	r24, r1
     82c:	05 c0       	rjmp	.+10     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
		match_result = MATCHED;
		H_Lcd_Void_LCDWriteCharacter('M');
     82e:	8d e4       	ldi	r24, 0x4D	; 77
     830:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <H_Lcd_Void_LCDWriteCharacter>
	H_Lcd_Void_LCDWriteCharacter('*');
	/******************************************			CHECK MATCH				****************************************/
	FingerPS_match();
	_delay_ms(100); 
	if (AckPack[9] == 0x00){
		match_result = MATCHED;
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	04 c0       	rjmp	.+8      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
		H_Lcd_Void_LCDWriteCharacter('M');
	}
	else {
		match_result = NOTMATCHED;  
		H_Lcd_Void_LCDWriteCharacter('N');
     838:	8e e4       	ldi	r24, 0x4E	; 78
     83a:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <H_Lcd_Void_LCDWriteCharacter>
	if (AckPack[9] == 0x00){
		match_result = MATCHED;
		H_Lcd_Void_LCDWriteCharacter('M');
	}
	else {
		match_result = NOTMATCHED;  
     83e:	80 e0       	ldi	r24, 0x00	; 0
		H_Lcd_Void_LCDWriteCharacter('N');
	} 
	return match_result; 
}
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	08 95       	ret

00000846 <H_KeyPad_Void_KeyPadInit>:
/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
void H_KeyPad_Void_KeyPadInit(void)
{
	M_DIO_Void_SetPinDirection(KEYPAD_R0_PIN,OUTPUT);
     846:	61 e0       	ldi	r22, 0x01	; 1
     848:	83 e2       	ldi	r24, 0x23	; 35
     84a:	0e 94 06 08 	call	0x100c	; 0x100c <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R1_PIN,OUTPUT);
     84e:	61 e0       	ldi	r22, 0x01	; 1
     850:	82 e2       	ldi	r24, 0x22	; 34
     852:	0e 94 06 08 	call	0x100c	; 0x100c <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R2_PIN,OUTPUT);
     856:	61 e0       	ldi	r22, 0x01	; 1
     858:	81 e2       	ldi	r24, 0x21	; 33
     85a:	0e 94 06 08 	call	0x100c	; 0x100c <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R3_PIN,OUTPUT);
     85e:	61 e0       	ldi	r22, 0x01	; 1
     860:	80 e2       	ldi	r24, 0x20	; 32
     862:	0e 94 06 08 	call	0x100c	; 0x100c <M_DIO_Void_SetPinDirection>

	M_DIO_Void_SetPinValue(KEYPAD_R0_PIN,HIGH);
     866:	61 e0       	ldi	r22, 0x01	; 1
     868:	83 e2       	ldi	r24, 0x23	; 35
     86a:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R1_PIN,HIGH);
     86e:	61 e0       	ldi	r22, 0x01	; 1
     870:	82 e2       	ldi	r24, 0x22	; 34
     872:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R2_PIN,HIGH);
     876:	61 e0       	ldi	r22, 0x01	; 1
     878:	81 e2       	ldi	r24, 0x21	; 33
     87a:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R3_PIN,HIGH);
     87e:	61 e0       	ldi	r22, 0x01	; 1
     880:	80 e2       	ldi	r24, 0x20	; 32
     882:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinDirection(KEYPAD_C0_PIN,INPUT);
     886:	60 e0       	ldi	r22, 0x00	; 0
     888:	8f e2       	ldi	r24, 0x2F	; 47
     88a:	0e 94 06 08 	call	0x100c	; 0x100c <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C1_PIN,INPUT);
     88e:	60 e0       	ldi	r22, 0x00	; 0
     890:	8e e2       	ldi	r24, 0x2E	; 46
     892:	0e 94 06 08 	call	0x100c	; 0x100c <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C2_PIN,INPUT);
     896:	60 e0       	ldi	r22, 0x00	; 0
     898:	8d e2       	ldi	r24, 0x2D	; 45
     89a:	0e 94 06 08 	call	0x100c	; 0x100c <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C3_PIN,INPUT);
     89e:	60 e0       	ldi	r22, 0x00	; 0
     8a0:	8b e2       	ldi	r24, 0x2B	; 43
     8a2:	0e 94 06 08 	call	0x100c	; 0x100c <M_DIO_Void_SetPinDirection>
     8a6:	08 95       	ret

000008a8 <H_KeyPad_U8_KeyPadRead>:

/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
u8   H_KeyPad_U8_KeyPadRead(void)
{
     8a8:	9f 92       	push	r9
     8aa:	af 92       	push	r10
     8ac:	bf 92       	push	r11
     8ae:	cf 92       	push	r12
     8b0:	df 92       	push	r13
     8b2:	ef 92       	push	r14
     8b4:	ff 92       	push	r15
     8b6:	0f 93       	push	r16
     8b8:	1f 93       	push	r17
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	cd b7       	in	r28, 0x3d	; 61
     8c0:	de b7       	in	r29, 0x3e	; 62
     8c2:	68 97       	sbiw	r28, 0x18	; 24
     8c4:	0f b6       	in	r0, 0x3f	; 63
     8c6:	f8 94       	cli
     8c8:	de bf       	out	0x3e, r29	; 62
     8ca:	0f be       	out	0x3f, r0	; 63
     8cc:	cd bf       	out	0x3d, r28	; 61
	u8 Local_U8_KeypadRowPins[4] = { KEYPAD_R0_PIN , KEYPAD_R1_PIN , KEYPAD_R2_PIN , KEYPAD_R3_PIN };
     8ce:	83 e2       	ldi	r24, 0x23	; 35
     8d0:	89 83       	std	Y+1, r24	; 0x01
     8d2:	82 e2       	ldi	r24, 0x22	; 34
     8d4:	8a 83       	std	Y+2, r24	; 0x02
     8d6:	81 e2       	ldi	r24, 0x21	; 33
     8d8:	8b 83       	std	Y+3, r24	; 0x03
     8da:	80 e2       	ldi	r24, 0x20	; 32
     8dc:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_U8_KeypadColPins[4] = { KEYPAD_C0_PIN , KEYPAD_C1_PIN , KEYPAD_C2_PIN , KEYPAD_C3_PIN };
     8de:	8f e2       	ldi	r24, 0x2F	; 47
     8e0:	8d 83       	std	Y+5, r24	; 0x05
     8e2:	8e e2       	ldi	r24, 0x2E	; 46
     8e4:	8e 83       	std	Y+6, r24	; 0x06
     8e6:	8d e2       	ldi	r24, 0x2D	; 45
     8e8:	8f 83       	std	Y+7, r24	; 0x07
     8ea:	8b e2       	ldi	r24, 0x2B	; 43
     8ec:	88 87       	std	Y+8, r24	; 0x08
#if   KEYPAD_MODEL   ==   KEYPAD_MODEL_A
	u8 Local_U8_KeypadValue [4][4] = {{ '1' , '2' , '3' , 'A' },
     8ee:	80 e1       	ldi	r24, 0x10	; 16
     8f0:	ec e7       	ldi	r30, 0x7C	; 124
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	de 01       	movw	r26, r28
     8f6:	19 96       	adiw	r26, 0x09	; 9
     8f8:	01 90       	ld	r0, Z+
     8fa:	0d 92       	st	X+, r0
     8fc:	8a 95       	dec	r24
     8fe:	e1 f7       	brne	.-8      	; 0x8f8 <H_KeyPad_U8_KeyPadRead+0x50>
							          { 'C' , '0' , '=' , '/' }};
#endif
	u8 Local_U8_Reading    = KEYPAD_RELEASED;
	u8 Local_U8_RowCounter = 0;
	u8 Local_U8_ColCounter = 0;
	for(Local_U8_RowCounter = 0 ; Local_U8_RowCounter <= 3 ; Local_U8_RowCounter++)
     900:	d1 2c       	mov	r13, r1
	u8 Local_U8_KeypadValue [4][4] = {{ '7' , '8' , '9' , '+' },
			                          { '4' , '5' , '6' , '-' },
							          { '1' , '2' , '3' , '*' },
							          { 'C' , '0' , '=' , '/' }};
#endif
	u8 Local_U8_Reading    = KEYPAD_RELEASED;
     902:	99 24       	eor	r9, r9
     904:	93 94       	inc	r9
	u8 Local_U8_RowCounter = 0;
	u8 Local_U8_ColCounter = 0;
	for(Local_U8_RowCounter = 0 ; Local_U8_RowCounter <= 3 ; Local_U8_RowCounter++)
     906:	47 c0       	rjmp	.+142    	; 0x996 <H_KeyPad_U8_KeyPadRead+0xee>
	{
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],LOW);
     908:	ad 2c       	mov	r10, r13
     90a:	b1 2c       	mov	r11, r1
     90c:	e1 e0       	ldi	r30, 0x01	; 1
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	ec 0f       	add	r30, r28
     912:	fd 1f       	adc	r31, r29
     914:	ea 0d       	add	r30, r10
     916:	fb 1d       	adc	r31, r11
     918:	c0 80       	ld	r12, Z
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	8c 2d       	mov	r24, r12
     91e:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
		for(Local_U8_ColCounter = 0 ; Local_U8_ColCounter <= 3 ; Local_U8_ColCounter++)
     922:	10 e0       	ldi	r17, 0x00	; 0
     924:	31 c0       	rjmp	.+98     	; 0x988 <H_KeyPad_U8_KeyPadRead+0xe0>
		{
			if(M_DIO_Void_GetPinValue(Local_U8_KeypadColPins[Local_U8_ColCounter]) == KEYPAD_PRESSED)
     926:	e1 2e       	mov	r14, r17
     928:	f1 2c       	mov	r15, r1
     92a:	e5 e0       	ldi	r30, 0x05	; 5
     92c:	f0 e0       	ldi	r31, 0x00	; 0
     92e:	ec 0f       	add	r30, r28
     930:	fd 1f       	adc	r31, r29
     932:	ee 0d       	add	r30, r14
     934:	ff 1d       	adc	r31, r15
     936:	00 81       	ld	r16, Z
     938:	80 2f       	mov	r24, r16
     93a:	0e 94 18 09 	call	0x1230	; 0x1230 <M_DIO_Void_GetPinValue>
     93e:	81 11       	cpse	r24, r1
     940:	22 c0       	rjmp	.+68     	; 0x986 <H_KeyPad_U8_KeyPadRead+0xde>
     942:	2f ef       	ldi	r18, 0xFF	; 255
     944:	83 ef       	ldi	r24, 0xF3	; 243
     946:	91 e0       	ldi	r25, 0x01	; 1
     948:	21 50       	subi	r18, 0x01	; 1
     94a:	80 40       	sbci	r24, 0x00	; 0
     94c:	90 40       	sbci	r25, 0x00	; 0
     94e:	e1 f7       	brne	.-8      	; 0x948 <H_KeyPad_U8_KeyPadRead+0xa0>
     950:	00 c0       	rjmp	.+0      	; 0x952 <H_KeyPad_U8_KeyPadRead+0xaa>
     952:	00 00       	nop
			{
				_delay_ms(KEYPAD_DEBOUNCING_TIME);
				if(M_DIO_Void_GetPinValue(Local_U8_KeypadColPins[Local_U8_ColCounter]) == KEYPAD_PRESSED)
     954:	80 2f       	mov	r24, r16
     956:	0e 94 18 09 	call	0x1230	; 0x1230 <M_DIO_Void_GetPinValue>
     95a:	81 11       	cpse	r24, r1
     95c:	14 c0       	rjmp	.+40     	; 0x986 <H_KeyPad_U8_KeyPadRead+0xde>
				{
					while(M_DIO_Void_GetPinValue(Local_U8_KeypadColPins[Local_U8_ColCounter]) == KEYPAD_PRESSED);
     95e:	80 2f       	mov	r24, r16
     960:	0e 94 18 09 	call	0x1230	; 0x1230 <M_DIO_Void_GetPinValue>
     964:	88 23       	and	r24, r24
     966:	d9 f3       	breq	.-10     	; 0x95e <H_KeyPad_U8_KeyPadRead+0xb6>
					Local_U8_Reading = Local_U8_KeypadValue[Local_U8_RowCounter][Local_U8_ColCounter];
     968:	f5 01       	movw	r30, r10
     96a:	ee 0f       	add	r30, r30
     96c:	ff 1f       	adc	r31, r31
     96e:	ee 0f       	add	r30, r30
     970:	ff 1f       	adc	r31, r31
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	8c 0f       	add	r24, r28
     978:	9d 1f       	adc	r25, r29
     97a:	e8 0f       	add	r30, r24
     97c:	f9 1f       	adc	r31, r25
     97e:	ee 0d       	add	r30, r14
     980:	ff 1d       	adc	r31, r15
     982:	90 84       	ldd	r9, Z+8	; 0x08
					break;
     984:	03 c0       	rjmp	.+6      	; 0x98c <H_KeyPad_U8_KeyPadRead+0xe4>
	u8 Local_U8_RowCounter = 0;
	u8 Local_U8_ColCounter = 0;
	for(Local_U8_RowCounter = 0 ; Local_U8_RowCounter <= 3 ; Local_U8_RowCounter++)
	{
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],LOW);
		for(Local_U8_ColCounter = 0 ; Local_U8_ColCounter <= 3 ; Local_U8_ColCounter++)
     986:	1f 5f       	subi	r17, 0xFF	; 255
     988:	14 30       	cpi	r17, 0x04	; 4
     98a:	68 f2       	brcs	.-102    	; 0x926 <H_KeyPad_U8_KeyPadRead+0x7e>
					break;
				}

			}
		}
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],HIGH);
     98c:	61 e0       	ldi	r22, 0x01	; 1
     98e:	8c 2d       	mov	r24, r12
     990:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
							          { 'C' , '0' , '=' , '/' }};
#endif
	u8 Local_U8_Reading    = KEYPAD_RELEASED;
	u8 Local_U8_RowCounter = 0;
	u8 Local_U8_ColCounter = 0;
	for(Local_U8_RowCounter = 0 ; Local_U8_RowCounter <= 3 ; Local_U8_RowCounter++)
     994:	d3 94       	inc	r13
     996:	93 e0       	ldi	r25, 0x03	; 3
     998:	9d 15       	cp	r25, r13
     99a:	08 f0       	brcs	.+2      	; 0x99e <H_KeyPad_U8_KeyPadRead+0xf6>
     99c:	b5 cf       	rjmp	.-150    	; 0x908 <H_KeyPad_U8_KeyPadRead+0x60>
			}
		}
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],HIGH);
	}
return Local_U8_Reading;
}
     99e:	89 2d       	mov	r24, r9
     9a0:	68 96       	adiw	r28, 0x18	; 24
     9a2:	0f b6       	in	r0, 0x3f	; 63
     9a4:	f8 94       	cli
     9a6:	de bf       	out	0x3e, r29	; 62
     9a8:	0f be       	out	0x3f, r0	; 63
     9aa:	cd bf       	out	0x3d, r28	; 61
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	1f 91       	pop	r17
     9b2:	0f 91       	pop	r16
     9b4:	ff 90       	pop	r15
     9b6:	ef 90       	pop	r14
     9b8:	df 90       	pop	r13
     9ba:	cf 90       	pop	r12
     9bc:	bf 90       	pop	r11
     9be:	af 90       	pop	r10
     9c0:	9f 90       	pop	r9
     9c2:	08 95       	ret

000009c4 <H_Lcd_Void_LCDWriteCharacter>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCharacter(u8 Copy_U8_Character)
{
     9c4:	cf 93       	push	r28
     9c6:	c8 2f       	mov	r28, r24
	M_DIO_Void_SetPinValue(LCD_RS_PIN,HIGH);
     9c8:	61 e0       	ldi	r22, 0x01	; 1
     9ca:	8d e0       	ldi	r24, 0x0D	; 13
     9cc:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,4));
     9d0:	c4 fb       	bst	r28, 4
     9d2:	66 27       	eor	r22, r22
     9d4:	60 f9       	bld	r22, 0
     9d6:	84 e1       	ldi	r24, 0x14	; 20
     9d8:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,5));
     9dc:	c5 fb       	bst	r28, 5
     9de:	66 27       	eor	r22, r22
     9e0:	60 f9       	bld	r22, 0
     9e2:	85 e1       	ldi	r24, 0x15	; 21
     9e4:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,6));
     9e8:	c6 fb       	bst	r28, 6
     9ea:	66 27       	eor	r22, r22
     9ec:	60 f9       	bld	r22, 0
     9ee:	86 e1       	ldi	r24, 0x16	; 22
     9f0:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,7));
     9f4:	6c 2f       	mov	r22, r28
     9f6:	66 1f       	adc	r22, r22
     9f8:	66 27       	eor	r22, r22
     9fa:	66 1f       	adc	r22, r22
     9fc:	88 e1       	ldi	r24, 0x18	; 24
     9fe:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
     a02:	61 e0       	ldi	r22, 0x01	; 1
     a04:	8c e0       	ldi	r24, 0x0C	; 12
     a06:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
     a0a:	8f e9       	ldi	r24, 0x9F	; 159
     a0c:	9f e0       	ldi	r25, 0x0F	; 15
     a0e:	01 97       	sbiw	r24, 0x01	; 1
     a10:	f1 f7       	brne	.-4      	; 0xa0e <H_Lcd_Void_LCDWriteCharacter+0x4a>
     a12:	00 c0       	rjmp	.+0      	; 0xa14 <H_Lcd_Void_LCDWriteCharacter+0x50>
     a14:	00 00       	nop
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
     a16:	60 e0       	ldi	r22, 0x00	; 0
     a18:	8c e0       	ldi	r24, 0x0C	; 12
     a1a:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
     a1e:	8f e9       	ldi	r24, 0x9F	; 159
     a20:	9f e0       	ldi	r25, 0x0F	; 15
     a22:	01 97       	sbiw	r24, 0x01	; 1
     a24:	f1 f7       	brne	.-4      	; 0xa22 <H_Lcd_Void_LCDWriteCharacter+0x5e>
     a26:	00 c0       	rjmp	.+0      	; 0xa28 <H_Lcd_Void_LCDWriteCharacter+0x64>
     a28:	00 00       	nop
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,0));
     a2a:	6c 2f       	mov	r22, r28
     a2c:	61 70       	andi	r22, 0x01	; 1
     a2e:	84 e1       	ldi	r24, 0x14	; 20
     a30:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,1));
     a34:	c1 fb       	bst	r28, 1
     a36:	66 27       	eor	r22, r22
     a38:	60 f9       	bld	r22, 0
     a3a:	85 e1       	ldi	r24, 0x15	; 21
     a3c:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,2));
     a40:	c2 fb       	bst	r28, 2
     a42:	66 27       	eor	r22, r22
     a44:	60 f9       	bld	r22, 0
     a46:	86 e1       	ldi	r24, 0x16	; 22
     a48:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,3));
     a4c:	c3 fb       	bst	r28, 3
     a4e:	66 27       	eor	r22, r22
     a50:	60 f9       	bld	r22, 0
     a52:	88 e1       	ldi	r24, 0x18	; 24
     a54:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
     a58:	61 e0       	ldi	r22, 0x01	; 1
     a5a:	8c e0       	ldi	r24, 0x0C	; 12
     a5c:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
     a60:	8f e9       	ldi	r24, 0x9F	; 159
     a62:	9f e0       	ldi	r25, 0x0F	; 15
     a64:	01 97       	sbiw	r24, 0x01	; 1
     a66:	f1 f7       	brne	.-4      	; 0xa64 <H_Lcd_Void_LCDWriteCharacter+0xa0>
     a68:	00 c0       	rjmp	.+0      	; 0xa6a <H_Lcd_Void_LCDWriteCharacter+0xa6>
     a6a:	00 00       	nop
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
     a6c:	60 e0       	ldi	r22, 0x00	; 0
     a6e:	8c e0       	ldi	r24, 0x0C	; 12
     a70:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
     a74:	8f e1       	ldi	r24, 0x1F	; 31
     a76:	9e e4       	ldi	r25, 0x4E	; 78
     a78:	01 97       	sbiw	r24, 0x01	; 1
     a7a:	f1 f7       	brne	.-4      	; 0xa78 <H_Lcd_Void_LCDWriteCharacter+0xb4>
     a7c:	00 c0       	rjmp	.+0      	; 0xa7e <H_Lcd_Void_LCDWriteCharacter+0xba>
     a7e:	00 00       	nop
	_delay_ms(5);
#endif
}
     a80:	cf 91       	pop	r28
     a82:	08 95       	ret

00000a84 <H_Lcd_Void_LCDWriteCommand>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCommand(u8 Copy_U8_Command)
{
     a84:	cf 93       	push	r28
     a86:	c8 2f       	mov	r28, r24
	M_DIO_Void_SetPinValue(LCD_RS_PIN,LOW);
     a88:	60 e0       	ldi	r22, 0x00	; 0
     a8a:	8d e0       	ldi	r24, 0x0D	; 13
     a8c:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,4));
     a90:	c4 fb       	bst	r28, 4
     a92:	66 27       	eor	r22, r22
     a94:	60 f9       	bld	r22, 0
     a96:	84 e1       	ldi	r24, 0x14	; 20
     a98:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,5));
     a9c:	c5 fb       	bst	r28, 5
     a9e:	66 27       	eor	r22, r22
     aa0:	60 f9       	bld	r22, 0
     aa2:	85 e1       	ldi	r24, 0x15	; 21
     aa4:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,6));
     aa8:	c6 fb       	bst	r28, 6
     aaa:	66 27       	eor	r22, r22
     aac:	60 f9       	bld	r22, 0
     aae:	86 e1       	ldi	r24, 0x16	; 22
     ab0:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,7));
     ab4:	6c 2f       	mov	r22, r28
     ab6:	66 1f       	adc	r22, r22
     ab8:	66 27       	eor	r22, r22
     aba:	66 1f       	adc	r22, r22
     abc:	88 e1       	ldi	r24, 0x18	; 24
     abe:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
     ac2:	61 e0       	ldi	r22, 0x01	; 1
     ac4:	8c e0       	ldi	r24, 0x0C	; 12
     ac6:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
     aca:	8f e9       	ldi	r24, 0x9F	; 159
     acc:	9f e0       	ldi	r25, 0x0F	; 15
     ace:	01 97       	sbiw	r24, 0x01	; 1
     ad0:	f1 f7       	brne	.-4      	; 0xace <H_Lcd_Void_LCDWriteCommand+0x4a>
     ad2:	00 c0       	rjmp	.+0      	; 0xad4 <H_Lcd_Void_LCDWriteCommand+0x50>
     ad4:	00 00       	nop
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
     ad6:	60 e0       	ldi	r22, 0x00	; 0
     ad8:	8c e0       	ldi	r24, 0x0C	; 12
     ada:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
     ade:	8f e9       	ldi	r24, 0x9F	; 159
     ae0:	9f e0       	ldi	r25, 0x0F	; 15
     ae2:	01 97       	sbiw	r24, 0x01	; 1
     ae4:	f1 f7       	brne	.-4      	; 0xae2 <H_Lcd_Void_LCDWriteCommand+0x5e>
     ae6:	00 c0       	rjmp	.+0      	; 0xae8 <H_Lcd_Void_LCDWriteCommand+0x64>
     ae8:	00 00       	nop
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,0));
     aea:	6c 2f       	mov	r22, r28
     aec:	61 70       	andi	r22, 0x01	; 1
     aee:	84 e1       	ldi	r24, 0x14	; 20
     af0:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,1));
     af4:	c1 fb       	bst	r28, 1
     af6:	66 27       	eor	r22, r22
     af8:	60 f9       	bld	r22, 0
     afa:	85 e1       	ldi	r24, 0x15	; 21
     afc:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,2));
     b00:	c2 fb       	bst	r28, 2
     b02:	66 27       	eor	r22, r22
     b04:	60 f9       	bld	r22, 0
     b06:	86 e1       	ldi	r24, 0x16	; 22
     b08:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,3));
     b0c:	c3 fb       	bst	r28, 3
     b0e:	66 27       	eor	r22, r22
     b10:	60 f9       	bld	r22, 0
     b12:	88 e1       	ldi	r24, 0x18	; 24
     b14:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
     b18:	61 e0       	ldi	r22, 0x01	; 1
     b1a:	8c e0       	ldi	r24, 0x0C	; 12
     b1c:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
     b20:	8f e9       	ldi	r24, 0x9F	; 159
     b22:	9f e0       	ldi	r25, 0x0F	; 15
     b24:	01 97       	sbiw	r24, 0x01	; 1
     b26:	f1 f7       	brne	.-4      	; 0xb24 <H_Lcd_Void_LCDWriteCommand+0xa0>
     b28:	00 c0       	rjmp	.+0      	; 0xb2a <H_Lcd_Void_LCDWriteCommand+0xa6>
     b2a:	00 00       	nop
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	8c e0       	ldi	r24, 0x0C	; 12
     b30:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
     b34:	8f e1       	ldi	r24, 0x1F	; 31
     b36:	9e e4       	ldi	r25, 0x4E	; 78
     b38:	01 97       	sbiw	r24, 0x01	; 1
     b3a:	f1 f7       	brne	.-4      	; 0xb38 <H_Lcd_Void_LCDWriteCommand+0xb4>
     b3c:	00 c0       	rjmp	.+0      	; 0xb3e <H_Lcd_Void_LCDWriteCommand+0xba>
     b3e:	00 00       	nop
	_delay_ms(5);
#endif
}
     b40:	cf 91       	pop	r28
     b42:	08 95       	ret

00000b44 <H_Lcd_Void_LCDInit>:

	H_Lcd_Void_LCDWriteCommand(LCD_8_BIT_MODE_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinDirection(LCD_D4_PIN,OUTPUT);
     b44:	61 e0       	ldi	r22, 0x01	; 1
     b46:	84 e1       	ldi	r24, 0x14	; 20
     b48:	0e 94 06 08 	call	0x100c	; 0x100c <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D5_PIN,OUTPUT);
     b4c:	61 e0       	ldi	r22, 0x01	; 1
     b4e:	85 e1       	ldi	r24, 0x15	; 21
     b50:	0e 94 06 08 	call	0x100c	; 0x100c <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D6_PIN,OUTPUT);
     b54:	61 e0       	ldi	r22, 0x01	; 1
     b56:	86 e1       	ldi	r24, 0x16	; 22
     b58:	0e 94 06 08 	call	0x100c	; 0x100c <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D7_PIN,OUTPUT);
     b5c:	61 e0       	ldi	r22, 0x01	; 1
     b5e:	88 e1       	ldi	r24, 0x18	; 24
     b60:	0e 94 06 08 	call	0x100c	; 0x100c <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RS_PIN,OUTPUT);
     b64:	61 e0       	ldi	r22, 0x01	; 1
     b66:	8d e0       	ldi	r24, 0x0D	; 13
     b68:	0e 94 06 08 	call	0x100c	; 0x100c <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_EN_PIN,OUTPUT);
     b6c:	61 e0       	ldi	r22, 0x01	; 1
     b6e:	8c e0       	ldi	r24, 0x0C	; 12
     b70:	0e 94 06 08 	call	0x100c	; 0x100c <M_DIO_Void_SetPinDirection>

	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_1);
     b74:	83 e3       	ldi	r24, 0x33	; 51
     b76:	0e 94 42 05 	call	0xa84	; 0xa84 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_2);
     b7a:	82 e3       	ldi	r24, 0x32	; 50
     b7c:	0e 94 42 05 	call	0xa84	; 0xa84 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_3);
     b80:	88 e2       	ldi	r24, 0x28	; 40
     b82:	0e 94 42 05 	call	0xa84	; 0xa84 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
     b86:	8c e0       	ldi	r24, 0x0C	; 12
     b88:	0e 94 42 05 	call	0xa84	; 0xa84 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
     b8c:	82 e0       	ldi	r24, 0x02	; 2
     b8e:	0e 94 42 05 	call	0xa84	; 0xa84 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	0e 94 42 05 	call	0xa84	; 0xa84 <H_Lcd_Void_LCDWriteCommand>
     b98:	08 95       	ret

00000b9a <H_Lcd_Void_LCDWriteString>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
     b9a:	0f 93       	push	r16
     b9c:	1f 93       	push	r17
     b9e:	cf 93       	push	r28
     ba0:	8c 01       	movw	r16, r24
	u8 Local_U8_Counter = 0;
     ba2:	c0 e0       	ldi	r28, 0x00	; 0
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
     ba4:	03 c0       	rjmp	.+6      	; 0xbac <H_Lcd_Void_LCDWriteString+0x12>
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
     ba6:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Counter++;
     baa:	cf 5f       	subi	r28, 0xFF	; 255
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
	u8 Local_U8_Counter = 0;
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
     bac:	f8 01       	movw	r30, r16
     bae:	ec 0f       	add	r30, r28
     bb0:	f1 1d       	adc	r31, r1
     bb2:	80 81       	ld	r24, Z
     bb4:	81 11       	cpse	r24, r1
     bb6:	f7 cf       	rjmp	.-18     	; 0xba6 <H_Lcd_Void_LCDWriteString+0xc>
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
     bb8:	cf 91       	pop	r28
     bba:	1f 91       	pop	r17
     bbc:	0f 91       	pop	r16
     bbe:	08 95       	ret

00000bc0 <H_Lcd_Void_LCDClear>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDClear()
{
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	0e 94 42 05 	call	0xa84	; 0xa84 <H_Lcd_Void_LCDWriteCommand>
     bc6:	08 95       	ret

00000bc8 <H_Lcd_Void_LCDWriteNumber>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteNumber(s32 Copy_S32_Number)
{
     bc8:	cf 92       	push	r12
     bca:	df 92       	push	r13
     bcc:	ef 92       	push	r14
     bce:	ff 92       	push	r15
     bd0:	1f 93       	push	r17
     bd2:	cf 93       	push	r28
     bd4:	df 93       	push	r29
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	2a 97       	sbiw	r28, 0x0a	; 10
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	f8 94       	cli
     be0:	de bf       	out	0x3e, r29	; 62
     be2:	0f be       	out	0x3f, r0	; 63
     be4:	cd bf       	out	0x3d, r28	; 61
     be6:	6b 01       	movw	r12, r22
     be8:	7c 01       	movw	r14, r24
	s8 Local_S8_Counter = 0;
	u8 Local_U8_Arr[10] = {0};
     bea:	fe 01       	movw	r30, r28
     bec:	31 96       	adiw	r30, 0x01	; 1
     bee:	8a e0       	ldi	r24, 0x0A	; 10
     bf0:	df 01       	movw	r26, r30
     bf2:	1d 92       	st	X+, r1
     bf4:	8a 95       	dec	r24
     bf6:	e9 f7       	brne	.-6      	; 0xbf2 <H_Lcd_Void_LCDWriteNumber+0x2a>
	if(Copy_S32_Number < 0)
     bf8:	ff 20       	and	r15, r15
     bfa:	5c f4       	brge	.+22     	; 0xc12 <H_Lcd_Void_LCDWriteNumber+0x4a>
	{
		Copy_S32_Number = Copy_S32_Number * -1;
     bfc:	f0 94       	com	r15
     bfe:	e0 94       	com	r14
     c00:	d0 94       	com	r13
     c02:	c0 94       	com	r12
     c04:	c1 1c       	adc	r12, r1
     c06:	d1 1c       	adc	r13, r1
     c08:	e1 1c       	adc	r14, r1
     c0a:	f1 1c       	adc	r15, r1
		H_Lcd_Void_LCDWriteCharacter('-');
     c0c:	8d e2       	ldi	r24, 0x2D	; 45
     c0e:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <H_Lcd_Void_LCDWriteCharacter>

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteNumber(s32 Copy_S32_Number)
{
     c12:	10 e0       	ldi	r17, 0x00	; 0
		H_Lcd_Void_LCDWriteCharacter('-');
	}

	do
	{
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
     c14:	c7 01       	movw	r24, r14
     c16:	b6 01       	movw	r22, r12
     c18:	2a e0       	ldi	r18, 0x0A	; 10
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	40 e0       	ldi	r20, 0x00	; 0
     c1e:	50 e0       	ldi	r21, 0x00	; 0
     c20:	0e 94 23 0a 	call	0x1446	; 0x1446 <__divmodsi4>
     c24:	e1 e0       	ldi	r30, 0x01	; 1
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	ec 0f       	add	r30, r28
     c2a:	fd 1f       	adc	r31, r29
     c2c:	e1 0f       	add	r30, r17
     c2e:	f1 1d       	adc	r31, r1
     c30:	17 fd       	sbrc	r17, 7
     c32:	fa 95       	dec	r31
     c34:	60 83       	st	Z, r22
		Copy_S32_Number                = Copy_S32_Number / 10;
     c36:	c2 2e       	mov	r12, r18
     c38:	d3 2e       	mov	r13, r19
     c3a:	e4 2e       	mov	r14, r20
     c3c:	f5 2e       	mov	r15, r21
		Local_S8_Counter++;
     c3e:	1f 5f       	subi	r17, 0xFF	; 255
	}while(Copy_S32_Number != 0);
     c40:	c1 14       	cp	r12, r1
     c42:	d1 04       	cpc	r13, r1
     c44:	e1 04       	cpc	r14, r1
     c46:	f1 04       	cpc	r15, r1
     c48:	29 f7       	brne	.-54     	; 0xc14 <H_Lcd_Void_LCDWriteNumber+0x4c>
     c4a:	0d c0       	rjmp	.+26     	; 0xc66 <H_Lcd_Void_LCDWriteNumber+0x9e>

	while(Local_S8_Counter > 0)
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
     c4c:	11 50       	subi	r17, 0x01	; 1
     c4e:	e1 e0       	ldi	r30, 0x01	; 1
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	ec 0f       	add	r30, r28
     c54:	fd 1f       	adc	r31, r29
     c56:	e1 0f       	add	r30, r17
     c58:	f1 1d       	adc	r31, r1
     c5a:	17 fd       	sbrc	r17, 7
     c5c:	fa 95       	dec	r31
     c5e:	80 81       	ld	r24, Z
     c60:	80 5d       	subi	r24, 0xD0	; 208
     c62:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
		Copy_S32_Number                = Copy_S32_Number / 10;
		Local_S8_Counter++;
	}while(Copy_S32_Number != 0);

	while(Local_S8_Counter > 0)
     c66:	11 16       	cp	r1, r17
     c68:	8c f3       	brlt	.-30     	; 0xc4c <H_Lcd_Void_LCDWriteNumber+0x84>
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
	}
}
     c6a:	2a 96       	adiw	r28, 0x0a	; 10
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	f8 94       	cli
     c70:	de bf       	out	0x3e, r29	; 62
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	cd bf       	out	0x3d, r28	; 61
     c76:	df 91       	pop	r29
     c78:	cf 91       	pop	r28
     c7a:	1f 91       	pop	r17
     c7c:	ff 90       	pop	r15
     c7e:	ef 90       	pop	r14
     c80:	df 90       	pop	r13
     c82:	cf 90       	pop	r12
     c84:	08 95       	ret

00000c86 <H_Lcd_Void_LCDGoTo>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDGoTo(u8 Copy_U8_Row,u8 Copy_U8_Col)
{
     c86:	cf 93       	push	r28
     c88:	df 93       	push	r29
     c8a:	00 d0       	rcall	.+0      	; 0xc8c <H_Lcd_Void_LCDGoTo+0x6>
     c8c:	00 d0       	rcall	.+0      	; 0xc8e <H_Lcd_Void_LCDGoTo+0x8>
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
	u8 Local_U8_Arr [4] = {LCD_R0_COMMAND , LCD_R1_COMMAND , LCD_R2_COMMAND , LCD_R3_COMMAND};
     c92:	90 e8       	ldi	r25, 0x80	; 128
     c94:	99 83       	std	Y+1, r25	; 0x01
     c96:	90 ec       	ldi	r25, 0xC0	; 192
     c98:	9a 83       	std	Y+2, r25	; 0x02
     c9a:	94 e9       	ldi	r25, 0x94	; 148
     c9c:	9b 83       	std	Y+3, r25	; 0x03
     c9e:	94 ed       	ldi	r25, 0xD4	; 212
     ca0:	9c 83       	std	Y+4, r25	; 0x04
	H_Lcd_Void_LCDWriteCommand(Local_U8_Arr[Copy_U8_Row] + Copy_U8_Col);
     ca2:	e1 e0       	ldi	r30, 0x01	; 1
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	ec 0f       	add	r30, r28
     ca8:	fd 1f       	adc	r31, r29
     caa:	e8 0f       	add	r30, r24
     cac:	f1 1d       	adc	r31, r1
     cae:	80 81       	ld	r24, Z
     cb0:	86 0f       	add	r24, r22
     cb2:	0e 94 42 05 	call	0xa84	; 0xa84 <H_Lcd_Void_LCDWriteCommand>
}
     cb6:	0f 90       	pop	r0
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	0f 90       	pop	r0
     cbe:	df 91       	pop	r29
     cc0:	cf 91       	pop	r28
     cc2:	08 95       	ret

00000cc4 <H_LED_Void_LedInit>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedInit(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
     cc4:	82 30       	cpi	r24, 0x02	; 2
     cc6:	71 f0       	breq	.+28     	; 0xce4 <H_LED_Void_LedInit+0x20>
     cc8:	18 f4       	brcc	.+6      	; 0xcd0 <H_LED_Void_LedInit+0xc>
     cca:	81 30       	cpi	r24, 0x01	; 1
     ccc:	31 f0       	breq	.+12     	; 0xcda <H_LED_Void_LedInit+0x16>
     cce:	08 95       	ret
     cd0:	83 30       	cpi	r24, 0x03	; 3
     cd2:	69 f0       	breq	.+26     	; 0xcee <H_LED_Void_LedInit+0x2a>
     cd4:	84 30       	cpi	r24, 0x04	; 4
     cd6:	81 f0       	breq	.+32     	; 0xcf8 <H_LED_Void_LedInit+0x34>
     cd8:	08 95       	ret
	{
	case LED_YEL: M_DIO_Void_SetPinDirection(LED_YEL_PIN,OUTPUT); break;
     cda:	61 e0       	ldi	r22, 0x01	; 1
     cdc:	80 e1       	ldi	r24, 0x10	; 16
     cde:	0e 94 06 08 	call	0x100c	; 0x100c <M_DIO_Void_SetPinDirection>
     ce2:	08 95       	ret
	case LED_BLU: M_DIO_Void_SetPinDirection(LED_BLU_PIN,OUTPUT); break;
     ce4:	61 e0       	ldi	r22, 0x01	; 1
     ce6:	8f e0       	ldi	r24, 0x0F	; 15
     ce8:	0e 94 06 08 	call	0x100c	; 0x100c <M_DIO_Void_SetPinDirection>
     cec:	08 95       	ret
	case LED_GRN: M_DIO_Void_SetPinDirection(LED_GRN_PIN,OUTPUT); break;
     cee:	61 e0       	ldi	r22, 0x01	; 1
     cf0:	8e e0       	ldi	r24, 0x0E	; 14
     cf2:	0e 94 06 08 	call	0x100c	; 0x100c <M_DIO_Void_SetPinDirection>
     cf6:	08 95       	ret
	case LED_RED: M_DIO_Void_SetPinDirection(LED_RED_PIN,OUTPUT); break;
     cf8:	61 e0       	ldi	r22, 0x01	; 1
     cfa:	8b e1       	ldi	r24, 0x1B	; 27
     cfc:	0e 94 06 08 	call	0x100c	; 0x100c <M_DIO_Void_SetPinDirection>
     d00:	08 95       	ret

00000d02 <H_LED_Void_LedOn>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedOn(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
     d02:	82 30       	cpi	r24, 0x02	; 2
     d04:	71 f0       	breq	.+28     	; 0xd22 <H_LED_Void_LedOn+0x20>
     d06:	18 f4       	brcc	.+6      	; 0xd0e <H_LED_Void_LedOn+0xc>
     d08:	81 30       	cpi	r24, 0x01	; 1
     d0a:	31 f0       	breq	.+12     	; 0xd18 <H_LED_Void_LedOn+0x16>
     d0c:	08 95       	ret
     d0e:	83 30       	cpi	r24, 0x03	; 3
     d10:	69 f0       	breq	.+26     	; 0xd2c <H_LED_Void_LedOn+0x2a>
     d12:	84 30       	cpi	r24, 0x04	; 4
     d14:	81 f0       	breq	.+32     	; 0xd36 <H_LED_Void_LedOn+0x34>
     d16:	08 95       	ret
	{
	case LED_YEL: M_DIO_Void_SetPinValue(LED_YEL_PIN,HIGH); break;
     d18:	61 e0       	ldi	r22, 0x01	; 1
     d1a:	80 e1       	ldi	r24, 0x10	; 16
     d1c:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
     d20:	08 95       	ret
	case LED_BLU: M_DIO_Void_SetPinValue(LED_BLU_PIN,HIGH); break;
     d22:	61 e0       	ldi	r22, 0x01	; 1
     d24:	8f e0       	ldi	r24, 0x0F	; 15
     d26:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
     d2a:	08 95       	ret
	case LED_GRN: M_DIO_Void_SetPinValue(LED_GRN_PIN,HIGH); break;
     d2c:	61 e0       	ldi	r22, 0x01	; 1
     d2e:	8e e0       	ldi	r24, 0x0E	; 14
     d30:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
     d34:	08 95       	ret
	case LED_RED: M_DIO_Void_SetPinValue(LED_RED_PIN,HIGH); break;
     d36:	61 e0       	ldi	r22, 0x01	; 1
     d38:	8b e1       	ldi	r24, 0x1B	; 27
     d3a:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
     d3e:	08 95       	ret

00000d40 <H_LED_Void_LedOff>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedOff(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
     d40:	82 30       	cpi	r24, 0x02	; 2
     d42:	71 f0       	breq	.+28     	; 0xd60 <H_LED_Void_LedOff+0x20>
     d44:	18 f4       	brcc	.+6      	; 0xd4c <H_LED_Void_LedOff+0xc>
     d46:	81 30       	cpi	r24, 0x01	; 1
     d48:	31 f0       	breq	.+12     	; 0xd56 <H_LED_Void_LedOff+0x16>
     d4a:	08 95       	ret
     d4c:	83 30       	cpi	r24, 0x03	; 3
     d4e:	69 f0       	breq	.+26     	; 0xd6a <H_LED_Void_LedOff+0x2a>
     d50:	84 30       	cpi	r24, 0x04	; 4
     d52:	81 f0       	breq	.+32     	; 0xd74 <H_LED_Void_LedOff+0x34>
     d54:	08 95       	ret
	{
	case LED_YEL: M_DIO_Void_SetPinValue(LED_YEL_PIN,LOW); break;
     d56:	60 e0       	ldi	r22, 0x00	; 0
     d58:	80 e1       	ldi	r24, 0x10	; 16
     d5a:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
     d5e:	08 95       	ret
	case LED_BLU: M_DIO_Void_SetPinValue(LED_BLU_PIN,LOW); break;
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	8f e0       	ldi	r24, 0x0F	; 15
     d64:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
     d68:	08 95       	ret
	case LED_GRN: M_DIO_Void_SetPinValue(LED_GRN_PIN,LOW); break;
     d6a:	60 e0       	ldi	r22, 0x00	; 0
     d6c:	8e e0       	ldi	r24, 0x0E	; 14
     d6e:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
     d72:	08 95       	ret
	case LED_RED: M_DIO_Void_SetPinValue(LED_RED_PIN,LOW); break;
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	8b e1       	ldi	r24, 0x1B	; 27
     d78:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
     d7c:	08 95       	ret

00000d7e <Relay_ON>:
void Relay_Init(u8 Relay_ID){
	M_DIO_Void_SetPinDirection(Relay_ID,OUTPUT);
	M_DIO_Void_SetPinValue(Relay_ID,LOW);
}
void Relay_ON(u8 Relay_ID){
	M_DIO_Void_SetPinValue(Relay_ID,HIGH);
     d7e:	61 e0       	ldi	r22, 0x01	; 1
     d80:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
     d84:	08 95       	ret

00000d86 <Relay_OFF>:
}
void Relay_OFF(u8 Relay_ID){
	M_DIO_Void_SetPinValue(Relay_ID,LOW);
     d86:	60 e0       	ldi	r22, 0x00	; 0
     d88:	0e 94 8f 08 	call	0x111e	; 0x111e <M_DIO_Void_SetPinValue>
     d8c:	08 95       	ret

00000d8e <RTC_Init>:
	/*send the units of month in the least 4 bits then the tens month in the higher 4 bits   */
	M_U8_I2C_Write(((Config_Date -> month / 10) << 4)|((Config_Date -> month) % 10));
	/*send the units of year in the least 4 bits then the tens year in the higher 4 bits   */
	M_U8_I2C_Write(((Config_Date -> year / 10) << 4)|((Config_Date -> year) % 10));
	M_Void_I2C_STOP();
}
     d8e:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <M_Void_I2C_Init>
     d92:	08 95       	ret

00000d94 <RTC_Get_Time>:

void RTC_Get_Time(Date_And_Time *Get_Time_And_Date)
{
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
     d98:	ec 01       	movw	r28, r24
	u8 temp_sec =0;
	u8 temp_min =0;
	u8 temp_hours =0;

	M_U8_I2C_Start();/*send the start bit*/
     d9a:	0e 94 79 09 	call	0x12f2	; 0x12f2 <M_U8_I2C_Start>
	/*send the slave address and write bit*/
	M_U8_I2C_SendSlaveAddressWithWrite(RTC_SLAVE_ADDRESS_WRITE);
     d9e:	80 ed       	ldi	r24, 0xD0	; 208
     da0:	0e 94 84 09 	call	0x1308	; 0x1308 <M_U8_I2C_SendSlaveAddressWithWrite>
	/*write the first address 0x00 in RTC to write the day*/
	M_U8_I2C_Write(RTC_SECONDS_REG_ADDRESS);
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	0e 94 a1 09 	call	0x1342	; 0x1342 <M_U8_I2C_Write>
	M_U8_I2C_Repeated_Start();
     daa:	0e 94 8d 09 	call	0x131a	; 0x131a <M_U8_I2C_Repeated_Start>
	/*send the slave address and read bit*/
	M_U8_I2C_SendSlaveAddressWithRead(RTC_SLAVE_ADDRESS_READ);
     dae:	81 ed       	ldi	r24, 0xD1	; 209
     db0:	0e 94 98 09 	call	0x1330	; 0x1330 <M_U8_I2C_SendSlaveAddressWithRead>
	temp_sec = M_U8_I2C_ReadWithAck();
     db4:	0e 94 aa 09 	call	0x1354	; 0x1354 <M_U8_I2C_ReadWithAck>
	/*get the seconds units + the tens seconds by >>4 then multiplied by 10*/
	Get_Time_And_Date -> sec = (temp_sec & 0x0F)+(((temp_sec & 0xF0)>>4)*10);
     db8:	98 2f       	mov	r25, r24
     dba:	92 95       	swap	r25
     dbc:	9f 70       	andi	r25, 0x0F	; 15
     dbe:	8f 70       	andi	r24, 0x0F	; 15
     dc0:	99 0f       	add	r25, r25
     dc2:	29 2f       	mov	r18, r25
     dc4:	22 0f       	add	r18, r18
     dc6:	22 0f       	add	r18, r18
     dc8:	92 0f       	add	r25, r18
     dca:	89 0f       	add	r24, r25
     dcc:	88 83       	st	Y, r24
	/*get the mins units + the tens mins by >>4 then multiplied by 10*/
	temp_min = M_U8_I2C_ReadWithAck();
     dce:	0e 94 aa 09 	call	0x1354	; 0x1354 <M_U8_I2C_ReadWithAck>
	Get_Time_And_Date -> min = (temp_min & 0x0F)+(((temp_min & 0xF0)>>4)*10);
     dd2:	98 2f       	mov	r25, r24
     dd4:	92 95       	swap	r25
     dd6:	9f 70       	andi	r25, 0x0F	; 15
     dd8:	8f 70       	andi	r24, 0x0F	; 15
     dda:	99 0f       	add	r25, r25
     ddc:	29 2f       	mov	r18, r25
     dde:	22 0f       	add	r18, r18
     de0:	22 0f       	add	r18, r18
     de2:	92 0f       	add	r25, r18
     de4:	89 0f       	add	r24, r25
     de6:	89 83       	std	Y+1, r24	; 0x01
	/*get the hours units + the tens hours by >>4 then multiplied by 10*/
	temp_hours = M_U8_I2C_ReadWithNack();
     de8:	0e 94 b1 09 	call	0x1362	; 0x1362 <M_U8_I2C_ReadWithNack>
	Get_Time_And_Date -> hours = (temp_hours & 0x0F)+(((temp_hours & 0xF0)>>4)*10);
     dec:	98 2f       	mov	r25, r24
     dee:	92 95       	swap	r25
     df0:	9f 70       	andi	r25, 0x0F	; 15
     df2:	8f 70       	andi	r24, 0x0F	; 15
     df4:	99 0f       	add	r25, r25
     df6:	29 2f       	mov	r18, r25
     df8:	22 0f       	add	r18, r18
     dfa:	22 0f       	add	r18, r18
     dfc:	92 0f       	add	r25, r18
     dfe:	89 0f       	add	r24, r25
     e00:	8a 83       	std	Y+2, r24	; 0x02
	M_Void_I2C_STOP();
     e02:	0e 94 b8 09 	call	0x1370	; 0x1370 <M_Void_I2C_STOP>
}
     e06:	df 91       	pop	r29
     e08:	cf 91       	pop	r28
     e0a:	08 95       	ret

00000e0c <main>:

/*********************************************************************************
 *                                    MAIN
 *********************************************************************************/
int main(void)
{
     e0c:	cf 93       	push	r28
     e0e:	df 93       	push	r29
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
     e14:	27 97       	sbiw	r28, 0x07	; 7
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	f8 94       	cli
     e1a:	de bf       	out	0x3e, r29	; 62
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	cd bf       	out	0x3d, r28	; 61
    Date_And_Time Current_Date_And_Time = {35, 21, 2, 6, 28, 3, 24};
     e20:	87 e0       	ldi	r24, 0x07	; 7
     e22:	ec e8       	ldi	r30, 0x8C	; 140
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	de 01       	movw	r26, r28
     e28:	11 96       	adiw	r26, 0x01	; 1
     e2a:	01 90       	ld	r0, Z+
     e2c:	0d 92       	st	X+, r0
     e2e:	8a 95       	dec	r24
     e30:	e1 f7       	brne	.-8      	; 0xe2a <main+0x1e>
    //RTC_Set_Time(&Current_Date_And_Time);
    APP_EmpID EmpID = 0xFF;

    /* Initialization of the used modules in the MCAL layer */
    M_Void_I2C_Init();
     e32:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <M_Void_I2C_Init>
    UART_Init();
     e36:	0e 94 be 09 	call	0x137c	; 0x137c <UART_Init>
    UART_receiveByteAsynchCallBack(StoreAckBytes);
     e3a:	82 e5       	ldi	r24, 0x52	; 82
     e3c:	93 e0       	ldi	r25, 0x03	; 3
     e3e:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <UART_receiveByteAsynchCallBack>
    sei();
     e42:	78 94       	sei
    /* Initialization of the used modules in the HAL layer */
    H_LED_Void_LedInit(LED_RED);
     e44:	84 e0       	ldi	r24, 0x04	; 4
     e46:	0e 94 62 06 	call	0xcc4	; 0xcc4 <H_LED_Void_LedInit>
    H_LED_Void_LedInit(LED_GRN);
     e4a:	83 e0       	ldi	r24, 0x03	; 3
     e4c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <H_LED_Void_LedInit>
    H_KeyPad_Void_KeyPadInit();
     e50:	0e 94 23 04 	call	0x846	; 0x846 <H_KeyPad_Void_KeyPadInit>
    H_Lcd_Void_LCDInit();
     e54:	0e 94 a2 05 	call	0xb44	; 0xb44 <H_Lcd_Void_LCDInit>
    RTC_Init();
     e58:	0e 94 c7 06 	call	0xd8e	; 0xd8e <RTC_Init>
    while (1)
    {
        /* Initial function
         * Press '*' for Attendance Confirmation
         * Press '#' for New Enrollment */
        if (g_SystemState == INITIAL_STATE)
     e5c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <g_SystemState>
     e60:	81 11       	cpse	r24, r1
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <main+0x5c>
        {
            APP_Init();
     e64:	0e 94 49 00 	call	0x92	; 0x92 <APP_Init>
        }
        switch (g_SystemState)
     e68:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <g_SystemState>
     e6c:	81 30       	cpi	r24, 0x01	; 1
     e6e:	09 f4       	brne	.+2      	; 0xe72 <main+0x66>
     e70:	86 c0       	rjmp	.+268    	; 0xf7e <main+0x172>
     e72:	87 30       	cpi	r24, 0x07	; 7
     e74:	99 f7       	brne	.-26     	; 0xe5c <main+0x50>
        {
        case CONFIRM_ATTENDANCE_ENTER_ID:
            EmpID = APP_GetID();
     e76:	0e 94 77 00 	call	0xee	; 0xee <APP_GetID>
     e7a:	18 2f       	mov	r17, r24
            if (EmpID == GOBACK)
     e7c:	8f 3f       	cpi	r24, 0xFF	; 255
     e7e:	19 f4       	brne	.+6      	; 0xe86 <main+0x7a>
            {
                g_SystemState = INITIAL_STATE;
     e80:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <g_SystemState>
     e84:	eb cf       	rjmp	.-42     	; 0xe5c <main+0x50>
            }
            else
            {
                g_SystemState = APP_CheckIDPresence(EmpID);
     e86:	0e 94 ae 00 	call	0x15c	; 0x15c <APP_CheckIDPresence>
     e8a:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <g_SystemState>
                if (g_SystemState == FOUND_ID)
     e8e:	89 30       	cpi	r24, 0x09	; 9
     e90:	09 f0       	breq	.+2      	; 0xe94 <main+0x88>
     e92:	60 c0       	rjmp	.+192    	; 0xf54 <main+0x148>
                {
                    /* If ID is found, ask for the fingerprint scan */
                    APP_PutFingerToScan();
     e94:	0e 94 82 01 	call	0x304	; 0x304 <APP_PutFingerToScan>
                    FingerPS_AuraLedConfig();
     e98:	0e 94 3a 02 	call	0x474	; 0x474 <FingerPS_AuraLedConfig>
     e9c:	2f ef       	ldi	r18, 0xFF	; 255
     e9e:	8b e7       	ldi	r24, 0x7B	; 123
     ea0:	92 e9       	ldi	r25, 0x92	; 146
     ea2:	21 50       	subi	r18, 0x01	; 1
     ea4:	80 40       	sbci	r24, 0x00	; 0
     ea6:	90 40       	sbci	r25, 0x00	; 0
     ea8:	e1 f7       	brne	.-8      	; 0xea2 <main+0x96>
     eaa:	00 c0       	rjmp	.+0      	; 0xeac <main+0xa0>
     eac:	00 00       	nop
                    _delay_ms(3000);
                    is_Finger_Match = FingerPS_CheckOneToOneMatch((u16)EmpID);
     eae:	e1 2e       	mov	r14, r17
     eb0:	f1 2c       	mov	r15, r1
     eb2:	c7 01       	movw	r24, r14
     eb4:	0e 94 ce 03 	call	0x79c	; 0x79c <FingerPS_CheckOneToOneMatch>
     eb8:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <is_Finger_Match>

                    if (MATCHED == is_Finger_Match)
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	49 f4       	brne	.+18     	; 0xed2 <main+0xc6>
                    {
                        /* If the fingerprint matches the employee's saved fingerprint, show success message */
                        APP_Confirm_Attendance_Success(EmpID, &Current_Date_And_Time);
     ec0:	be 01       	movw	r22, r28
     ec2:	6f 5f       	subi	r22, 0xFF	; 255
     ec4:	7f 4f       	sbci	r23, 0xFF	; 255
     ec6:	81 2f       	mov	r24, r17
     ec8:	0e 94 38 01 	call	0x270	; 0x270 <APP_Confirm_Attendance_Success>
                        g_SystemState = INITIAL_STATE;
     ecc:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <g_SystemState>
                        WrongFingerPrintCounter = 0;
                        break;
     ed0:	c5 cf       	rjmp	.-118    	; 0xe5c <main+0x50>
                    }
                    else if (NOTMATCHED == is_Finger_Match)
     ed2:	88 23       	and	r24, r24
     ed4:	a9 f1       	breq	.+106    	; 0xf40 <main+0x134>
     ed6:	3b c0       	rjmp	.+118    	; 0xf4e <main+0x142>
                    {
                        while ((is_Finger_Match == NOTMATCHED) && (WrongFingerPrintCounter < MAX_TRIALS))
                        {
                            WrongFingerPrintCounter++;
     ed8:	1f 5f       	subi	r17, 0xFF	; 255
                            H_LED_Void_LedOn(LED_RED);
     eda:	84 e0       	ldi	r24, 0x04	; 4
     edc:	0e 94 81 06 	call	0xd02	; 0xd02 <H_LED_Void_LedOn>
                            H_Lcd_Void_LCDClear();
     ee0:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <H_Lcd_Void_LCDClear>
                            H_Lcd_Void_LCDWriteString((u8*)"Warning:");
     ee4:	8d e3       	ldi	r24, 0x3D	; 61
     ee6:	91 e0       	ldi	r25, 0x01	; 1
     ee8:	0e 94 cd 05 	call	0xb9a	; 0xb9a <H_Lcd_Void_LCDWriteString>
                            H_Lcd_Void_LCDGoTo(1, 0);
     eec:	60 e0       	ldi	r22, 0x00	; 0
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	0e 94 43 06 	call	0xc86	; 0xc86 <H_Lcd_Void_LCDGoTo>
                            H_Lcd_Void_LCDWriteString((u8*)"FINGERPRINT NOTFOUND");
     ef4:	84 e7       	ldi	r24, 0x74	; 116
     ef6:	91 e0       	ldi	r25, 0x01	; 1
     ef8:	0e 94 cd 05 	call	0xb9a	; 0xb9a <H_Lcd_Void_LCDWriteString>
                            H_Lcd_Void_LCDGoTo(2, 0);
     efc:	60 e0       	ldi	r22, 0x00	; 0
     efe:	82 e0       	ldi	r24, 0x02	; 2
     f00:	0e 94 43 06 	call	0xc86	; 0xc86 <H_Lcd_Void_LCDGoTo>
                            H_Lcd_Void_LCDWriteString((u8*)"PLEASE TRY AGAIN");
     f04:	89 e8       	ldi	r24, 0x89	; 137
     f06:	91 e0       	ldi	r25, 0x01	; 1
     f08:	0e 94 cd 05 	call	0xb9a	; 0xb9a <H_Lcd_Void_LCDWriteString>
     f0c:	2f ef       	ldi	r18, 0xFF	; 255
     f0e:	83 ed       	ldi	r24, 0xD3	; 211
     f10:	90 e3       	ldi	r25, 0x30	; 48
     f12:	21 50       	subi	r18, 0x01	; 1
     f14:	80 40       	sbci	r24, 0x00	; 0
     f16:	90 40       	sbci	r25, 0x00	; 0
     f18:	e1 f7       	brne	.-8      	; 0xf12 <main+0x106>
     f1a:	00 c0       	rjmp	.+0      	; 0xf1c <main+0x110>
     f1c:	00 00       	nop
                            _delay_ms(1000);
                            FingerPS_AuraLedConfig();
     f1e:	0e 94 3a 02 	call	0x474	; 0x474 <FingerPS_AuraLedConfig>
     f22:	2f ef       	ldi	r18, 0xFF	; 255
     f24:	87 ea       	ldi	r24, 0xA7	; 167
     f26:	91 e6       	ldi	r25, 0x61	; 97
     f28:	21 50       	subi	r18, 0x01	; 1
     f2a:	80 40       	sbci	r24, 0x00	; 0
     f2c:	90 40       	sbci	r25, 0x00	; 0
     f2e:	e1 f7       	brne	.-8      	; 0xf28 <main+0x11c>
     f30:	00 c0       	rjmp	.+0      	; 0xf32 <main+0x126>
     f32:	00 00       	nop
                            _delay_ms(2000);
                            is_Finger_Match = FingerPS_CheckOneToOneMatch((u16)EmpID);
     f34:	c7 01       	movw	r24, r14
     f36:	0e 94 ce 03 	call	0x79c	; 0x79c <FingerPS_CheckOneToOneMatch>
     f3a:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <is_Finger_Match>
     f3e:	01 c0       	rjmp	.+2      	; 0xf42 <main+0x136>
     f40:	10 e0       	ldi	r17, 0x00	; 0
                        WrongFingerPrintCounter = 0;
                        break;
                    }
                    else if (NOTMATCHED == is_Finger_Match)
                    {
                        while ((is_Finger_Match == NOTMATCHED) && (WrongFingerPrintCounter < MAX_TRIALS))
     f42:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <is_Finger_Match>
     f46:	81 11       	cpse	r24, r1
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <main+0x142>
     f4a:	13 30       	cpi	r17, 0x03	; 3
     f4c:	28 f2       	brcs	.-118    	; 0xed8 <main+0xcc>
                            _delay_ms(2000);
                            is_Finger_Match = FingerPS_CheckOneToOneMatch((u16)EmpID);
                        }
                    }
                    WrongFingerPrintCounter = 0;
                    g_SystemState = INITIAL_STATE;
     f4e:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <g_SystemState>
     f52:	84 cf       	rjmp	.-248    	; 0xe5c <main+0x50>
                }
                else if (g_SystemState == NOTFOUND_ID)
     f54:	88 30       	cpi	r24, 0x08	; 8
     f56:	09 f0       	breq	.+2      	; 0xf5a <main+0x14e>
     f58:	81 cf       	rjmp	.-254    	; 0xe5c <main+0x50>
                {
                    if (APP_WarningHandler(ID_NOT_FOUND) == MAIN_MENU_BUTTON_PRESSED)
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	0e 94 89 01 	call	0x312	; 0x312 <APP_WarningHandler>
     f60:	83 34       	cpi	r24, 0x43	; 67
     f62:	19 f4       	brne	.+6      	; 0xf6a <main+0x15e>
                    {
                        /* Go back to the main menu to choose new enrollment */
                        g_SystemState = INITIAL_STATE;
     f64:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <g_SystemState>
     f68:	79 cf       	rjmp	.-270    	; 0xe5c <main+0x50>
                    }
                    else if (APP_WarningHandler(ID_NOT_FOUND) == GOBACK_BUTTON_PRESSED)
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	0e 94 89 01 	call	0x312	; 0x312 <APP_WarningHandler>
     f70:	81 34       	cpi	r24, 0x41	; 65
     f72:	09 f0       	breq	.+2      	; 0xf76 <main+0x16a>
     f74:	73 cf       	rjmp	.-282    	; 0xe5c <main+0x50>
                    {
                        /* Go back to the Enter ID */
                        g_SystemState = CONFIRM_ATTENDANCE_ENTER_ID;
     f76:	87 e0       	ldi	r24, 0x07	; 7
     f78:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <g_SystemState>
     f7c:	6f cf       	rjmp	.-290    	; 0xe5c <main+0x50>
                }
            }
            break; /* End of confirm attendance case */

        case NEW_ENROLLMENT_SET_NEW_ID:
            EmpID = APP_GetID();
     f7e:	0e 94 77 00 	call	0xee	; 0xee <APP_GetID>
     f82:	18 2f       	mov	r17, r24
            if (EmpID == GOBACK)
     f84:	8f 3f       	cpi	r24, 0xFF	; 255
     f86:	19 f4       	brne	.+6      	; 0xf8e <main+0x182>
            {
                g_SystemState = INITIAL_STATE;
     f88:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <g_SystemState>
     f8c:	67 cf       	rjmp	.-306    	; 0xe5c <main+0x50>
            }
            else
            {
                g_SystemState = APP_CheckIDPresence(EmpID);
     f8e:	0e 94 ae 00 	call	0x15c	; 0x15c <APP_CheckIDPresence>
     f92:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <g_SystemState>
                if (g_SystemState == NOTFOUND_ID)
     f96:	88 30       	cpi	r24, 0x08	; 8
     f98:	21 f5       	brne	.+72     	; 0xfe2 <main+0x1d6>
                {
                    /* If the ID is out of range, display a warning on the LCD */
                    if (EmpID == OUT_OF_RANGE_ID)
     f9a:	1e 3f       	cpi	r17, 0xFE	; 254
     f9c:	49 f4       	brne	.+18     	; 0xfb0 <main+0x1a4>
                    {
                        if (APP_WarningHandler(OUT_OF_RANGE_ID) == MAIN_MENU_BUTTON_PRESSED)
     f9e:	8e ef       	ldi	r24, 0xFE	; 254
     fa0:	0e 94 89 01 	call	0x312	; 0x312 <APP_WarningHandler>
     fa4:	83 34       	cpi	r24, 0x43	; 67
     fa6:	09 f0       	breq	.+2      	; 0xfaa <main+0x19e>
     fa8:	59 cf       	rjmp	.-334    	; 0xe5c <main+0x50>
                        {
                            /* Go back to the main menu to choose new enrollment */
                            g_SystemState = INITIAL_STATE;
     faa:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <g_SystemState>
     fae:	56 cf       	rjmp	.-340    	; 0xe5c <main+0x50>
                        }
                    }
                    else
                    {
                        /* Prompt for finger scan */
                        APP_PutFingerToScan();
     fb0:	0e 94 82 01 	call	0x304	; 0x304 <APP_PutFingerToScan>
     fb4:	2f ef       	ldi	r18, 0xFF	; 255
     fb6:	8f e4       	ldi	r24, 0x4F	; 79
     fb8:	93 ec       	ldi	r25, 0xC3	; 195
     fba:	21 50       	subi	r18, 0x01	; 1
     fbc:	80 40       	sbci	r24, 0x00	; 0
     fbe:	90 40       	sbci	r25, 0x00	; 0
     fc0:	e1 f7       	brne	.-8      	; 0xfba <main+0x1ae>
     fc2:	00 c0       	rjmp	.+0      	; 0xfc4 <main+0x1b8>
     fc4:	00 00       	nop
                        _delay_ms(4000);
                        FingerPS_AuraLedConfig();
     fc6:	0e 94 3a 02 	call	0x474	; 0x474 <FingerPS_AuraLedConfig>
                        /* Save the new fingerprint in memory */
                        FingerPS_SetNewFingerPrint((u16)EmpID);
     fca:	81 2f       	mov	r24, r17
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <FingerPS_SetNewFingerPrint>
                        /* Write the new employee ID to EEPROM */
                        APP_SetNewID(EmpID);
     fd2:	81 2f       	mov	r24, r17
     fd4:	0e 94 ba 00 	call	0x174	; 0x174 <APP_SetNewID>
                        /* Show success message */
                        APP_NewEnrollemtSuccessful();
     fd8:	0e 94 c2 00 	call	0x184	; 0x184 <APP_NewEnrollemtSuccessful>
                        g_SystemState = INITIAL_STATE;
     fdc:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <g_SystemState>
     fe0:	3d cf       	rjmp	.-390    	; 0xe5c <main+0x50>
                    }
                }
                else if (g_SystemState == FOUND_ID)
     fe2:	89 30       	cpi	r24, 0x09	; 9
     fe4:	09 f0       	breq	.+2      	; 0xfe8 <main+0x1dc>
     fe6:	3a cf       	rjmp	.-396    	; 0xe5c <main+0x50>
                {
                    if (APP_WarningHandler(ALREADY_TAKEN_ID) == MAIN_MENU_BUTTON_PRESSED)
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	0e 94 89 01 	call	0x312	; 0x312 <APP_WarningHandler>
     fee:	83 34       	cpi	r24, 0x43	; 67
     ff0:	19 f4       	brne	.+6      	; 0xff8 <main+0x1ec>
                    {
                        /* Go back to the main menu to choose new enrollment */
                        g_SystemState = INITIAL_STATE;
     ff2:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <g_SystemState>
     ff6:	32 cf       	rjmp	.-412    	; 0xe5c <main+0x50>
                    }
                    else if (APP_WarningHandler(ALREADY_TAKEN_ID) == GOBACK_BUTTON_PRESSED)
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	0e 94 89 01 	call	0x312	; 0x312 <APP_WarningHandler>
     ffe:	81 34       	cpi	r24, 0x41	; 65
    1000:	09 f0       	breq	.+2      	; 0x1004 <main+0x1f8>
    1002:	2c cf       	rjmp	.-424    	; 0xe5c <main+0x50>
                    {
                        /* Go back to set new ID */
                        g_SystemState = NEW_ENROLLMENT_SET_NEW_ID;
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <g_SystemState>
    100a:	28 cf       	rjmp	.-432    	; 0xe5c <main+0x50>

0000100c <M_DIO_Void_SetPinDirection>:
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinDirection(u8 Copy_U8_Number, u8 Copy_U8_State)
{

	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    100c:	9d ec       	ldi	r25, 0xCD	; 205
    100e:	89 9f       	mul	r24, r25
    1010:	91 2d       	mov	r25, r1
    1012:	11 24       	eor	r1, r1
    1014:	29 2f       	mov	r18, r25
    1016:	26 95       	lsr	r18
    1018:	26 95       	lsr	r18
    101a:	26 95       	lsr	r18
    101c:	22 0f       	add	r18, r18
    101e:	32 2f       	mov	r19, r18
    1020:	33 0f       	add	r19, r19
    1022:	33 0f       	add	r19, r19
    1024:	23 0f       	add	r18, r19
    1026:	82 1b       	sub	r24, r18
    1028:	28 2f       	mov	r18, r24
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    102a:	96 95       	lsr	r25
    102c:	96 95       	lsr	r25
    102e:	96 95       	lsr	r25
	switch(Copy_U8_State)
    1030:	66 23       	and	r22, r22
    1032:	19 f0       	breq	.+6      	; 0x103a <M_DIO_Void_SetPinDirection+0x2e>
    1034:	61 30       	cpi	r22, 0x01	; 1
    1036:	e1 f1       	breq	.+120    	; 0x10b0 <M_DIO_Void_SetPinDirection+0xa4>
    1038:	08 95       	ret
	{
	case INPUT:
		switch(Local_U8_Group)
    103a:	92 30       	cpi	r25, 0x02	; 2
    103c:	a9 f0       	breq	.+42     	; 0x1068 <M_DIO_Void_SetPinDirection+0x5c>
    103e:	18 f4       	brcc	.+6      	; 0x1046 <M_DIO_Void_SetPinDirection+0x3a>
    1040:	91 30       	cpi	r25, 0x01	; 1
    1042:	31 f0       	breq	.+12     	; 0x1050 <M_DIO_Void_SetPinDirection+0x44>
    1044:	08 95       	ret
    1046:	93 30       	cpi	r25, 0x03	; 3
    1048:	d9 f0       	breq	.+54     	; 0x1080 <M_DIO_Void_SetPinDirection+0x74>
    104a:	94 30       	cpi	r25, 0x04	; 4
    104c:	29 f1       	breq	.+74     	; 0x1098 <M_DIO_Void_SetPinDirection+0x8c>
    104e:	08 95       	ret
		{
		case 1: CLR_BIT(DDRA_REG,Local_U8_Bit); break;
    1050:	3a b3       	in	r19, 0x1a	; 26
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	02 c0       	rjmp	.+4      	; 0x105c <M_DIO_Void_SetPinDirection+0x50>
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	2a 95       	dec	r18
    105e:	e2 f7       	brpl	.-8      	; 0x1058 <M_DIO_Void_SetPinDirection+0x4c>
    1060:	80 95       	com	r24
    1062:	83 23       	and	r24, r19
    1064:	8a bb       	out	0x1a, r24	; 26
    1066:	08 95       	ret
		case 2: CLR_BIT(DDRB_REG,Local_U8_Bit); break;
    1068:	37 b3       	in	r19, 0x17	; 23
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <M_DIO_Void_SetPinDirection+0x68>
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	2a 95       	dec	r18
    1076:	e2 f7       	brpl	.-8      	; 0x1070 <M_DIO_Void_SetPinDirection+0x64>
    1078:	80 95       	com	r24
    107a:	83 23       	and	r24, r19
    107c:	87 bb       	out	0x17, r24	; 23
    107e:	08 95       	ret
		case 3: CLR_BIT(DDRC_REG,Local_U8_Bit); break;
    1080:	34 b3       	in	r19, 0x14	; 20
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 c0       	rjmp	.+4      	; 0x108c <M_DIO_Void_SetPinDirection+0x80>
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	2a 95       	dec	r18
    108e:	e2 f7       	brpl	.-8      	; 0x1088 <M_DIO_Void_SetPinDirection+0x7c>
    1090:	80 95       	com	r24
    1092:	83 23       	and	r24, r19
    1094:	84 bb       	out	0x14, r24	; 20
    1096:	08 95       	ret
		case 4: CLR_BIT(DDRD_REG,Local_U8_Bit); break;
    1098:	31 b3       	in	r19, 0x11	; 17
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <M_DIO_Void_SetPinDirection+0x98>
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	2a 95       	dec	r18
    10a6:	e2 f7       	brpl	.-8      	; 0x10a0 <M_DIO_Void_SetPinDirection+0x94>
    10a8:	80 95       	com	r24
    10aa:	83 23       	and	r24, r19
    10ac:	81 bb       	out	0x11, r24	; 17
    10ae:	08 95       	ret
		default:                                break;
		}
		break;
		case OUTPUT:
			switch(Local_U8_Group)
    10b0:	92 30       	cpi	r25, 0x02	; 2
    10b2:	a1 f0       	breq	.+40     	; 0x10dc <M_DIO_Void_SetPinDirection+0xd0>
    10b4:	18 f4       	brcc	.+6      	; 0x10bc <M_DIO_Void_SetPinDirection+0xb0>
    10b6:	91 30       	cpi	r25, 0x01	; 1
    10b8:	31 f0       	breq	.+12     	; 0x10c6 <M_DIO_Void_SetPinDirection+0xba>
    10ba:	08 95       	ret
    10bc:	93 30       	cpi	r25, 0x03	; 3
    10be:	c9 f0       	breq	.+50     	; 0x10f2 <M_DIO_Void_SetPinDirection+0xe6>
    10c0:	94 30       	cpi	r25, 0x04	; 4
    10c2:	11 f1       	breq	.+68     	; 0x1108 <M_DIO_Void_SetPinDirection+0xfc>
    10c4:	08 95       	ret
			{
			case 1: SET_BIT(DDRA_REG,Local_U8_Bit); break;
    10c6:	3a b3       	in	r19, 0x1a	; 26
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <M_DIO_Void_SetPinDirection+0xc6>
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	2a 95       	dec	r18
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <M_DIO_Void_SetPinDirection+0xc2>
    10d6:	83 2b       	or	r24, r19
    10d8:	8a bb       	out	0x1a, r24	; 26
    10da:	08 95       	ret
			case 2: SET_BIT(DDRB_REG,Local_U8_Bit); break;
    10dc:	37 b3       	in	r19, 0x17	; 23
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <M_DIO_Void_SetPinDirection+0xdc>
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	2a 95       	dec	r18
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <M_DIO_Void_SetPinDirection+0xd8>
    10ec:	83 2b       	or	r24, r19
    10ee:	87 bb       	out	0x17, r24	; 23
    10f0:	08 95       	ret
			case 3: SET_BIT(DDRC_REG,Local_U8_Bit); break;
    10f2:	34 b3       	in	r19, 0x14	; 20
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	02 c0       	rjmp	.+4      	; 0x10fe <M_DIO_Void_SetPinDirection+0xf2>
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	2a 95       	dec	r18
    1100:	e2 f7       	brpl	.-8      	; 0x10fa <M_DIO_Void_SetPinDirection+0xee>
    1102:	83 2b       	or	r24, r19
    1104:	84 bb       	out	0x14, r24	; 20
    1106:	08 95       	ret
			case 4: SET_BIT(DDRD_REG,Local_U8_Bit); break;
    1108:	31 b3       	in	r19, 0x11	; 17
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <M_DIO_Void_SetPinDirection+0x108>
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	2a 95       	dec	r18
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <M_DIO_Void_SetPinDirection+0x104>
    1118:	83 2b       	or	r24, r19
    111a:	81 bb       	out	0x11, r24	; 17
    111c:	08 95       	ret

0000111e <M_DIO_Void_SetPinValue>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinValue(u8 Copy_U8_Number, u8 Copy_U8_State)
{
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    111e:	9d ec       	ldi	r25, 0xCD	; 205
    1120:	89 9f       	mul	r24, r25
    1122:	91 2d       	mov	r25, r1
    1124:	11 24       	eor	r1, r1
    1126:	29 2f       	mov	r18, r25
    1128:	26 95       	lsr	r18
    112a:	26 95       	lsr	r18
    112c:	26 95       	lsr	r18
    112e:	22 0f       	add	r18, r18
    1130:	32 2f       	mov	r19, r18
    1132:	33 0f       	add	r19, r19
    1134:	33 0f       	add	r19, r19
    1136:	23 0f       	add	r18, r19
    1138:	82 1b       	sub	r24, r18
    113a:	28 2f       	mov	r18, r24
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    113c:	96 95       	lsr	r25
    113e:	96 95       	lsr	r25
    1140:	96 95       	lsr	r25
	switch(Copy_U8_State)
    1142:	66 23       	and	r22, r22
    1144:	19 f0       	breq	.+6      	; 0x114c <M_DIO_Void_SetPinValue+0x2e>
    1146:	61 30       	cpi	r22, 0x01	; 1
    1148:	e1 f1       	breq	.+120    	; 0x11c2 <M_DIO_Void_SetPinValue+0xa4>
    114a:	08 95       	ret
	{
	case LOW:
		switch(Local_U8_Group)
    114c:	92 30       	cpi	r25, 0x02	; 2
    114e:	a9 f0       	breq	.+42     	; 0x117a <M_DIO_Void_SetPinValue+0x5c>
    1150:	18 f4       	brcc	.+6      	; 0x1158 <M_DIO_Void_SetPinValue+0x3a>
    1152:	91 30       	cpi	r25, 0x01	; 1
    1154:	31 f0       	breq	.+12     	; 0x1162 <M_DIO_Void_SetPinValue+0x44>
    1156:	08 95       	ret
    1158:	93 30       	cpi	r25, 0x03	; 3
    115a:	d9 f0       	breq	.+54     	; 0x1192 <M_DIO_Void_SetPinValue+0x74>
    115c:	94 30       	cpi	r25, 0x04	; 4
    115e:	29 f1       	breq	.+74     	; 0x11aa <M_DIO_Void_SetPinValue+0x8c>
    1160:	08 95       	ret
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
    1162:	3b b3       	in	r19, 0x1b	; 27
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	02 c0       	rjmp	.+4      	; 0x116e <M_DIO_Void_SetPinValue+0x50>
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	2a 95       	dec	r18
    1170:	e2 f7       	brpl	.-8      	; 0x116a <M_DIO_Void_SetPinValue+0x4c>
    1172:	80 95       	com	r24
    1174:	83 23       	and	r24, r19
    1176:	8b bb       	out	0x1b, r24	; 27
    1178:	08 95       	ret
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
    117a:	38 b3       	in	r19, 0x18	; 24
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <M_DIO_Void_SetPinValue+0x68>
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	2a 95       	dec	r18
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <M_DIO_Void_SetPinValue+0x64>
    118a:	80 95       	com	r24
    118c:	83 23       	and	r24, r19
    118e:	88 bb       	out	0x18, r24	; 24
    1190:	08 95       	ret
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
    1192:	35 b3       	in	r19, 0x15	; 21
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	02 c0       	rjmp	.+4      	; 0x119e <M_DIO_Void_SetPinValue+0x80>
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	2a 95       	dec	r18
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <M_DIO_Void_SetPinValue+0x7c>
    11a2:	80 95       	com	r24
    11a4:	83 23       	and	r24, r19
    11a6:	85 bb       	out	0x15, r24	; 21
    11a8:	08 95       	ret
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
    11aa:	32 b3       	in	r19, 0x12	; 18
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <M_DIO_Void_SetPinValue+0x98>
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	2a 95       	dec	r18
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <M_DIO_Void_SetPinValue+0x94>
    11ba:	80 95       	com	r24
    11bc:	83 23       	and	r24, r19
    11be:	82 bb       	out	0x12, r24	; 18
    11c0:	08 95       	ret
		default:                                 break;
		}
		break;
		case HIGH:
			switch(Local_U8_Group)
    11c2:	92 30       	cpi	r25, 0x02	; 2
    11c4:	a1 f0       	breq	.+40     	; 0x11ee <M_DIO_Void_SetPinValue+0xd0>
    11c6:	18 f4       	brcc	.+6      	; 0x11ce <M_DIO_Void_SetPinValue+0xb0>
    11c8:	91 30       	cpi	r25, 0x01	; 1
    11ca:	31 f0       	breq	.+12     	; 0x11d8 <M_DIO_Void_SetPinValue+0xba>
    11cc:	08 95       	ret
    11ce:	93 30       	cpi	r25, 0x03	; 3
    11d0:	c9 f0       	breq	.+50     	; 0x1204 <M_DIO_Void_SetPinValue+0xe6>
    11d2:	94 30       	cpi	r25, 0x04	; 4
    11d4:	11 f1       	breq	.+68     	; 0x121a <M_DIO_Void_SetPinValue+0xfc>
    11d6:	08 95       	ret
			{
			case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
    11d8:	3b b3       	in	r19, 0x1b	; 27
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	02 c0       	rjmp	.+4      	; 0x11e4 <M_DIO_Void_SetPinValue+0xc6>
    11e0:	88 0f       	add	r24, r24
    11e2:	99 1f       	adc	r25, r25
    11e4:	2a 95       	dec	r18
    11e6:	e2 f7       	brpl	.-8      	; 0x11e0 <M_DIO_Void_SetPinValue+0xc2>
    11e8:	83 2b       	or	r24, r19
    11ea:	8b bb       	out	0x1b, r24	; 27
    11ec:	08 95       	ret
			case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
    11ee:	38 b3       	in	r19, 0x18	; 24
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <M_DIO_Void_SetPinValue+0xdc>
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	2a 95       	dec	r18
    11fc:	e2 f7       	brpl	.-8      	; 0x11f6 <M_DIO_Void_SetPinValue+0xd8>
    11fe:	83 2b       	or	r24, r19
    1200:	88 bb       	out	0x18, r24	; 24
    1202:	08 95       	ret
			case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
    1204:	35 b3       	in	r19, 0x15	; 21
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <M_DIO_Void_SetPinValue+0xf2>
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	2a 95       	dec	r18
    1212:	e2 f7       	brpl	.-8      	; 0x120c <M_DIO_Void_SetPinValue+0xee>
    1214:	83 2b       	or	r24, r19
    1216:	85 bb       	out	0x15, r24	; 21
    1218:	08 95       	ret
			case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
    121a:	32 b3       	in	r19, 0x12	; 18
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <M_DIO_Void_SetPinValue+0x108>
    1222:	88 0f       	add	r24, r24
    1224:	99 1f       	adc	r25, r25
    1226:	2a 95       	dec	r18
    1228:	e2 f7       	brpl	.-8      	; 0x1222 <M_DIO_Void_SetPinValue+0x104>
    122a:	83 2b       	or	r24, r19
    122c:	82 bb       	out	0x12, r24	; 18
    122e:	08 95       	ret

00001230 <M_DIO_Void_GetPinValue>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
u8   M_DIO_Void_GetPinValue(u8 Copy_U8_Number)
{
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    1230:	9d ec       	ldi	r25, 0xCD	; 205
    1232:	89 9f       	mul	r24, r25
    1234:	91 2d       	mov	r25, r1
    1236:	11 24       	eor	r1, r1
    1238:	29 2f       	mov	r18, r25
    123a:	26 95       	lsr	r18
    123c:	26 95       	lsr	r18
    123e:	26 95       	lsr	r18
    1240:	22 0f       	add	r18, r18
    1242:	32 2f       	mov	r19, r18
    1244:	33 0f       	add	r19, r19
    1246:	33 0f       	add	r19, r19
    1248:	23 0f       	add	r18, r19
    124a:	82 1b       	sub	r24, r18
    124c:	28 2f       	mov	r18, r24
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    124e:	89 2f       	mov	r24, r25
    1250:	86 95       	lsr	r24
    1252:	86 95       	lsr	r24
    1254:	86 95       	lsr	r24
	u8 Local_U8_Reading = 0;
	switch(Local_U8_Group)
    1256:	82 30       	cpi	r24, 0x02	; 2
    1258:	91 f0       	breq	.+36     	; 0x127e <M_DIO_Void_GetPinValue+0x4e>
    125a:	18 f4       	brcc	.+6      	; 0x1262 <M_DIO_Void_GetPinValue+0x32>
    125c:	81 30       	cpi	r24, 0x01	; 1
    125e:	31 f0       	breq	.+12     	; 0x126c <M_DIO_Void_GetPinValue+0x3c>
    1260:	29 c0       	rjmp	.+82     	; 0x12b4 <M_DIO_Void_GetPinValue+0x84>
    1262:	83 30       	cpi	r24, 0x03	; 3
    1264:	a9 f0       	breq	.+42     	; 0x1290 <M_DIO_Void_GetPinValue+0x60>
    1266:	84 30       	cpi	r24, 0x04	; 4
    1268:	e1 f0       	breq	.+56     	; 0x12a2 <M_DIO_Void_GetPinValue+0x72>
    126a:	24 c0       	rjmp	.+72     	; 0x12b4 <M_DIO_Void_GetPinValue+0x84>
	{
	case 1: Local_U8_Reading = GET_BIT(PINA_REG,Local_U8_Bit); break;
    126c:	89 b3       	in	r24, 0x19	; 25
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <M_DIO_Void_GetPinValue+0x46>
    1272:	95 95       	asr	r25
    1274:	87 95       	ror	r24
    1276:	2a 95       	dec	r18
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <M_DIO_Void_GetPinValue+0x42>
    127a:	81 70       	andi	r24, 0x01	; 1
    127c:	08 95       	ret
	case 2: Local_U8_Reading = GET_BIT(PINB_REG,Local_U8_Bit); break;
    127e:	86 b3       	in	r24, 0x16	; 22
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <M_DIO_Void_GetPinValue+0x58>
    1284:	95 95       	asr	r25
    1286:	87 95       	ror	r24
    1288:	2a 95       	dec	r18
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <M_DIO_Void_GetPinValue+0x54>
    128c:	81 70       	andi	r24, 0x01	; 1
    128e:	08 95       	ret
	case 3: Local_U8_Reading = GET_BIT(PINC_REG,Local_U8_Bit); break;
    1290:	83 b3       	in	r24, 0x13	; 19
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	02 c0       	rjmp	.+4      	; 0x129a <M_DIO_Void_GetPinValue+0x6a>
    1296:	95 95       	asr	r25
    1298:	87 95       	ror	r24
    129a:	2a 95       	dec	r18
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <M_DIO_Void_GetPinValue+0x66>
    129e:	81 70       	andi	r24, 0x01	; 1
    12a0:	08 95       	ret
	case 4: Local_U8_Reading = GET_BIT(PIND_REG,Local_U8_Bit); break;
    12a2:	80 b3       	in	r24, 0x10	; 16
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <M_DIO_Void_GetPinValue+0x7c>
    12a8:	95 95       	asr	r25
    12aa:	87 95       	ror	r24
    12ac:	2a 95       	dec	r18
    12ae:	e2 f7       	brpl	.-8      	; 0x12a8 <M_DIO_Void_GetPinValue+0x78>
    12b0:	81 70       	andi	r24, 0x01	; 1
    12b2:	08 95       	ret
/*--------------------------------------------------------------------------------------------*/
u8   M_DIO_Void_GetPinValue(u8 Copy_U8_Number)
{
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
	u8 Local_U8_Group  = Copy_U8_Number / 10;
	u8 Local_U8_Reading = 0;
    12b4:	80 e0       	ldi	r24, 0x00	; 0
	case 3: Local_U8_Reading = GET_BIT(PINC_REG,Local_U8_Bit); break;
	case 4: Local_U8_Reading = GET_BIT(PIND_REG,Local_U8_Bit); break;
	default:                                                   break;
	}
	return Local_U8_Reading ;
}
    12b6:	08 95       	ret

000012b8 <M_Void_I2C_Init>:
#define SCL_CLK 200000 /*Select SCL_CLK in Hz*/
#define BITRATE(TWSR_REG)	((F_CPU/SCL_CLK)-16)/(2 * (1 << (TWSR_REG*2)))
/*************************		INITIATE I2C	******************/
void M_Void_I2C_Init (){
	#if TWPS == TWPS_Value1
		CLR_BIT(TWSR_REG,TWPS0);
    12b8:	81 b1       	in	r24, 0x01	; 1
    12ba:	8e 7f       	andi	r24, 0xFE	; 254
    12bc:	81 b9       	out	0x01, r24	; 1
		CLR_BIT(TWSR_REG,TWPS1);
    12be:	81 b1       	in	r24, 0x01	; 1
    12c0:	8d 7f       	andi	r24, 0xFD	; 253
    12c2:	81 b9       	out	0x01, r24	; 1
		SET_BIT(TWSR_REG,TWPS1);
	#elif TWPS == TWPS_Value64 
		SET_BIT(TWSR_REG,TWPS0);
		SET_BIT(TWSR_REG,TWPS1);
	#endif
	TWBR_REG = BITRATE(TWSR_REG);	 
    12c4:	81 b1       	in	r24, 0x01	; 1
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	88 0f       	add	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	22 e0       	ldi	r18, 0x02	; 2
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <M_Void_I2C_Init+0x1e>
    12d2:	22 0f       	add	r18, r18
    12d4:	33 1f       	adc	r19, r19
    12d6:	8a 95       	dec	r24
    12d8:	e2 f7       	brpl	.-8      	; 0x12d2 <M_Void_I2C_Init+0x1a>
    12da:	03 2e       	mov	r0, r19
    12dc:	00 0c       	add	r0, r0
    12de:	44 0b       	sbc	r20, r20
    12e0:	55 0b       	sbc	r21, r21
    12e2:	60 e4       	ldi	r22, 0x40	; 64
    12e4:	70 e0       	ldi	r23, 0x00	; 0
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	0e 94 01 0a 	call	0x1402	; 0x1402 <__udivmodsi4>
    12ee:	20 b9       	out	0x00, r18	; 0
    12f0:	08 95       	ret

000012f2 <M_U8_I2C_Start>:
} 
/*************************		SEND START		*******************/
u8 M_U8_I2C_Start(){
	u8 transmit_status;		
	TWCR_REG =(1<<TWSTA)|(1<<TWEN)|(1<<TWINT); /*Enable TWI, generate START*/
    12f2:	84 ea       	ldi	r24, 0xA4	; 164
    12f4:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR_REG & (1<<TWINT)));	/* Wait until TWI finish its current job*/
    12f6:	06 b6       	in	r0, 0x36	; 54
    12f8:	07 fe       	sbrs	r0, 7
    12fa:	fd cf       	rjmp	.-6      	; 0x12f6 <M_U8_I2C_Start+0x4>
	transmit_status = (TWSR_REG & 0xF8);		/* Read TWI status register */
    12fc:	81 b1       	in	r24, 0x01	; 1
    12fe:	88 7f       	andi	r24, 0xF8	; 248
	if(transmit_status != TWI_START)		/* Check weather START transmitted or not? */
    1300:	88 30       	cpi	r24, 0x08	; 8
    1302:	09 f0       	breq	.+2      	; 0x1306 <M_U8_I2C_Start+0x14>
	transmit_status = START_FAILED;			/* Return 0 to indicate start condition fail*/ 
    1304:	80 e0       	ldi	r24, 0x00	; 0
	return transmit_status;
} 
    1306:	08 95       	ret

00001308 <M_U8_I2C_SendSlaveAddressWithWrite>:
/*After Start we will send slave address with write*/
u8 M_U8_I2C_SendSlaveAddressWithWrite (u8 write_address){
	u8 transmit_status;
	/*SEND ADDRESS BYTE*/
	TWDR_REG = write_address;		    /* Write SLA+W in TWI data register */
    1308:	83 b9       	out	0x03, r24	; 3
	TWCR_REG = (1<<TWEN)|(1<<TWINT);	/* Enable TWI & clear interrupt flag */
    130a:	84 e8       	ldi	r24, 0x84	; 132
    130c:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR_REG&(1<<TWINT)));		/* Wait until TWI finish its current job */
    130e:	06 b6       	in	r0, 0x36	; 54
    1310:	07 fe       	sbrs	r0, 7
    1312:	fd cf       	rjmp	.-6      	; 0x130e <M_U8_I2C_SendSlaveAddressWithWrite+0x6>
	
	/*CHECK TRANSMIT WITH ACK*/
	transmit_status= (TWSR_REG & 0xF8);		/* Read TWI status register */
    1314:	81 b1       	in	r24, 0x01	; 1
	/*TRANSMIT WITH NO ACK*/
	else if(transmit_status == TWI_MT_SLA_NACK)		/* Check for SLA+W transmitted*/
	transmit_status = TWI_MT_SLA_NACK;				/* Nack received */  
	
	return transmit_status;
}
    1316:	88 7f       	andi	r24, 0xF8	; 248
    1318:	08 95       	ret

0000131a <M_U8_I2C_Repeated_Start>:
/**************************		REPEAT START FUNCTION		****************/
u8 M_U8_I2C_Repeated_Start(){
	u8 transmit_status;									
	TWCR_REG = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT); /* Enable TWI, generate start */
    131a:	84 ea       	ldi	r24, 0xA4	; 164
    131c:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR_REG & (1<<TWINT)));			/* Wait until TWI finish its current job */
    131e:	06 b6       	in	r0, 0x36	; 54
    1320:	07 fe       	sbrs	r0, 7
    1322:	fd cf       	rjmp	.-6      	; 0x131e <M_U8_I2C_Repeated_Start+0x4>
	transmit_status = TWSR_REG & 0xF8;					/* Read TWI status register */
    1324:	81 b1       	in	r24, 0x01	; 1
    1326:	88 7f       	andi	r24, 0xF8	; 248
	if(transmit_status!= TWI_REP_START)					/* Check for repeated start transmitted */
    1328:	80 31       	cpi	r24, 0x10	; 16
    132a:	09 f0       	breq	.+2      	; 0x132e <M_U8_I2C_Repeated_Start+0x14>
	transmit_status = REP_START_FAILED;					/* repeated start condition fail */
    132c:	80 e0       	ldi	r24, 0x00	; 0
	
	return transmit_status; 
}
    132e:	08 95       	ret

00001330 <M_U8_I2C_SendSlaveAddressWithRead>:
/**************************		SEND SLAVE ADDRESS WITH WRITE	**************/
u8 M_U8_I2C_SendSlaveAddressWithRead(u8 read_address){
	u8 transmit_status; 
	TWDR_REG = read_address;					/* Write SLA+R in TWI data register */
    1330:	83 b9       	out	0x03, r24	; 3
	TWCR_REG = (1<<TWEN)|(1<<TWINT);			/* Enable TWI and clear interrupt flag */
    1332:	84 e8       	ldi	r24, 0x84	; 132
    1334:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR_REG&(1<<TWINT)));				/* Wait until TWI finish its current job */
    1336:	06 b6       	in	r0, 0x36	; 54
    1338:	07 fe       	sbrs	r0, 7
    133a:	fd cf       	rjmp	.-6      	; 0x1336 <M_U8_I2C_SendSlaveAddressWithRead+0x6>
	transmit_status = TWSR_REG & 0xF8;					/* Read TWI status register */
    133c:	81 b1       	in	r24, 0x01	; 1
	transmit_status = TWI_MT_SLA_R_ACK;					/* Ack received */
	else if(transmit_status == TWI_MR_SLA_R_NACK)				/* Check for SLA+R transmitted*/
	transmit_status = TWI_MR_SLA_R_NACK;					/* Nack received */
	
	return transmit_status; 
}
    133e:	88 7f       	andi	r24, 0xF8	; 248
    1340:	08 95       	ret

00001342 <M_U8_I2C_Write>:
/**************************		WRITE DATA	FUNCTION	***********************/
u8 M_U8_I2C_Write(u8 data){
	u8 transmit_status;						
	TWDR_REG = data;				/* Copy data in TWI data register */
    1342:	83 b9       	out	0x03, r24	; 3
	TWCR_REG = (1<<TWEN)|(1<<TWINT);/* Enable TWI and clear interrupt flag */
    1344:	84 e8       	ldi	r24, 0x84	; 132
    1346:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR_REG&(1<<TWINT)));	/* Wait until TWI finish its current job */
    1348:	06 b6       	in	r0, 0x36	; 54
    134a:	07 fe       	sbrs	r0, 7
    134c:	fd cf       	rjmp	.-6      	; 0x1348 <M_U8_I2C_Write+0x6>
	transmit_status = TWSR_REG & 0xF8;		/* Read TWI status register */
    134e:	81 b1       	in	r24, 0x01	; 1
	transmit_status = TWI_MT_DATA_ACK;			/* Ack received */
	else if(transmit_status==TWI_MT_DATA_NACK)	/* Check for data transmitted*/
	transmit_status = TWI_MT_DATA_NACK;		/* Nack received */ 
	
	return transmit_status; 
}
    1350:	88 7f       	andi	r24, 0xF8	; 248
    1352:	08 95       	ret

00001354 <M_U8_I2C_ReadWithAck>:
u8 M_U8_I2C_ReadWithAck(){
	TWCR_REG = (1<<TWEN)|(1<<TWINT)|(1<<TWEA);	/* Enable TWI, generation of Ack */
    1354:	84 ec       	ldi	r24, 0xC4	; 196
    1356:	86 bf       	out	0x36, r24	; 54
    while(!(TWCR_REG&(1<<TWINT)));				/* Wait until TWI finish its current job */
    1358:	06 b6       	in	r0, 0x36	; 54
    135a:	07 fe       	sbrs	r0, 7
    135c:	fd cf       	rjmp	.-6      	; 0x1358 <M_U8_I2C_ReadWithAck+0x4>
    return TWDR_REG;							/* Return received data */
    135e:	83 b1       	in	r24, 0x03	; 3
}
    1360:	08 95       	ret

00001362 <M_U8_I2C_ReadWithNack>:
u8 M_U8_I2C_ReadWithNack(){
	TWCR_REG =(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
    1362:	84 e8       	ldi	r24, 0x84	; 132
    1364:	86 bf       	out	0x36, r24	; 54
    while(!(TWCR_REG&(1<<TWINT)));			/* Wait until TWI finish its current job */
    1366:	06 b6       	in	r0, 0x36	; 54
    1368:	07 fe       	sbrs	r0, 7
    136a:	fd cf       	rjmp	.-6      	; 0x1366 <M_U8_I2C_ReadWithNack+0x4>
    return TWDR_REG;					/* Return received data */
    136c:	83 b1       	in	r24, 0x03	; 3
}
    136e:	08 95       	ret

00001370 <M_Void_I2C_STOP>:
void M_Void_I2C_STOP(){
    TWCR_REG=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);/* Enable TWI, generate stop */
    1370:	84 e9       	ldi	r24, 0x94	; 148
    1372:	86 bf       	out	0x36, r24	; 54
    while(TWCR_REG&(1<<TWSTO));				 /* Wait until stop condition execution */
    1374:	06 b6       	in	r0, 0x36	; 54
    1376:	04 fc       	sbrc	r0, 4
    1378:	fd cf       	rjmp	.-6      	; 0x1374 <M_Void_I2C_STOP+0x4>
    137a:	08 95       	ret

0000137c <UART_Init>:
/*THIS FUNCTION IS TO READ BYTE USING POLLING*/ 
	while (!GET_BIT(UCSRA,RXC)){
		/*WAIT UNTIL THE RECIEVER FLAG IS ONE*/
	}
	return (UDR);
}
    137c:	80 b5       	in	r24, 0x20	; 32
    137e:	8f 77       	andi	r24, 0x7F	; 127
    1380:	80 bd       	out	0x20, r24	; 32
    1382:	10 bc       	out	0x20, r1	; 32
    1384:	80 e1       	ldi	r24, 0x10	; 16
    1386:	89 b9       	out	0x09, r24	; 9
    1388:	80 b5       	in	r24, 0x20	; 32
    138a:	80 bd       	out	0x20, r24	; 32
    138c:	88 e9       	ldi	r24, 0x98	; 152
    138e:	8a b9       	out	0x0a, r24	; 10
    1390:	80 b5       	in	r24, 0x20	; 32
    1392:	80 68       	ori	r24, 0x80	; 128
    1394:	80 bd       	out	0x20, r24	; 32
    1396:	86 e8       	ldi	r24, 0x86	; 134
    1398:	80 bd       	out	0x20, r24	; 32
    139a:	08 95       	ret

0000139c <UART_sendByte>:
    139c:	5d 9b       	sbis	0x0b, 5	; 11
    139e:	fe cf       	rjmp	.-4      	; 0x139c <UART_sendByte>
    13a0:	8c b9       	out	0x0c, r24	; 12
    13a2:	5e 9b       	sbis	0x0b, 6	; 11
    13a4:	fe cf       	rjmp	.-4      	; 0x13a2 <UART_sendByte+0x6>
    13a6:	08 95       	ret

000013a8 <UART_receiveByteAsynchCallBack>:
void UART_receiveByteAsynchCallBack(void(*CpyPtr)(u8)){
	ptr_func = CpyPtr; 
    13a8:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <ptr_func+0x1>
    13ac:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <ptr_func>
    13b0:	08 95       	ret

000013b2 <__vector_13>:
} 
ISR(USART_RXC_vect){
    13b2:	1f 92       	push	r1
    13b4:	0f 92       	push	r0
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	0f 92       	push	r0
    13ba:	11 24       	eor	r1, r1
    13bc:	2f 93       	push	r18
    13be:	3f 93       	push	r19
    13c0:	4f 93       	push	r20
    13c2:	5f 93       	push	r21
    13c4:	6f 93       	push	r22
    13c6:	7f 93       	push	r23
    13c8:	8f 93       	push	r24
    13ca:	9f 93       	push	r25
    13cc:	af 93       	push	r26
    13ce:	bf 93       	push	r27
    13d0:	ef 93       	push	r30
    13d2:	ff 93       	push	r31
	ptr_func(UDR);
    13d4:	8c b1       	in	r24, 0x0c	; 12
    13d6:	e0 91 b7 01 	lds	r30, 0x01B7	; 0x8001b7 <ptr_func>
    13da:	f0 91 b8 01 	lds	r31, 0x01B8	; 0x8001b8 <ptr_func+0x1>
    13de:	09 95       	icall
}
    13e0:	ff 91       	pop	r31
    13e2:	ef 91       	pop	r30
    13e4:	bf 91       	pop	r27
    13e6:	af 91       	pop	r26
    13e8:	9f 91       	pop	r25
    13ea:	8f 91       	pop	r24
    13ec:	7f 91       	pop	r23
    13ee:	6f 91       	pop	r22
    13f0:	5f 91       	pop	r21
    13f2:	4f 91       	pop	r20
    13f4:	3f 91       	pop	r19
    13f6:	2f 91       	pop	r18
    13f8:	0f 90       	pop	r0
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	0f 90       	pop	r0
    13fe:	1f 90       	pop	r1
    1400:	18 95       	reti

00001402 <__udivmodsi4>:
    1402:	a1 e2       	ldi	r26, 0x21	; 33
    1404:	1a 2e       	mov	r1, r26
    1406:	aa 1b       	sub	r26, r26
    1408:	bb 1b       	sub	r27, r27
    140a:	fd 01       	movw	r30, r26
    140c:	0d c0       	rjmp	.+26     	; 0x1428 <__udivmodsi4_ep>

0000140e <__udivmodsi4_loop>:
    140e:	aa 1f       	adc	r26, r26
    1410:	bb 1f       	adc	r27, r27
    1412:	ee 1f       	adc	r30, r30
    1414:	ff 1f       	adc	r31, r31
    1416:	a2 17       	cp	r26, r18
    1418:	b3 07       	cpc	r27, r19
    141a:	e4 07       	cpc	r30, r20
    141c:	f5 07       	cpc	r31, r21
    141e:	20 f0       	brcs	.+8      	; 0x1428 <__udivmodsi4_ep>
    1420:	a2 1b       	sub	r26, r18
    1422:	b3 0b       	sbc	r27, r19
    1424:	e4 0b       	sbc	r30, r20
    1426:	f5 0b       	sbc	r31, r21

00001428 <__udivmodsi4_ep>:
    1428:	66 1f       	adc	r22, r22
    142a:	77 1f       	adc	r23, r23
    142c:	88 1f       	adc	r24, r24
    142e:	99 1f       	adc	r25, r25
    1430:	1a 94       	dec	r1
    1432:	69 f7       	brne	.-38     	; 0x140e <__udivmodsi4_loop>
    1434:	60 95       	com	r22
    1436:	70 95       	com	r23
    1438:	80 95       	com	r24
    143a:	90 95       	com	r25
    143c:	9b 01       	movw	r18, r22
    143e:	ac 01       	movw	r20, r24
    1440:	bd 01       	movw	r22, r26
    1442:	cf 01       	movw	r24, r30
    1444:	08 95       	ret

00001446 <__divmodsi4>:
    1446:	05 2e       	mov	r0, r21
    1448:	97 fb       	bst	r25, 7
    144a:	1e f4       	brtc	.+6      	; 0x1452 <__divmodsi4+0xc>
    144c:	00 94       	com	r0
    144e:	0e 94 3a 0a 	call	0x1474	; 0x1474 <__negsi2>
    1452:	57 fd       	sbrc	r21, 7
    1454:	07 d0       	rcall	.+14     	; 0x1464 <__divmodsi4_neg2>
    1456:	0e 94 01 0a 	call	0x1402	; 0x1402 <__udivmodsi4>
    145a:	07 fc       	sbrc	r0, 7
    145c:	03 d0       	rcall	.+6      	; 0x1464 <__divmodsi4_neg2>
    145e:	4e f4       	brtc	.+18     	; 0x1472 <__divmodsi4_exit>
    1460:	0c 94 3a 0a 	jmp	0x1474	; 0x1474 <__negsi2>

00001464 <__divmodsi4_neg2>:
    1464:	50 95       	com	r21
    1466:	40 95       	com	r20
    1468:	30 95       	com	r19
    146a:	21 95       	neg	r18
    146c:	3f 4f       	sbci	r19, 0xFF	; 255
    146e:	4f 4f       	sbci	r20, 0xFF	; 255
    1470:	5f 4f       	sbci	r21, 0xFF	; 255

00001472 <__divmodsi4_exit>:
    1472:	08 95       	ret

00001474 <__negsi2>:
    1474:	90 95       	com	r25
    1476:	80 95       	com	r24
    1478:	70 95       	com	r23
    147a:	61 95       	neg	r22
    147c:	7f 4f       	sbci	r23, 0xFF	; 255
    147e:	8f 4f       	sbci	r24, 0xFF	; 255
    1480:	9f 4f       	sbci	r25, 0xFF	; 255
    1482:	08 95       	ret

00001484 <_exit>:
    1484:	f8 94       	cli

00001486 <__stop_program>:
    1486:	ff cf       	rjmp	.-2      	; 0x1486 <__stop_program>
