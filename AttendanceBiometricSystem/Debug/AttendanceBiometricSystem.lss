
AttendanceBiometricSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001402  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013e  00800060  00001402  00001496  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  0080019e  0080019e  000015d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001604  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000348  00000000  00000000  00001640  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004163  00000000  00000000  00001988  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001343  00000000  00000000  00005aeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000022c6  00000000  00000000  00006e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000720  00000000  00000000  000090f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f30  00000000  00000000  00009814  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001cac  00000000  00000000  0000a744  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000288  00000000  00000000  0000c3f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 96 09 	jmp	0x132c	; 0x132c <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e0       	ldi	r30, 0x02	; 2
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 39       	cpi	r26, 0x9E	; 158
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	ae e9       	ldi	r26, 0x9E	; 158
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3a       	cpi	r26, 0xAD	; 173
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f4 06 	call	0xde8	; 0xde8 <main>
      8a:	0c 94 ff 09 	jmp	0x13fe	; 0x13fe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_Init>:
*  Return Value     : NONE
*************************************************************************/
void APP_Init(void)
{
	u8 key = KEYPAD_RELEASED;
	H_Lcd_Void_LCDClear();
      92:	0e 94 ce 05 	call	0xb9c	; 0xb9c <H_Lcd_Void_LCDClear>
	H_Lcd_Void_LCDGoTo(0,0);
      96:	60 e0       	ldi	r22, 0x00	; 0
      98:	80 e0       	ldi	r24, 0x00	; 0
      9a:	0e 94 31 06 	call	0xc62	; 0xc62 <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteString((u8*)"Please Press");
      9e:	83 e9       	ldi	r24, 0x93	; 147
      a0:	90 e0       	ldi	r25, 0x00	; 0
      a2:	0e 94 bb 05 	call	0xb76	; 0xb76 <H_Lcd_Void_LCDWriteString>
	H_Lcd_Void_LCDGoTo(1,0);
      a6:	60 e0       	ldi	r22, 0x00	; 0
      a8:	81 e0       	ldi	r24, 0x01	; 1
      aa:	0e 94 31 06 	call	0xc62	; 0xc62 <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteString((u8*)"(*) : Attendance");
      ae:	80 ea       	ldi	r24, 0xA0	; 160
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	0e 94 bb 05 	call	0xb76	; 0xb76 <H_Lcd_Void_LCDWriteString>
	H_Lcd_Void_LCDGoTo(2,0);
      b6:	60 e0       	ldi	r22, 0x00	; 0
      b8:	82 e0       	ldi	r24, 0x02	; 2
      ba:	0e 94 31 06 	call	0xc62	; 0xc62 <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteString((u8*)"(#) : New Employee");
      be:	81 eb       	ldi	r24, 0xB1	; 177
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	0e 94 bb 05 	call	0xb76	; 0xb76 <H_Lcd_Void_LCDWriteString>
*  parameters (out) : None
*  Return Value     : NONE
*************************************************************************/
void APP_Init(void)
{
	u8 key = KEYPAD_RELEASED;
      c6:	81 e0       	ldi	r24, 0x01	; 1
	H_Lcd_Void_LCDGoTo(1,0);
	H_Lcd_Void_LCDWriteString((u8*)"(*) : Attendance");
	H_Lcd_Void_LCDGoTo(2,0);
	H_Lcd_Void_LCDWriteString((u8*)"(#) : New Employee");
	
 	while ((key != (NEW_ENROLLEMENT_BUTTON_PRESSED)) && (key != (CONFIRM_ATTENDANCE_BUTTON_PRESSED))){
      c8:	02 c0       	rjmp	.+4      	; 0xce <APP_Init+0x3c>
 		key = H_KeyPad_U8_KeyPadRead();
      ca:	0e 94 45 04 	call	0x88a	; 0x88a <H_KeyPad_U8_KeyPadRead>
	H_Lcd_Void_LCDGoTo(1,0);
	H_Lcd_Void_LCDWriteString((u8*)"(*) : Attendance");
	H_Lcd_Void_LCDGoTo(2,0);
	H_Lcd_Void_LCDWriteString((u8*)"(#) : New Employee");
	
 	while ((key != (NEW_ENROLLEMENT_BUTTON_PRESSED)) && (key != (CONFIRM_ATTENDANCE_BUTTON_PRESSED))){
      ce:	83 32       	cpi	r24, 0x23	; 35
      d0:	11 f0       	breq	.+4      	; 0xd6 <APP_Init+0x44>
      d2:	8a 32       	cpi	r24, 0x2A	; 42
      d4:	d1 f7       	brne	.-12     	; 0xca <APP_Init+0x38>
 		key = H_KeyPad_U8_KeyPadRead();
 	}
	switch(key)
      d6:	83 32       	cpi	r24, 0x23	; 35
      d8:	31 f0       	breq	.+12     	; 0xe6 <APP_Init+0x54>
      da:	8a 32       	cpi	r24, 0x2A	; 42
      dc:	39 f4       	brne	.+14     	; 0xec <APP_Init+0x5a>
	{
	case CONFIRM_ATTENDANCE_BUTTON_PRESSED:
	g_SystemState = CONFIRM_ATTENDANCE_ENTER_ID;
      de:	87 e0       	ldi	r24, 0x07	; 7
      e0:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <g_SystemState>
	break;
      e4:	08 95       	ret
	case NEW_ENROLLEMENT_BUTTON_PRESSED:
	g_SystemState = NEW_ENROLLMENT_SET_NEW_ID;
      e6:	81 e0       	ldi	r24, 0x01	; 1
      e8:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <g_SystemState>
      ec:	08 95       	ret

000000ee <APP_GetID>:
*  parameters (in)  : None
*  parameters (out) : APP_EmpID ID value
*  Return Value     : from 0x01 to 0x0F
*************************************************************************/
APP_EmpID APP_GetID(void)
{
      ee:	cf 93       	push	r28
      f0:	df 93       	push	r29
	APP_EmpID Copy_ID =0;
	u8 Temp_keyPressed =0;

	/*go to the first place in the second line */
	H_Lcd_Void_LCDClear();
      f2:	0e 94 ce 05 	call	0xb9c	; 0xb9c <H_Lcd_Void_LCDClear>
	H_Lcd_Void_LCDGoTo(0,0);
      f6:	60 e0       	ldi	r22, 0x00	; 0
      f8:	80 e0       	ldi	r24, 0x00	; 0
      fa:	0e 94 31 06 	call	0xc62	; 0xc62 <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteString((u8*)"Please Enter Your ID");
      fe:	84 ec       	ldi	r24, 0xC4	; 196
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	0e 94 bb 05 	call	0xb76	; 0xb76 <H_Lcd_Void_LCDWriteString>
	H_Lcd_Void_LCDGoTo(1,0);
     106:	60 e0       	ldi	r22, 0x00	; 0
     108:	81 e0       	ldi	r24, 0x01	; 1
     10a:	0e 94 31 06 	call	0xc62	; 0xc62 <H_Lcd_Void_LCDGoTo>
*  parameters (out) : APP_EmpID ID value
*  Return Value     : from 0x01 to 0x0F
*************************************************************************/
APP_EmpID APP_GetID(void)
{
	APP_EmpID Copy_ID =0;
     10e:	d0 e0       	ldi	r29, 0x00	; 0

	/*this while loop keeps taking input buttons from user via Keypad
	 *until user press ENTER button and convert the input uint8 char into u8 integer value*/
	do
	{
		Temp_keyPressed = H_KeyPad_U8_KeyPadRead();/*get char reading from user via keypad*/
     110:	0e 94 45 04 	call	0x88a	; 0x88a <H_KeyPad_U8_KeyPadRead>
		if(GOBACK_BUTTON_PRESSED == Temp_keyPressed || MAIN_MENU_BUTTON_PRESSED == Temp_keyPressed)
     114:	81 34       	cpi	r24, 0x41	; 65
     116:	d9 f0       	breq	.+54     	; 0x14e <APP_GetID+0x60>
     118:	83 34       	cpi	r24, 0x43	; 67
     11a:	d9 f0       	breq	.+54     	; 0x152 <APP_GetID+0x64>
		{	/*if the user pressed the go-back button in the middle of the operation
		 	  Ignore the inputs by overwriting the Copy_ID by 0xFF and break the loop*/
			Copy_ID = GOBACK;
			break;
		}
		if(((Temp_keyPressed >= MIN_DIGIT) && (Temp_keyPressed <= MAX_DIGIT)))
     11c:	c0 ed       	ldi	r28, 0xD0	; 208
     11e:	c8 0f       	add	r28, r24
     120:	ca 30       	cpi	r28, 0x0A	; 10
     122:	90 f4       	brcc	.+36     	; 0x148 <APP_GetID+0x5a>
		{
			/*convert the ASCII to decimal char by char BY -THE ZERO ASCII (48) from the input*/
			Temp_keyPressed-=48;

			H_Lcd_Void_LCDWriteNumber(Temp_keyPressed);/*display the number on the LCD for User interface*/
     124:	6c 2f       	mov	r22, r28
     126:	70 e0       	ldi	r23, 0x00	; 0
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	0e 94 d2 05 	call	0xba4	; 0xba4 <H_Lcd_Void_LCDWriteNumber>

			Copy_ID = ((Copy_ID * 10 ) + Temp_keyPressed) ;/*convert ID into u8 integer value*/
     130:	dd 0f       	add	r29, r29
     132:	8d 2f       	mov	r24, r29
     134:	88 0f       	add	r24, r24
     136:	88 0f       	add	r24, r24
     138:	d8 0f       	add	r29, r24
     13a:	dc 0f       	add	r29, r28
			if(Copy_ID>MAX_ALLOWED_ID) Copy_ID = OUT_OF_RANGE_ID;
     13c:	d0 31       	cpi	r29, 0x10	; 16
     13e:	10 f4       	brcc	.+4      	; 0x144 <APP_GetID+0x56>
			break;
		}
		if(((Temp_keyPressed >= MIN_DIGIT) && (Temp_keyPressed <= MAX_DIGIT)))
		{
			/*convert the ASCII to decimal char by char BY -THE ZERO ASCII (48) from the input*/
			Temp_keyPressed-=48;
     140:	8c 2f       	mov	r24, r28
     142:	02 c0       	rjmp	.+4      	; 0x148 <APP_GetID+0x5a>
     144:	8c 2f       	mov	r24, r28

			H_Lcd_Void_LCDWriteNumber(Temp_keyPressed);/*display the number on the LCD for User interface*/

			Copy_ID = ((Copy_ID * 10 ) + Temp_keyPressed) ;/*convert ID into u8 integer value*/
			if(Copy_ID>MAX_ALLOWED_ID) Copy_ID = OUT_OF_RANGE_ID;
     146:	de ef       	ldi	r29, 0xFE	; 254
		}
	} while(ENTER_BUTTON_PRESSED != Temp_keyPressed);
     148:	84 34       	cpi	r24, 0x44	; 68
     14a:	11 f7       	brne	.-60     	; 0x110 <APP_GetID+0x22>
     14c:	03 c0       	rjmp	.+6      	; 0x154 <APP_GetID+0x66>
	{
		Temp_keyPressed = H_KeyPad_U8_KeyPadRead();/*get char reading from user via keypad*/
		if(GOBACK_BUTTON_PRESSED == Temp_keyPressed || MAIN_MENU_BUTTON_PRESSED == Temp_keyPressed)
		{	/*if the user pressed the go-back button in the middle of the operation
		 	  Ignore the inputs by overwriting the Copy_ID by 0xFF and break the loop*/
			Copy_ID = GOBACK;
     14e:	df ef       	ldi	r29, 0xFF	; 255
     150:	01 c0       	rjmp	.+2      	; 0x154 <APP_GetID+0x66>
     152:	df ef       	ldi	r29, 0xFF	; 255
			if(Copy_ID>MAX_ALLOWED_ID) Copy_ID = OUT_OF_RANGE_ID;
		}
	} while(ENTER_BUTTON_PRESSED != Temp_keyPressed);
	
	return Copy_ID;/*return the ID u8 integer value*/
}
     154:	8d 2f       	mov	r24, r29
     156:	df 91       	pop	r29
     158:	cf 91       	pop	r28
     15a:	08 95       	ret

0000015c <APP_CheckIDPresence>:
*  Return Value     : CONFIRM_ATTENDANCE_NOTFOUND_ID
*  					  CONFIRM_ATTENDANCE_FOUND_ID
*************************************************************************/

APP_CurrentState APP_CheckIDPresence ( APP_EmpID copy_ID)
{
     15c:	cf 93       	push	r28
     15e:	c8 2f       	mov	r28, r24
	/*check if the ID value is saved in the EEPROM
	 * or not and return the state of presence */
	APP_CurrentState Local_Is_found = 0;
	if(copy_ID == H_Void_EEPROMRead(copy_ID))
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	0e 94 e6 01 	call	0x3cc	; 0x3cc <H_Void_EEPROMRead>
     166:	c8 13       	cpse	r28, r24
     168:	02 c0       	rjmp	.+4      	; 0x16e <APP_CheckIDPresence+0x12>
	{
		Local_Is_found = FOUND_ID;
     16a:	89 e0       	ldi	r24, 0x09	; 9
     16c:	01 c0       	rjmp	.+2      	; 0x170 <APP_CheckIDPresence+0x14>
	}
	else
	{
		Local_Is_found = NOTFOUND_ID;
     16e:	88 e0       	ldi	r24, 0x08	; 8
	}
	return Local_Is_found;
}
     170:	cf 91       	pop	r28
     172:	08 95       	ret

00000174 <APP_SetNewID>:
*  parameters (out) : None
*  Return Value     : None
*************************************************************************/
void APP_SetNewID(APP_EmpID copy_ID)
{
	H_Void_EEPROMWrite((u16)copy_ID , copy_ID);
     174:	68 2f       	mov	r22, r24
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	0e 94 c8 01 	call	0x390	; 0x390 <H_Void_EEPROMWrite>
	g_SystemState = NEW_ENROLLMENT_ID_SUCCESS;
     17c:	82 e0       	ldi	r24, 0x02	; 2
     17e:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <g_SystemState>
     182:	08 95       	ret

00000184 <APP_NewEnrollemtSuccessful>:
*  parameters (in)  : None
*  parameters (out) : None
*  Return Value     : None
*************************************************************************/
void APP_NewEnrollemtSuccessful(void){
	H_Lcd_Void_LCDClear();
     184:	0e 94 ce 05 	call	0xb9c	; 0xb9c <H_Lcd_Void_LCDClear>
	H_Lcd_Void_LCDWriteString((u8*) "New Enrollment successful");
     188:	89 ed       	ldi	r24, 0xD9	; 217
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	0e 94 bb 05 	call	0xb76	; 0xb76 <H_Lcd_Void_LCDWriteString>
	H_LED_Void_LedOn(LED_GRN);
     190:	83 e0       	ldi	r24, 0x03	; 3
     192:	0e 94 6f 06 	call	0xcde	; 0xcde <H_LED_Void_LedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     196:	2f e3       	ldi	r18, 0x3F	; 63
     198:	82 e4       	ldi	r24, 0x42	; 66
     19a:	9f e0       	ldi	r25, 0x0F	; 15
     19c:	21 50       	subi	r18, 0x01	; 1
     19e:	80 40       	sbci	r24, 0x00	; 0
     1a0:	90 40       	sbci	r25, 0x00	; 0
     1a2:	e1 f7       	brne	.-8      	; 0x19c <APP_NewEnrollemtSuccessful+0x18>
     1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <APP_NewEnrollemtSuccessful+0x22>
     1a6:	00 00       	nop
	_delay_ms(DISPLAY_FOR_5_SEC);
	H_LED_Void_LedOff(LED_GRN);
     1a8:	83 e0       	ldi	r24, 0x03	; 3
     1aa:	0e 94 8e 06 	call	0xd1c	; 0xd1c <H_LED_Void_LedOff>
     1ae:	08 95       	ret

000001b0 <APP_RTC_Display_Time_and_Date>:
*  parameters (out) : None
*  Return Value     : None
*************************************************************************/

void  APP_RTC_Display_Time_and_Date(Date_And_Time * ptr)
{
     1b0:	cf 93       	push	r28
     1b2:	df 93       	push	r29
     1b4:	ec 01       	movw	r28, r24
    H_Lcd_Void_LCDGoTo(2,0);
     1b6:	60 e0       	ldi	r22, 0x00	; 0
     1b8:	82 e0       	ldi	r24, 0x02	; 2
     1ba:	0e 94 31 06 	call	0xc62	; 0xc62 <H_Lcd_Void_LCDGoTo>
    H_Lcd_Void_LCDWriteString(RTC_Day_str_display[ptr->day]);
     1be:	8b 81       	ldd	r24, Y+3	; 0x03
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	88 0f       	add	r24, r24
     1c4:	99 1f       	adc	r25, r25
     1c6:	88 0f       	add	r24, r24
     1c8:	99 1f       	adc	r25, r25
     1ca:	80 5a       	subi	r24, 0xA0	; 160
     1cc:	9f 4f       	sbci	r25, 0xFF	; 255
     1ce:	0e 94 bb 05 	call	0xb76	; 0xb76 <H_Lcd_Void_LCDWriteString>
    H_Lcd_Void_LCDWriteCharacter(' ');
     1d2:	80 e2       	ldi	r24, 0x20	; 32
     1d4:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <H_Lcd_Void_LCDWriteCharacter>
    H_Lcd_Void_LCDWriteNumber(ptr->date);
     1d8:	6c 81       	ldd	r22, Y+4	; 0x04
     1da:	70 e0       	ldi	r23, 0x00	; 0
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	0e 94 d2 05 	call	0xba4	; 0xba4 <H_Lcd_Void_LCDWriteNumber>
    H_Lcd_Void_LCDWriteCharacter('/');
     1e4:	8f e2       	ldi	r24, 0x2F	; 47
     1e6:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <H_Lcd_Void_LCDWriteCharacter>
    H_Lcd_Void_LCDWriteNumber(ptr->month);
     1ea:	6d 81       	ldd	r22, Y+5	; 0x05
     1ec:	70 e0       	ldi	r23, 0x00	; 0
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	0e 94 d2 05 	call	0xba4	; 0xba4 <H_Lcd_Void_LCDWriteNumber>
    H_Lcd_Void_LCDWriteCharacter('/');
     1f6:	8f e2       	ldi	r24, 0x2F	; 47
     1f8:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <H_Lcd_Void_LCDWriteCharacter>
    H_Lcd_Void_LCDWriteNumber(20);
     1fc:	64 e1       	ldi	r22, 0x14	; 20
     1fe:	70 e0       	ldi	r23, 0x00	; 0
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	0e 94 d2 05 	call	0xba4	; 0xba4 <H_Lcd_Void_LCDWriteNumber>
    H_Lcd_Void_LCDWriteNumber(ptr->year);
     208:	6e 81       	ldd	r22, Y+6	; 0x06
     20a:	70 e0       	ldi	r23, 0x00	; 0
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	0e 94 d2 05 	call	0xba4	; 0xba4 <H_Lcd_Void_LCDWriteNumber>
	H_Lcd_Void_LCDGoTo(3,0);
     214:	60 e0       	ldi	r22, 0x00	; 0
     216:	83 e0       	ldi	r24, 0x03	; 3
     218:	0e 94 31 06 	call	0xc62	; 0xc62 <H_Lcd_Void_LCDGoTo>
    H_Lcd_Void_LCDWriteNumber(ptr->hours);
     21c:	6a 81       	ldd	r22, Y+2	; 0x02
     21e:	70 e0       	ldi	r23, 0x00	; 0
     220:	80 e0       	ldi	r24, 0x00	; 0
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	0e 94 d2 05 	call	0xba4	; 0xba4 <H_Lcd_Void_LCDWriteNumber>
    H_Lcd_Void_LCDWriteCharacter(':');
     228:	8a e3       	ldi	r24, 0x3A	; 58
     22a:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <H_Lcd_Void_LCDWriteCharacter>
    H_Lcd_Void_LCDWriteNumber(ptr->min);
     22e:	69 81       	ldd	r22, Y+1	; 0x01
     230:	70 e0       	ldi	r23, 0x00	; 0
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	0e 94 d2 05 	call	0xba4	; 0xba4 <H_Lcd_Void_LCDWriteNumber>
    H_Lcd_Void_LCDWriteCharacter(':');
     23a:	8a e3       	ldi	r24, 0x3A	; 58
     23c:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <H_Lcd_Void_LCDWriteCharacter>
    H_Lcd_Void_LCDWriteNumber(ptr->sec);
     240:	68 81       	ld	r22, Y
     242:	70 e0       	ldi	r23, 0x00	; 0
     244:	80 e0       	ldi	r24, 0x00	; 0
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	0e 94 d2 05 	call	0xba4	; 0xba4 <H_Lcd_Void_LCDWriteNumber>
    if((ptr->hours>=9)&&(ptr->min>0)){
     24c:	8a 81       	ldd	r24, Y+2	; 0x02
     24e:	89 30       	cpi	r24, 0x09	; 9
     250:	40 f0       	brcs	.+16     	; 0x262 <APP_RTC_Display_Time_and_Date+0xb2>
     252:	89 81       	ldd	r24, Y+1	; 0x01
     254:	88 23       	and	r24, r24
     256:	29 f0       	breq	.+10     	; 0x262 <APP_RTC_Display_Time_and_Date+0xb2>
    	H_Lcd_Void_LCDWriteString((u8*) " LATE");
     258:	83 ef       	ldi	r24, 0xF3	; 243
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	0e 94 bb 05 	call	0xb76	; 0xb76 <H_Lcd_Void_LCDWriteString>
     260:	04 c0       	rjmp	.+8      	; 0x26a <APP_RTC_Display_Time_and_Date+0xba>
    }
    else{
    	H_Lcd_Void_LCDWriteString((u8*) " welcome");
     262:	89 ef       	ldi	r24, 0xF9	; 249
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	0e 94 bb 05 	call	0xb76	; 0xb76 <H_Lcd_Void_LCDWriteString>
    }
}
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	08 95       	ret

00000270 <APP_Confirm_Attendance_Success>:
*  Reentrance       : Reentrant
*  parameters (in)  : None
*  parameters (out) : None
*  Return Value     : None
*************************************************************************/
void APP_Confirm_Attendance_Success(APP_EmpID copy_ID, Date_And_Time* CurrentDateAndTime_ptr){
     270:	0f 93       	push	r16
     272:	1f 93       	push	r17
     274:	cf 93       	push	r28
     276:	c8 2f       	mov	r28, r24
     278:	8b 01       	movw	r16, r22
	H_Lcd_Void_LCDClear();
     27a:	0e 94 ce 05 	call	0xb9c	; 0xb9c <H_Lcd_Void_LCDClear>
	/*LCD says Hi Tarek for ID 7, Hi youssef for ID 6 and Hi seif for ID 5 */
	if(copy_ID == TAREK_ID){
     27e:	c7 30       	cpi	r28, 0x07	; 7
     280:	49 f4       	brne	.+18     	; 0x294 <APP_Confirm_Attendance_Success+0x24>
		H_Lcd_Void_LCDWriteString((u8*) "Hi Tarek");
     282:	82 e0       	ldi	r24, 0x02	; 2
     284:	91 e0       	ldi	r25, 0x01	; 1
     286:	0e 94 bb 05 	call	0xb76	; 0xb76 <H_Lcd_Void_LCDWriteString>
		H_Lcd_Void_LCDGoTo(1,0);
     28a:	60 e0       	ldi	r22, 0x00	; 0
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	0e 94 31 06 	call	0xc62	; 0xc62 <H_Lcd_Void_LCDGoTo>
     292:	15 c0       	rjmp	.+42     	; 0x2be <APP_Confirm_Attendance_Success+0x4e>
	}
	else if(copy_ID == YOUSSEF_ID){
     294:	c6 30       	cpi	r28, 0x06	; 6
     296:	49 f4       	brne	.+18     	; 0x2aa <APP_Confirm_Attendance_Success+0x3a>
		H_Lcd_Void_LCDWriteString((u8*) "Hi Youssef");
     298:	8b e0       	ldi	r24, 0x0B	; 11
     29a:	91 e0       	ldi	r25, 0x01	; 1
     29c:	0e 94 bb 05 	call	0xb76	; 0xb76 <H_Lcd_Void_LCDWriteString>
		H_Lcd_Void_LCDGoTo(1,0);
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	0e 94 31 06 	call	0xc62	; 0xc62 <H_Lcd_Void_LCDGoTo>
     2a8:	0a c0       	rjmp	.+20     	; 0x2be <APP_Confirm_Attendance_Success+0x4e>
	}
	else if(copy_ID == SEIF_ID){
     2aa:	c5 30       	cpi	r28, 0x05	; 5
     2ac:	41 f4       	brne	.+16     	; 0x2be <APP_Confirm_Attendance_Success+0x4e>
		H_Lcd_Void_LCDWriteString((u8*) "Hi Seif");
     2ae:	86 e1       	ldi	r24, 0x16	; 22
     2b0:	91 e0       	ldi	r25, 0x01	; 1
     2b2:	0e 94 bb 05 	call	0xb76	; 0xb76 <H_Lcd_Void_LCDWriteString>
		H_Lcd_Void_LCDGoTo(1,0);
     2b6:	60 e0       	ldi	r22, 0x00	; 0
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	0e 94 31 06 	call	0xc62	; 0xc62 <H_Lcd_Void_LCDGoTo>
	}
	H_Lcd_Void_LCDWriteString((u8*) "Attendance success");
     2be:	8e e1       	ldi	r24, 0x1E	; 30
     2c0:	91 e0       	ldi	r25, 0x01	; 1
     2c2:	0e 94 bb 05 	call	0xb76	; 0xb76 <H_Lcd_Void_LCDWriteString>
	/*Get the current time and display it on LCD to show if late or not*/
	RTC_Get_Time(CurrentDateAndTime_ptr);
     2c6:	c8 01       	movw	r24, r16
     2c8:	0e 94 b8 06 	call	0xd70	; 0xd70 <RTC_Get_Time>
	APP_RTC_Display_Time_and_Date(CurrentDateAndTime_ptr);
     2cc:	c8 01       	movw	r24, r16
     2ce:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <APP_RTC_Display_Time_and_Date>
	/*Opens the door for the employee and the green led for 5 secs*/
	Relay_ON(RELAY_1_PIN);
     2d2:	85 e2       	ldi	r24, 0x25	; 37
     2d4:	0e 94 ad 06 	call	0xd5a	; 0xd5a <Relay_ON>
	H_LED_Void_LedOn(LED_GRN);
     2d8:	83 e0       	ldi	r24, 0x03	; 3
     2da:	0e 94 6f 06 	call	0xcde	; 0xcde <H_LED_Void_LedOn>
     2de:	2f e3       	ldi	r18, 0x3F	; 63
     2e0:	82 e4       	ldi	r24, 0x42	; 66
     2e2:	9f e0       	ldi	r25, 0x0F	; 15
     2e4:	21 50       	subi	r18, 0x01	; 1
     2e6:	80 40       	sbci	r24, 0x00	; 0
     2e8:	90 40       	sbci	r25, 0x00	; 0
     2ea:	e1 f7       	brne	.-8      	; 0x2e4 <APP_Confirm_Attendance_Success+0x74>
     2ec:	00 c0       	rjmp	.+0      	; 0x2ee <APP_Confirm_Attendance_Success+0x7e>
     2ee:	00 00       	nop
	_delay_ms(DISPLAY_FOR_5_SEC);
	Relay_OFF(RELAY_1_PIN);
     2f0:	85 e2       	ldi	r24, 0x25	; 37
     2f2:	0e 94 b1 06 	call	0xd62	; 0xd62 <Relay_OFF>
	H_LED_Void_LedOff(LED_GRN);
     2f6:	83 e0       	ldi	r24, 0x03	; 3
     2f8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <H_LED_Void_LedOff>
}
     2fc:	cf 91       	pop	r28
     2fe:	1f 91       	pop	r17
     300:	0f 91       	pop	r16
     302:	08 95       	ret

00000304 <APP_PutFingerToScan>:
*  parameters (in)  : None
*  parameters (out) : None
*  Return Value     : None
*************************************************************************/
void APP_PutFingerToScan(void){
	H_Lcd_Void_LCDClear();
     304:	0e 94 ce 05 	call	0xb9c	; 0xb9c <H_Lcd_Void_LCDClear>
	H_Lcd_Void_LCDWriteString((u8*) "Put finger to scan");
     308:	81 e3       	ldi	r24, 0x31	; 49
     30a:	91 e0       	ldi	r25, 0x01	; 1
     30c:	0e 94 bb 05 	call	0xb76	; 0xb76 <H_Lcd_Void_LCDWriteString>
     310:	08 95       	ret

00000312 <APP_WarningHandler>:
*  Reentrance       : Reentrant
*  parameters (in)  : WarningType
*  parameters (out) : None
*  Return Value     : user_action (GOBACK_BUTTON_PRESSED or MAIN_MENU_BUTTON_PRESSED)
*************************************************************************/
u8 APP_WarningHandler(APP_Warnings warningType){
     312:	cf 93       	push	r28
     314:	c8 2f       	mov	r28, r24
	* led red on  +  lcd warning display
	* wait  for the go back key to get pressed
	* then
	* initial state */
	u8 user_action = KEYPAD_RELEASED;
	H_LED_Void_LedOn(LED_RED);
     316:	84 e0       	ldi	r24, 0x04	; 4
     318:	0e 94 6f 06 	call	0xcde	; 0xcde <H_LED_Void_LedOn>
	H_Lcd_Void_LCDClear();
     31c:	0e 94 ce 05 	call	0xb9c	; 0xb9c <H_Lcd_Void_LCDClear>
	H_Lcd_Void_LCDWriteString((u8*) "Warning:");
     320:	84 e4       	ldi	r24, 0x44	; 68
     322:	91 e0       	ldi	r25, 0x01	; 1
     324:	0e 94 bb 05 	call	0xb76	; 0xb76 <H_Lcd_Void_LCDWriteString>
	H_Lcd_Void_LCDGoTo(1,0);
     328:	60 e0       	ldi	r22, 0x00	; 0
     32a:	81 e0       	ldi	r24, 0x01	; 1
     32c:	0e 94 31 06 	call	0xc62	; 0xc62 <H_Lcd_Void_LCDGoTo>
	/*Switch on warning type and print the warning on LCD*/
	switch (warningType){
     330:	c1 30       	cpi	r28, 0x01	; 1
     332:	81 f0       	breq	.+32     	; 0x354 <APP_WarningHandler+0x42>
     334:	28 f0       	brcs	.+10     	; 0x340 <APP_WarningHandler+0x2e>
     336:	c2 30       	cpi	r28, 0x02	; 2
     338:	91 f0       	breq	.+36     	; 0x35e <APP_WarningHandler+0x4c>
     33a:	ce 3f       	cpi	r28, 0xFE	; 254
     33c:	31 f0       	breq	.+12     	; 0x34a <APP_WarningHandler+0x38>
     33e:	13 c0       	rjmp	.+38     	; 0x366 <APP_WarningHandler+0x54>
	case ALREADY_TAKEN_ID:
		H_Lcd_Void_LCDWriteString((u8*) "ALREADY TAKEN ID");
     340:	8d e4       	ldi	r24, 0x4D	; 77
     342:	91 e0       	ldi	r25, 0x01	; 1
     344:	0e 94 bb 05 	call	0xb76	; 0xb76 <H_Lcd_Void_LCDWriteString>
	break;
     348:	0e c0       	rjmp	.+28     	; 0x366 <APP_WarningHandler+0x54>
	case OUT_OF_RANGE_ID:
		H_Lcd_Void_LCDWriteString((u8*) "OUT OF RANGE ID");
     34a:	8e e5       	ldi	r24, 0x5E	; 94
     34c:	91 e0       	ldi	r25, 0x01	; 1
     34e:	0e 94 bb 05 	call	0xb76	; 0xb76 <H_Lcd_Void_LCDWriteString>
	break;
     352:	09 c0       	rjmp	.+18     	; 0x366 <APP_WarningHandler+0x54>
	case ID_NOT_FOUND:
		H_Lcd_Void_LCDWriteString((u8*) "ID NOT FOUND");
     354:	8e e6       	ldi	r24, 0x6E	; 110
     356:	91 e0       	ldi	r25, 0x01	; 1
     358:	0e 94 bb 05 	call	0xb76	; 0xb76 <H_Lcd_Void_LCDWriteString>
	break;
     35c:	04 c0       	rjmp	.+8      	; 0x366 <APP_WarningHandler+0x54>
	case FINGERPRINT_NOT_FOUND:
		H_Lcd_Void_LCDWriteString((u8*) "FINGERPRINT NOTFOUND");
     35e:	8b e7       	ldi	r24, 0x7B	; 123
     360:	91 e0       	ldi	r25, 0x01	; 1
     362:	0e 94 bb 05 	call	0xb76	; 0xb76 <H_Lcd_Void_LCDWriteString>
	break;
	}
	H_Lcd_Void_LCDGoTo(2,0);
     366:	60 e0       	ldi	r22, 0x00	; 0
     368:	82 e0       	ldi	r24, 0x02	; 2
     36a:	0e 94 31 06 	call	0xc62	; 0xc62 <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteString((u8*) "C : Main Menu");
     36e:	80 e9       	ldi	r24, 0x90	; 144
     370:	91 e0       	ldi	r25, 0x01	; 1
     372:	0e 94 bb 05 	call	0xb76	; 0xb76 <H_Lcd_Void_LCDWriteString>
	/* sequence
	* led red on  +  lcd warning display
	* wait  for the go back key to get pressed
	* then
	* initial state */
	u8 user_action = KEYPAD_RELEASED;
     376:	c1 e0       	ldi	r28, 0x01	; 1
		H_Lcd_Void_LCDWriteString((u8*) "FINGERPRINT NOTFOUND");
	break;
	}
	H_Lcd_Void_LCDGoTo(2,0);
	H_Lcd_Void_LCDWriteString((u8*) "C : Main Menu");
	while(user_action != MAIN_MENU_BUTTON_PRESSED){
     378:	03 c0       	rjmp	.+6      	; 0x380 <APP_WarningHandler+0x6e>
		user_action=H_KeyPad_U8_KeyPadRead();
     37a:	0e 94 45 04 	call	0x88a	; 0x88a <H_KeyPad_U8_KeyPadRead>
     37e:	c8 2f       	mov	r28, r24
		H_Lcd_Void_LCDWriteString((u8*) "FINGERPRINT NOTFOUND");
	break;
	}
	H_Lcd_Void_LCDGoTo(2,0);
	H_Lcd_Void_LCDWriteString((u8*) "C : Main Menu");
	while(user_action != MAIN_MENU_BUTTON_PRESSED){
     380:	c3 34       	cpi	r28, 0x43	; 67
     382:	d9 f7       	brne	.-10     	; 0x37a <APP_WarningHandler+0x68>
		user_action=H_KeyPad_U8_KeyPadRead();
	}
	H_LED_Void_LedOff(LED_RED);
     384:	84 e0       	ldi	r24, 0x04	; 4
     386:	0e 94 8e 06 	call	0xd1c	; 0xd1c <H_LED_Void_LedOff>
	return user_action;
}
     38a:	8c 2f       	mov	r24, r28
     38c:	cf 91       	pop	r28
     38e:	08 95       	ret

00000390 <H_Void_EEPROMWrite>:
 *
 * Created: 3/27/2024 5:29:15 PM
 *  Author: seif
 */ 
#include "EEPROM_Interfac.h"
void H_Void_EEPROMWrite(u16 address, u8 data){
     390:	1f 93       	push	r17
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	ec 01       	movw	r28, r24
     398:	16 2f       	mov	r17, r22
	/*Address to Write = 0011 1010 1111*/  
	/*				   & 0011 0000 0000*/
	/*		0xA0	   |      1010 0000*/
	M_U8_I2C_Start();  
     39a:	0e 94 3b 09 	call	0x1276	; 0x1276 <M_U8_I2C_Start>
	/*SEND 1010 + E A9 A8 + W*/
	M_U8_I2C_SendSlaveAddressWithWrite((u8)(0xA0 | ((address & 0x300) >> 7))); 
     39e:	ce 01       	movw	r24, r28
     3a0:	88 27       	eor	r24, r24
     3a2:	93 70       	andi	r25, 0x03	; 3
     3a4:	88 0f       	add	r24, r24
     3a6:	89 2f       	mov	r24, r25
     3a8:	88 1f       	adc	r24, r24
     3aa:	99 0b       	sbc	r25, r25
     3ac:	91 95       	neg	r25
     3ae:	80 6a       	ori	r24, 0xA0	; 160
     3b0:	0e 94 46 09 	call	0x128c	; 0x128c <M_U8_I2C_SendSlaveAddressWithWrite>
	/*Complete Address to write data in*/
	M_U8_I2C_Write((u8) address); 
     3b4:	8c 2f       	mov	r24, r28
     3b6:	0e 94 63 09 	call	0x12c6	; 0x12c6 <M_U8_I2C_Write>
	M_U8_I2C_Write(data); 
     3ba:	81 2f       	mov	r24, r17
     3bc:	0e 94 63 09 	call	0x12c6	; 0x12c6 <M_U8_I2C_Write>
	M_Void_I2C_STOP(); 
     3c0:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_Void_I2C_STOP>
} 
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	1f 91       	pop	r17
     3ca:	08 95       	ret

000003cc <H_Void_EEPROMRead>:
u8 H_Void_EEPROMRead (u16 address){ 
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	8c 01       	movw	r16, r24
	u8 data;
	/*Write Address = 0011 1010 1111*/
	/*              & 0011 0000 0000*/
	/*              |      1010 0000*/
	M_U8_I2C_Start(); 
     3d6:	0e 94 3b 09 	call	0x1276	; 0x1276 <M_U8_I2C_Start>
	/*SEND 1010 + E A9 A8 + W*/
	M_U8_I2C_SendSlaveAddressWithWrite((u8)((0xA0) | ((address & 0x300) >> 7)));
     3da:	e8 01       	movw	r28, r16
     3dc:	cc 27       	eor	r28, r28
     3de:	d3 70       	andi	r29, 0x03	; 3
     3e0:	cc 0f       	add	r28, r28
     3e2:	cd 2f       	mov	r28, r29
     3e4:	cc 1f       	adc	r28, r28
     3e6:	dd 0b       	sbc	r29, r29
     3e8:	d1 95       	neg	r29
     3ea:	8c 2f       	mov	r24, r28
     3ec:	80 6a       	ori	r24, 0xA0	; 160
     3ee:	0e 94 46 09 	call	0x128c	; 0x128c <M_U8_I2C_SendSlaveAddressWithWrite>
	/*Complete address to read from*/ 
	M_U8_I2C_Write((u8) address);  
     3f2:	80 2f       	mov	r24, r16
     3f4:	0e 94 63 09 	call	0x12c6	; 0x12c6 <M_U8_I2C_Write>
	M_U8_I2C_Repeated_Start();  
     3f8:	0e 94 4f 09 	call	0x129e	; 0x129e <M_U8_I2C_Repeated_Start>
	M_U8_I2C_SendSlaveAddressWithRead((u8)(0xA0 | ((address & 0x300) >> 7) | 0x01)); 
     3fc:	8c 2f       	mov	r24, r28
     3fe:	81 6a       	ori	r24, 0xA1	; 161
     400:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <M_U8_I2C_SendSlaveAddressWithRead>
	data = M_U8_I2C_ReadWithNack(); 
     404:	0e 94 73 09 	call	0x12e6	; 0x12e6 <M_U8_I2C_ReadWithNack>
     408:	c8 2f       	mov	r28, r24
	M_Void_I2C_STOP(); 
     40a:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_Void_I2C_STOP>
	return data; 
     40e:	8c 2f       	mov	r24, r28
     410:	df 91       	pop	r29
     412:	cf 91       	pop	r28
     414:	1f 91       	pop	r17
     416:	0f 91       	pop	r16
     418:	08 95       	ret

0000041a <FingerP_send>:
	static u8 i = 0;
	AckPack [i] = RecivedByte; 
	if (i==11){
		i = 0;
	}
	else i++;
     41a:	1f 93       	push	r17
     41c:	cf 93       	push	r28
     41e:	df 93       	push	r29
     420:	18 2f       	mov	r17, r24
     422:	c6 2f       	mov	r28, r22
     424:	d7 2f       	mov	r29, r23
     426:	8f ee       	ldi	r24, 0xEF	; 239
     428:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     432:	8f ef       	ldi	r24, 0xFF	; 255
     434:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     438:	8f ef       	ldi	r24, 0xFF	; 255
     43a:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     43e:	8f ef       	ldi	r24, 0xFF	; 255
     440:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     444:	8f ef       	ldi	r24, 0xFF	; 255
     446:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     44a:	81 2f       	mov	r24, r17
     44c:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     450:	8d 2f       	mov	r24, r29
     452:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     456:	8c 2f       	mov	r24, r28
     458:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	1f 91       	pop	r17
     462:	08 95       	ret

00000464 <FingerPS_AuraLedConfig>:
     464:	67 e0       	ldi	r22, 0x07	; 7
     466:	70 e0       	ldi	r23, 0x00	; 0
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	0e 94 0d 02 	call	0x41a	; 0x41a <FingerP_send>
     46e:	85 e3       	ldi	r24, 0x35	; 53
     470:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     474:	82 e0       	ldi	r24, 0x02	; 2
     476:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     47a:	8f e0       	ldi	r24, 0x0F	; 15
     47c:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     480:	83 e0       	ldi	r24, 0x03	; 3
     482:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     492:	82 e5       	ldi	r24, 0x52	; 82
     494:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     498:	08 95       	ret

0000049a <FingerPS_genImg>:
     49a:	63 e0       	ldi	r22, 0x03	; 3
     49c:	70 e0       	ldi	r23, 0x00	; 0
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	0e 94 0d 02 	call	0x41a	; 0x41a <FingerP_send>
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     4b0:	85 e0       	ldi	r24, 0x05	; 5
     4b2:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     4b6:	08 95       	ret

000004b8 <FingerPS_convertImg1CharFile>:
     4b8:	8f ee       	ldi	r24, 0xEF	; 239
     4ba:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     4c4:	8f ef       	ldi	r24, 0xFF	; 255
     4c6:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     4ca:	8f ef       	ldi	r24, 0xFF	; 255
     4cc:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     4d0:	8f ef       	ldi	r24, 0xFF	; 255
     4d2:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     4d6:	8f ef       	ldi	r24, 0xFF	; 255
     4d8:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     4e8:	84 e0       	ldi	r24, 0x04	; 4
     4ea:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     4ee:	82 e0       	ldi	r24, 0x02	; 2
     4f0:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     500:	88 e0       	ldi	r24, 0x08	; 8
     502:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     506:	08 95       	ret

00000508 <FingerPS_convertImg2CharFile>:
     508:	8f ee       	ldi	r24, 0xEF	; 239
     50a:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     514:	8f ef       	ldi	r24, 0xFF	; 255
     516:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     51a:	8f ef       	ldi	r24, 0xFF	; 255
     51c:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     520:	8f ef       	ldi	r24, 0xFF	; 255
     522:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     526:	8f ef       	ldi	r24, 0xFF	; 255
     528:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     538:	84 e0       	ldi	r24, 0x04	; 4
     53a:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     53e:	82 e0       	ldi	r24, 0x02	; 2
     540:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     544:	82 e0       	ldi	r24, 0x02	; 2
     546:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     550:	89 e0       	ldi	r24, 0x09	; 9
     552:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     556:	08 95       	ret

00000558 <FingerPS_genTemplate>:
     558:	8f ee       	ldi	r24, 0xEF	; 239
     55a:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     564:	8f ef       	ldi	r24, 0xFF	; 255
     566:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     56a:	8f ef       	ldi	r24, 0xFF	; 255
     56c:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     570:	8f ef       	ldi	r24, 0xFF	; 255
     572:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     576:	8f ef       	ldi	r24, 0xFF	; 255
     578:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     588:	83 e0       	ldi	r24, 0x03	; 3
     58a:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     58e:	85 e0       	ldi	r24, 0x05	; 5
     590:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     59a:	89 e0       	ldi	r24, 0x09	; 9
     59c:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     5a0:	08 95       	ret

000005a2 <FingerPS_strTemplate>:
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	ec 01       	movw	r28, r24
     5a8:	66 e0       	ldi	r22, 0x06	; 6
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	0e 94 0d 02 	call	0x41a	; 0x41a <FingerP_send>
     5b2:	86 e0       	ldi	r24, 0x06	; 6
     5b4:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     5be:	8d 2f       	mov	r24, r29
     5c0:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     5c4:	8c 2f       	mov	r24, r28
     5c6:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     5ca:	ce 01       	movw	r24, r28
     5cc:	0e 96       	adiw	r24, 0x0e	; 14
     5ce:	89 2f       	mov	r24, r25
     5d0:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     5d4:	8c 2f       	mov	r24, r28
     5d6:	82 5f       	subi	r24, 0xF2	; 242
     5d8:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     5dc:	df 91       	pop	r29
     5de:	cf 91       	pop	r28
     5e0:	08 95       	ret

000005e2 <FingerPS_LoadCharFile>:
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	c8 2f       	mov	r28, r24
     5e8:	d9 2f       	mov	r29, r25
     5ea:	8f ee       	ldi	r24, 0xEF	; 239
     5ec:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     5f6:	8f ef       	ldi	r24, 0xFF	; 255
     5f8:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     5fc:	8f ef       	ldi	r24, 0xFF	; 255
     5fe:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     602:	8f ef       	ldi	r24, 0xFF	; 255
     604:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     608:	8f ef       	ldi	r24, 0xFF	; 255
     60a:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     61a:	86 e0       	ldi	r24, 0x06	; 6
     61c:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     620:	87 e0       	ldi	r24, 0x07	; 7
     622:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     626:	82 e0       	ldi	r24, 0x02	; 2
     628:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     62c:	8d 2f       	mov	r24, r29
     62e:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     632:	8c 2f       	mov	r24, r28
     634:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     63e:	84 e1       	ldi	r24, 0x14	; 20
     640:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	08 95       	ret

0000064a <FingerPS_match>:
     64a:	8f ee       	ldi	r24, 0xEF	; 239
     64c:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     656:	8f ef       	ldi	r24, 0xFF	; 255
     658:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     65c:	8f ef       	ldi	r24, 0xFF	; 255
     65e:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     662:	8f ef       	ldi	r24, 0xFF	; 255
     664:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     668:	8f ef       	ldi	r24, 0xFF	; 255
     66a:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     67a:	83 e0       	ldi	r24, 0x03	; 3
     67c:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     680:	83 e0       	ldi	r24, 0x03	; 3
     682:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     68c:	87 e0       	ldi	r24, 0x07	; 7
     68e:	0e 94 90 09 	call	0x1320	; 0x1320 <UART_sendByte>
     692:	08 95       	ret

00000694 <FingerPS_CheckAck>:
}
/********************************************* FUNCTION TO CHECK THE SUM OF EACH ACKNOWLEDGMENT PACK	***************/
u8 FingerPS_CheckAck (){
	u8 CheckResult;
	if (AckPack[11] == 0x0A){
     694:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <__data_end+0xb>
     698:	8a 30       	cpi	r24, 0x0A	; 10
     69a:	21 f4       	brne	.+8      	; 0x6a4 <FingerPS_CheckAck+0x10>
		CheckResult = true ;
		AckPack [11] = 0x00; 
     69c:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <__data_end+0xb>
}
/********************************************* FUNCTION TO CHECK THE SUM OF EACH ACKNOWLEDGMENT PACK	***************/
u8 FingerPS_CheckAck (){
	u8 CheckResult;
	if (AckPack[11] == 0x0A){
		CheckResult = true ;
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	08 95       	ret
		AckPack [11] = 0x00; 
	}
	else{
		CheckResult = false;
     6a4:	80 e0       	ldi	r24, 0x00	; 0
	}
	return CheckResult;
} 
     6a6:	08 95       	ret

000006a8 <FingerPS_SetNewFingerPrint>:
void FingerPS_SetNewFingerPrint (u16 address){
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
     6ac:	ec 01       	movw	r28, r24
	/*********************************************		FIRST IMAGE GENERATION	******************************************/
	RepeatGenImag1:
	FingerPS_genImg();
     6ae:	0e 94 4d 02 	call	0x49a	; 0x49a <FingerPS_genImg>
     6b2:	2f ef       	ldi	r18, 0xFF	; 255
     6b4:	81 ee       	ldi	r24, 0xE1	; 225
     6b6:	94 e0       	ldi	r25, 0x04	; 4
     6b8:	21 50       	subi	r18, 0x01	; 1
     6ba:	80 40       	sbci	r24, 0x00	; 0
     6bc:	90 40       	sbci	r25, 0x00	; 0
     6be:	e1 f7       	brne	.-8      	; 0x6b8 <FingerPS_SetNewFingerPrint+0x10>
     6c0:	00 c0       	rjmp	.+0      	; 0x6c2 <FingerPS_SetNewFingerPrint+0x1a>
     6c2:	00 00       	nop
	_delay_ms(100);
	if (FingerPS_CheckAck() == false) goto RepeatGenImag1; /*WAIT FOR ACK*/
     6c4:	0e 94 4a 03 	call	0x694	; 0x694 <FingerPS_CheckAck>
     6c8:	88 23       	and	r24, r24
     6ca:	89 f3       	breq	.-30     	; 0x6ae <FingerPS_SetNewFingerPrint+0x6>
	H_Lcd_Void_LCDWriteCharacter('*');
     6cc:	8a e2       	ldi	r24, 0x2A	; 42
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <H_Lcd_Void_LCDWriteCharacter>
	/*********************************************	FIRST CHARACTER FILE GENERATION	**************************************/
	RepeatConvertFile1:
	FingerPS_convertImg1CharFile();
     6d4:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <FingerPS_convertImg1CharFile>
     6d8:	2f ef       	ldi	r18, 0xFF	; 255
     6da:	81 ee       	ldi	r24, 0xE1	; 225
     6dc:	94 e0       	ldi	r25, 0x04	; 4
     6de:	21 50       	subi	r18, 0x01	; 1
     6e0:	80 40       	sbci	r24, 0x00	; 0
     6e2:	90 40       	sbci	r25, 0x00	; 0
     6e4:	e1 f7       	brne	.-8      	; 0x6de <FingerPS_SetNewFingerPrint+0x36>
     6e6:	00 c0       	rjmp	.+0      	; 0x6e8 <FingerPS_SetNewFingerPrint+0x40>
     6e8:	00 00       	nop
	_delay_ms(100);
	if (FingerPS_CheckAck() == false) goto RepeatConvertFile1; /*WAIT FOR ACK*/
     6ea:	0e 94 4a 03 	call	0x694	; 0x694 <FingerPS_CheckAck>
     6ee:	88 23       	and	r24, r24
     6f0:	89 f3       	breq	.-30     	; 0x6d4 <FingerPS_SetNewFingerPrint+0x2c>
	H_Lcd_Void_LCDWriteCharacter('*');
     6f2:	8a e2       	ldi	r24, 0x2A	; 42
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <H_Lcd_Void_LCDWriteCharacter>
	/*********************************************		SECOND IMAGE GENERATION		**************************************/
	RepeatGenImag2:
	FingerPS_genImg();
     6fa:	0e 94 4d 02 	call	0x49a	; 0x49a <FingerPS_genImg>
     6fe:	2f ef       	ldi	r18, 0xFF	; 255
     700:	81 ee       	ldi	r24, 0xE1	; 225
     702:	94 e0       	ldi	r25, 0x04	; 4
     704:	21 50       	subi	r18, 0x01	; 1
     706:	80 40       	sbci	r24, 0x00	; 0
     708:	90 40       	sbci	r25, 0x00	; 0
     70a:	e1 f7       	brne	.-8      	; 0x704 <FingerPS_SetNewFingerPrint+0x5c>
     70c:	00 c0       	rjmp	.+0      	; 0x70e <FingerPS_SetNewFingerPrint+0x66>
     70e:	00 00       	nop
	_delay_ms(100);
	if (FingerPS_CheckAck() == false) goto RepeatGenImag2;/*WAIT FOR ACK*/
     710:	0e 94 4a 03 	call	0x694	; 0x694 <FingerPS_CheckAck>
     714:	88 23       	and	r24, r24
     716:	89 f3       	breq	.-30     	; 0x6fa <FingerPS_SetNewFingerPrint+0x52>
	H_Lcd_Void_LCDWriteCharacter('*');
     718:	8a e2       	ldi	r24, 0x2A	; 42
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <H_Lcd_Void_LCDWriteCharacter>
	/*********************************************		SECONED CHAR FILE GENERATED		**********************************/
	RepeatConvertFile2:
	FingerPS_convertImg2CharFile();
     720:	0e 94 84 02 	call	0x508	; 0x508 <FingerPS_convertImg2CharFile>
     724:	2f ef       	ldi	r18, 0xFF	; 255
     726:	81 ee       	ldi	r24, 0xE1	; 225
     728:	94 e0       	ldi	r25, 0x04	; 4
     72a:	21 50       	subi	r18, 0x01	; 1
     72c:	80 40       	sbci	r24, 0x00	; 0
     72e:	90 40       	sbci	r25, 0x00	; 0
     730:	e1 f7       	brne	.-8      	; 0x72a <FingerPS_SetNewFingerPrint+0x82>
     732:	00 c0       	rjmp	.+0      	; 0x734 <FingerPS_SetNewFingerPrint+0x8c>
     734:	00 00       	nop
	_delay_ms(100);
	if (FingerPS_CheckAck() == false) goto RepeatConvertFile2;/*WAIT FOR ACK*/
     736:	0e 94 4a 03 	call	0x694	; 0x694 <FingerPS_CheckAck>
     73a:	88 23       	and	r24, r24
     73c:	89 f3       	breq	.-30     	; 0x720 <FingerPS_SetNewFingerPrint+0x78>
	H_Lcd_Void_LCDWriteCharacter('*');
     73e:	8a e2       	ldi	r24, 0x2A	; 42
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <H_Lcd_Void_LCDWriteCharacter>
	/********************************************		Generate Tempelate			**********************************/
	FingerPS_genTemplate();
     746:	0e 94 ac 02 	call	0x558	; 0x558 <FingerPS_genTemplate>
     74a:	2f ef       	ldi	r18, 0xFF	; 255
     74c:	89 e6       	ldi	r24, 0x69	; 105
     74e:	98 e1       	ldi	r25, 0x18	; 24
     750:	21 50       	subi	r18, 0x01	; 1
     752:	80 40       	sbci	r24, 0x00	; 0
     754:	90 40       	sbci	r25, 0x00	; 0
     756:	e1 f7       	brne	.-8      	; 0x750 <FingerPS_SetNewFingerPrint+0xa8>
     758:	00 c0       	rjmp	.+0      	; 0x75a <FingerPS_SetNewFingerPrint+0xb2>
     75a:	00 00       	nop
	_delay_ms(500);
	if (FingerPS_CheckAck() == false) goto RepeatGenImag1;/*WAIT FOR ACK*/
     75c:	0e 94 4a 03 	call	0x694	; 0x694 <FingerPS_CheckAck>
     760:	88 23       	and	r24, r24
     762:	09 f4       	brne	.+2      	; 0x766 <FingerPS_SetNewFingerPrint+0xbe>
     764:	a4 cf       	rjmp	.-184    	; 0x6ae <FingerPS_SetNewFingerPrint+0x6>
	H_Lcd_Void_LCDWriteCharacter('*');
     766:	8a e2       	ldi	r24, 0x2A	; 42
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <H_Lcd_Void_LCDWriteCharacter>
	/*******************************************		Tempelate Storing			***********************************/
	RepeatStrTemp:
	FingerPS_strTemplate(address);
     76e:	ce 01       	movw	r24, r28
     770:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <FingerPS_strTemplate>
     774:	2f ef       	ldi	r18, 0xFF	; 255
     776:	81 ee       	ldi	r24, 0xE1	; 225
     778:	94 e0       	ldi	r25, 0x04	; 4
     77a:	21 50       	subi	r18, 0x01	; 1
     77c:	80 40       	sbci	r24, 0x00	; 0
     77e:	90 40       	sbci	r25, 0x00	; 0
     780:	e1 f7       	brne	.-8      	; 0x77a <FingerPS_SetNewFingerPrint+0xd2>
     782:	00 c0       	rjmp	.+0      	; 0x784 <FingerPS_SetNewFingerPrint+0xdc>
     784:	00 00       	nop
	_delay_ms(100);
	if (FingerPS_CheckAck() == false) goto RepeatStrTemp;/*WAIT FOR ACK*/
     786:	0e 94 4a 03 	call	0x694	; 0x694 <FingerPS_CheckAck>
     78a:	88 23       	and	r24, r24
     78c:	81 f3       	breq	.-32     	; 0x76e <FingerPS_SetNewFingerPrint+0xc6>
H_Lcd_Void_LCDWriteCharacter('*');
     78e:	8a e2       	ldi	r24, 0x2A	; 42
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <H_Lcd_Void_LCDWriteCharacter>
}
     796:	df 91       	pop	r29
     798:	cf 91       	pop	r28
     79a:	08 95       	ret

0000079c <FingerPS_CheckOneToOneMatch>:
u8 FingerPS_CheckOneToOneMatch(u16 address){
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	ec 01       	movw	r28, r24
	u8 match_result; 
	/*******************************************		Generate Image to check one to one match	********************/
	RepeatCheckImagGen:
	FingerPS_genImg();
     7a2:	0e 94 4d 02 	call	0x49a	; 0x49a <FingerPS_genImg>
     7a6:	2f ef       	ldi	r18, 0xFF	; 255
     7a8:	81 ee       	ldi	r24, 0xE1	; 225
     7aa:	94 e0       	ldi	r25, 0x04	; 4
     7ac:	21 50       	subi	r18, 0x01	; 1
     7ae:	80 40       	sbci	r24, 0x00	; 0
     7b0:	90 40       	sbci	r25, 0x00	; 0
     7b2:	e1 f7       	brne	.-8      	; 0x7ac <FingerPS_CheckOneToOneMatch+0x10>
     7b4:	00 c0       	rjmp	.+0      	; 0x7b6 <FingerPS_CheckOneToOneMatch+0x1a>
     7b6:	00 00       	nop
	_delay_ms(100);
	if (FingerPS_CheckAck() == false) goto RepeatCheckImagGen; /*WAIT FOR ACK*/
     7b8:	0e 94 4a 03 	call	0x694	; 0x694 <FingerPS_CheckAck>
     7bc:	88 23       	and	r24, r24
     7be:	89 f3       	breq	.-30     	; 0x7a2 <FingerPS_CheckOneToOneMatch+0x6>
	/******************************************			Generate char from Check Image	****************************************/
	RepeatCharCheckFileGen:
	FingerPS_convertImg1CharFile();
     7c0:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <FingerPS_convertImg1CharFile>
     7c4:	2f ef       	ldi	r18, 0xFF	; 255
     7c6:	81 ee       	ldi	r24, 0xE1	; 225
     7c8:	94 e0       	ldi	r25, 0x04	; 4
     7ca:	21 50       	subi	r18, 0x01	; 1
     7cc:	80 40       	sbci	r24, 0x00	; 0
     7ce:	90 40       	sbci	r25, 0x00	; 0
     7d0:	e1 f7       	brne	.-8      	; 0x7ca <FingerPS_CheckOneToOneMatch+0x2e>
     7d2:	00 c0       	rjmp	.+0      	; 0x7d4 <FingerPS_CheckOneToOneMatch+0x38>
     7d4:	00 00       	nop
	_delay_ms(100);
	if (FingerPS_CheckAck() == false) goto RepeatCharCheckFileGen; /*WAIT FOR ACK*/
     7d6:	0e 94 4a 03 	call	0x694	; 0x694 <FingerPS_CheckAck>
     7da:	88 23       	and	r24, r24
     7dc:	89 f3       	breq	.-30     	; 0x7c0 <FingerPS_CheckOneToOneMatch+0x24>
	/******************************************			Load Char in char file 2	***********************************/
	RepeatLoadCharFile:
	FingerPS_LoadCharFile(address);
     7de:	ce 01       	movw	r24, r28
     7e0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <FingerPS_LoadCharFile>
     7e4:	2f ef       	ldi	r18, 0xFF	; 255
     7e6:	81 ee       	ldi	r24, 0xE1	; 225
     7e8:	94 e0       	ldi	r25, 0x04	; 4
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	80 40       	sbci	r24, 0x00	; 0
     7ee:	90 40       	sbci	r25, 0x00	; 0
     7f0:	e1 f7       	brne	.-8      	; 0x7ea <FingerPS_CheckOneToOneMatch+0x4e>
     7f2:	00 c0       	rjmp	.+0      	; 0x7f4 <FingerPS_CheckOneToOneMatch+0x58>
     7f4:	00 00       	nop
	_delay_ms(100);
	if (FingerPS_CheckAck() == false) goto RepeatLoadCharFile; /*Wait for ACK*/
     7f6:	0e 94 4a 03 	call	0x694	; 0x694 <FingerPS_CheckAck>
     7fa:	88 23       	and	r24, r24
     7fc:	81 f3       	breq	.-32     	; 0x7de <FingerPS_CheckOneToOneMatch+0x42>
	/******************************************			CHECK MATCH				****************************************/
	FingerPS_match();
     7fe:	0e 94 25 03 	call	0x64a	; 0x64a <FingerPS_match>
     802:	2f ef       	ldi	r18, 0xFF	; 255
     804:	81 ee       	ldi	r24, 0xE1	; 225
     806:	94 e0       	ldi	r25, 0x04	; 4
     808:	21 50       	subi	r18, 0x01	; 1
     80a:	80 40       	sbci	r24, 0x00	; 0
     80c:	90 40       	sbci	r25, 0x00	; 0
     80e:	e1 f7       	brne	.-8      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     810:	00 c0       	rjmp	.+0      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     812:	00 00       	nop
	_delay_ms(100); 
	if (AckPack[9] == 0x00){
     814:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <__data_end+0x9>
     818:	81 11       	cpse	r24, r1
     81a:	02 c0       	rjmp	.+4      	; 0x820 <__DATA_REGION_LENGTH__+0x20>
		match_result = MATCHED;
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	01 c0       	rjmp	.+2      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
	}
	else {
		match_result = NOTMATCHED; 
     820:	80 e0       	ldi	r24, 0x00	; 0
	} 
	return match_result; 
}
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	08 95       	ret

00000828 <H_KeyPad_Void_KeyPadInit>:
/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
void H_KeyPad_Void_KeyPadInit(void)
{
	M_DIO_Void_SetPinDirection(KEYPAD_R0_PIN,OUTPUT);
     828:	61 e0       	ldi	r22, 0x01	; 1
     82a:	83 e2       	ldi	r24, 0x23	; 35
     82c:	0e 94 c8 07 	call	0xf90	; 0xf90 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R1_PIN,OUTPUT);
     830:	61 e0       	ldi	r22, 0x01	; 1
     832:	82 e2       	ldi	r24, 0x22	; 34
     834:	0e 94 c8 07 	call	0xf90	; 0xf90 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R2_PIN,OUTPUT);
     838:	61 e0       	ldi	r22, 0x01	; 1
     83a:	81 e2       	ldi	r24, 0x21	; 33
     83c:	0e 94 c8 07 	call	0xf90	; 0xf90 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R3_PIN,OUTPUT);
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	80 e2       	ldi	r24, 0x20	; 32
     844:	0e 94 c8 07 	call	0xf90	; 0xf90 <M_DIO_Void_SetPinDirection>

	M_DIO_Void_SetPinValue(KEYPAD_R0_PIN,HIGH);
     848:	61 e0       	ldi	r22, 0x01	; 1
     84a:	83 e2       	ldi	r24, 0x23	; 35
     84c:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R1_PIN,HIGH);
     850:	61 e0       	ldi	r22, 0x01	; 1
     852:	82 e2       	ldi	r24, 0x22	; 34
     854:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R2_PIN,HIGH);
     858:	61 e0       	ldi	r22, 0x01	; 1
     85a:	81 e2       	ldi	r24, 0x21	; 33
     85c:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R3_PIN,HIGH);
     860:	61 e0       	ldi	r22, 0x01	; 1
     862:	80 e2       	ldi	r24, 0x20	; 32
     864:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinDirection(KEYPAD_C0_PIN,INPUT);
     868:	60 e0       	ldi	r22, 0x00	; 0
     86a:	8f e2       	ldi	r24, 0x2F	; 47
     86c:	0e 94 c8 07 	call	0xf90	; 0xf90 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C1_PIN,INPUT);
     870:	60 e0       	ldi	r22, 0x00	; 0
     872:	8e e2       	ldi	r24, 0x2E	; 46
     874:	0e 94 c8 07 	call	0xf90	; 0xf90 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C2_PIN,INPUT);
     878:	60 e0       	ldi	r22, 0x00	; 0
     87a:	8d e2       	ldi	r24, 0x2D	; 45
     87c:	0e 94 c8 07 	call	0xf90	; 0xf90 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C3_PIN,INPUT);
     880:	60 e0       	ldi	r22, 0x00	; 0
     882:	8b e2       	ldi	r24, 0x2B	; 43
     884:	0e 94 c8 07 	call	0xf90	; 0xf90 <M_DIO_Void_SetPinDirection>
     888:	08 95       	ret

0000088a <H_KeyPad_U8_KeyPadRead>:

/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
u8   H_KeyPad_U8_KeyPadRead(void)
{
     88a:	9f 92       	push	r9
     88c:	af 92       	push	r10
     88e:	bf 92       	push	r11
     890:	cf 92       	push	r12
     892:	df 92       	push	r13
     894:	ef 92       	push	r14
     896:	ff 92       	push	r15
     898:	0f 93       	push	r16
     89a:	1f 93       	push	r17
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	cd b7       	in	r28, 0x3d	; 61
     8a2:	de b7       	in	r29, 0x3e	; 62
     8a4:	68 97       	sbiw	r28, 0x18	; 24
     8a6:	0f b6       	in	r0, 0x3f	; 63
     8a8:	f8 94       	cli
     8aa:	de bf       	out	0x3e, r29	; 62
     8ac:	0f be       	out	0x3f, r0	; 63
     8ae:	cd bf       	out	0x3d, r28	; 61
	u8 Local_U8_KeypadRowPins[4] = { KEYPAD_R0_PIN , KEYPAD_R1_PIN , KEYPAD_R2_PIN , KEYPAD_R3_PIN };
     8b0:	83 e2       	ldi	r24, 0x23	; 35
     8b2:	89 83       	std	Y+1, r24	; 0x01
     8b4:	82 e2       	ldi	r24, 0x22	; 34
     8b6:	8a 83       	std	Y+2, r24	; 0x02
     8b8:	81 e2       	ldi	r24, 0x21	; 33
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	80 e2       	ldi	r24, 0x20	; 32
     8be:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_U8_KeypadColPins[4] = { KEYPAD_C0_PIN , KEYPAD_C1_PIN , KEYPAD_C2_PIN , KEYPAD_C3_PIN };
     8c0:	8f e2       	ldi	r24, 0x2F	; 47
     8c2:	8d 83       	std	Y+5, r24	; 0x05
     8c4:	8e e2       	ldi	r24, 0x2E	; 46
     8c6:	8e 83       	std	Y+6, r24	; 0x06
     8c8:	8d e2       	ldi	r24, 0x2D	; 45
     8ca:	8f 83       	std	Y+7, r24	; 0x07
     8cc:	8b e2       	ldi	r24, 0x2B	; 43
     8ce:	88 87       	std	Y+8, r24	; 0x08
#if   KEYPAD_MODEL   ==   KEYPAD_MODEL_A
	u8 Local_U8_KeypadValue [4][4] = {{ '1' , '2' , '3' , 'A' },
     8d0:	80 e1       	ldi	r24, 0x10	; 16
     8d2:	ec e7       	ldi	r30, 0x7C	; 124
     8d4:	f0 e0       	ldi	r31, 0x00	; 0
     8d6:	de 01       	movw	r26, r28
     8d8:	19 96       	adiw	r26, 0x09	; 9
     8da:	01 90       	ld	r0, Z+
     8dc:	0d 92       	st	X+, r0
     8de:	8a 95       	dec	r24
     8e0:	e1 f7       	brne	.-8      	; 0x8da <H_KeyPad_U8_KeyPadRead+0x50>
							          { 'C' , '0' , '=' , '/' }};
#endif
	u8 Local_U8_Reading    = KEYPAD_RELEASED;
	u8 Local_U8_RowCounter = 0;
	u8 Local_U8_ColCounter = 0;
	for(Local_U8_RowCounter = 0 ; Local_U8_RowCounter <= 3 ; Local_U8_RowCounter++)
     8e2:	d1 2c       	mov	r13, r1
	u8 Local_U8_KeypadValue [4][4] = {{ '7' , '8' , '9' , '+' },
			                          { '4' , '5' , '6' , '-' },
							          { '1' , '2' , '3' , '*' },
							          { 'C' , '0' , '=' , '/' }};
#endif
	u8 Local_U8_Reading    = KEYPAD_RELEASED;
     8e4:	99 24       	eor	r9, r9
     8e6:	93 94       	inc	r9
	u8 Local_U8_RowCounter = 0;
	u8 Local_U8_ColCounter = 0;
	for(Local_U8_RowCounter = 0 ; Local_U8_RowCounter <= 3 ; Local_U8_RowCounter++)
     8e8:	44 c0       	rjmp	.+136    	; 0x972 <H_KeyPad_U8_KeyPadRead+0xe8>
	{
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],LOW);
     8ea:	ad 2c       	mov	r10, r13
     8ec:	b1 2c       	mov	r11, r1
     8ee:	e1 e0       	ldi	r30, 0x01	; 1
     8f0:	f0 e0       	ldi	r31, 0x00	; 0
     8f2:	ec 0f       	add	r30, r28
     8f4:	fd 1f       	adc	r31, r29
     8f6:	ea 0d       	add	r30, r10
     8f8:	fb 1d       	adc	r31, r11
     8fa:	c0 80       	ld	r12, Z
     8fc:	60 e0       	ldi	r22, 0x00	; 0
     8fe:	8c 2d       	mov	r24, r12
     900:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
		for(Local_U8_ColCounter = 0 ; Local_U8_ColCounter <= 3 ; Local_U8_ColCounter++)
     904:	10 e0       	ldi	r17, 0x00	; 0
     906:	2e c0       	rjmp	.+92     	; 0x964 <H_KeyPad_U8_KeyPadRead+0xda>
		{
			if(M_DIO_Void_GetPinValue(Local_U8_KeypadColPins[Local_U8_ColCounter]) == KEYPAD_PRESSED)
     908:	e1 2e       	mov	r14, r17
     90a:	f1 2c       	mov	r15, r1
     90c:	e5 e0       	ldi	r30, 0x05	; 5
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	ec 0f       	add	r30, r28
     912:	fd 1f       	adc	r31, r29
     914:	ee 0d       	add	r30, r14
     916:	ff 1d       	adc	r31, r15
     918:	00 81       	ld	r16, Z
     91a:	80 2f       	mov	r24, r16
     91c:	0e 94 da 08 	call	0x11b4	; 0x11b4 <M_DIO_Void_GetPinValue>
     920:	81 11       	cpse	r24, r1
     922:	1f c0       	rjmp	.+62     	; 0x962 <H_KeyPad_U8_KeyPadRead+0xd8>
     924:	8f e0       	ldi	r24, 0x0F	; 15
     926:	97 e2       	ldi	r25, 0x27	; 39
     928:	01 97       	sbiw	r24, 0x01	; 1
     92a:	f1 f7       	brne	.-4      	; 0x928 <H_KeyPad_U8_KeyPadRead+0x9e>
     92c:	00 c0       	rjmp	.+0      	; 0x92e <H_KeyPad_U8_KeyPadRead+0xa4>
     92e:	00 00       	nop
			{
				_delay_ms(KEYPAD_DEBOUNCING_TIME);
				if(M_DIO_Void_GetPinValue(Local_U8_KeypadColPins[Local_U8_ColCounter]) == KEYPAD_PRESSED)
     930:	80 2f       	mov	r24, r16
     932:	0e 94 da 08 	call	0x11b4	; 0x11b4 <M_DIO_Void_GetPinValue>
     936:	81 11       	cpse	r24, r1
     938:	14 c0       	rjmp	.+40     	; 0x962 <H_KeyPad_U8_KeyPadRead+0xd8>
				{
					while(M_DIO_Void_GetPinValue(Local_U8_KeypadColPins[Local_U8_ColCounter]) == KEYPAD_PRESSED);
     93a:	80 2f       	mov	r24, r16
     93c:	0e 94 da 08 	call	0x11b4	; 0x11b4 <M_DIO_Void_GetPinValue>
     940:	88 23       	and	r24, r24
     942:	d9 f3       	breq	.-10     	; 0x93a <H_KeyPad_U8_KeyPadRead+0xb0>
					Local_U8_Reading = Local_U8_KeypadValue[Local_U8_RowCounter][Local_U8_ColCounter];
     944:	f5 01       	movw	r30, r10
     946:	ee 0f       	add	r30, r30
     948:	ff 1f       	adc	r31, r31
     94a:	ee 0f       	add	r30, r30
     94c:	ff 1f       	adc	r31, r31
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	8c 0f       	add	r24, r28
     954:	9d 1f       	adc	r25, r29
     956:	e8 0f       	add	r30, r24
     958:	f9 1f       	adc	r31, r25
     95a:	ee 0d       	add	r30, r14
     95c:	ff 1d       	adc	r31, r15
     95e:	90 84       	ldd	r9, Z+8	; 0x08
					break;
     960:	03 c0       	rjmp	.+6      	; 0x968 <H_KeyPad_U8_KeyPadRead+0xde>
	u8 Local_U8_RowCounter = 0;
	u8 Local_U8_ColCounter = 0;
	for(Local_U8_RowCounter = 0 ; Local_U8_RowCounter <= 3 ; Local_U8_RowCounter++)
	{
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],LOW);
		for(Local_U8_ColCounter = 0 ; Local_U8_ColCounter <= 3 ; Local_U8_ColCounter++)
     962:	1f 5f       	subi	r17, 0xFF	; 255
     964:	14 30       	cpi	r17, 0x04	; 4
     966:	80 f2       	brcs	.-96     	; 0x908 <H_KeyPad_U8_KeyPadRead+0x7e>
					break;
				}

			}
		}
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],HIGH);
     968:	61 e0       	ldi	r22, 0x01	; 1
     96a:	8c 2d       	mov	r24, r12
     96c:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
							          { 'C' , '0' , '=' , '/' }};
#endif
	u8 Local_U8_Reading    = KEYPAD_RELEASED;
	u8 Local_U8_RowCounter = 0;
	u8 Local_U8_ColCounter = 0;
	for(Local_U8_RowCounter = 0 ; Local_U8_RowCounter <= 3 ; Local_U8_RowCounter++)
     970:	d3 94       	inc	r13
     972:	93 e0       	ldi	r25, 0x03	; 3
     974:	9d 15       	cp	r25, r13
     976:	08 f0       	brcs	.+2      	; 0x97a <H_KeyPad_U8_KeyPadRead+0xf0>
     978:	b8 cf       	rjmp	.-144    	; 0x8ea <H_KeyPad_U8_KeyPadRead+0x60>
			}
		}
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],HIGH);
	}
return Local_U8_Reading;
}
     97a:	89 2d       	mov	r24, r9
     97c:	68 96       	adiw	r28, 0x18	; 24
     97e:	0f b6       	in	r0, 0x3f	; 63
     980:	f8 94       	cli
     982:	de bf       	out	0x3e, r29	; 62
     984:	0f be       	out	0x3f, r0	; 63
     986:	cd bf       	out	0x3d, r28	; 61
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	1f 91       	pop	r17
     98e:	0f 91       	pop	r16
     990:	ff 90       	pop	r15
     992:	ef 90       	pop	r14
     994:	df 90       	pop	r13
     996:	cf 90       	pop	r12
     998:	bf 90       	pop	r11
     99a:	af 90       	pop	r10
     99c:	9f 90       	pop	r9
     99e:	08 95       	ret

000009a0 <H_Lcd_Void_LCDWriteCharacter>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCharacter(u8 Copy_U8_Character)
{
     9a0:	cf 93       	push	r28
     9a2:	c8 2f       	mov	r28, r24
	M_DIO_Void_SetPinValue(LCD_RS_PIN,HIGH);
     9a4:	61 e0       	ldi	r22, 0x01	; 1
     9a6:	8d e0       	ldi	r24, 0x0D	; 13
     9a8:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,4));
     9ac:	c4 fb       	bst	r28, 4
     9ae:	66 27       	eor	r22, r22
     9b0:	60 f9       	bld	r22, 0
     9b2:	84 e1       	ldi	r24, 0x14	; 20
     9b4:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,5));
     9b8:	c5 fb       	bst	r28, 5
     9ba:	66 27       	eor	r22, r22
     9bc:	60 f9       	bld	r22, 0
     9be:	85 e1       	ldi	r24, 0x15	; 21
     9c0:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,6));
     9c4:	c6 fb       	bst	r28, 6
     9c6:	66 27       	eor	r22, r22
     9c8:	60 f9       	bld	r22, 0
     9ca:	86 e1       	ldi	r24, 0x16	; 22
     9cc:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,7));
     9d0:	6c 2f       	mov	r22, r28
     9d2:	66 1f       	adc	r22, r22
     9d4:	66 27       	eor	r22, r22
     9d6:	66 1f       	adc	r22, r22
     9d8:	88 e1       	ldi	r24, 0x18	; 24
     9da:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
     9de:	61 e0       	ldi	r22, 0x01	; 1
     9e0:	8c e0       	ldi	r24, 0x0C	; 12
     9e2:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
     9e6:	8f e9       	ldi	r24, 0x9F	; 159
     9e8:	9f e0       	ldi	r25, 0x0F	; 15
     9ea:	01 97       	sbiw	r24, 0x01	; 1
     9ec:	f1 f7       	brne	.-4      	; 0x9ea <H_Lcd_Void_LCDWriteCharacter+0x4a>
     9ee:	00 c0       	rjmp	.+0      	; 0x9f0 <H_Lcd_Void_LCDWriteCharacter+0x50>
     9f0:	00 00       	nop
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
     9f2:	60 e0       	ldi	r22, 0x00	; 0
     9f4:	8c e0       	ldi	r24, 0x0C	; 12
     9f6:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
     9fa:	8f e9       	ldi	r24, 0x9F	; 159
     9fc:	9f e0       	ldi	r25, 0x0F	; 15
     9fe:	01 97       	sbiw	r24, 0x01	; 1
     a00:	f1 f7       	brne	.-4      	; 0x9fe <H_Lcd_Void_LCDWriteCharacter+0x5e>
     a02:	00 c0       	rjmp	.+0      	; 0xa04 <H_Lcd_Void_LCDWriteCharacter+0x64>
     a04:	00 00       	nop
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,0));
     a06:	6c 2f       	mov	r22, r28
     a08:	61 70       	andi	r22, 0x01	; 1
     a0a:	84 e1       	ldi	r24, 0x14	; 20
     a0c:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,1));
     a10:	c1 fb       	bst	r28, 1
     a12:	66 27       	eor	r22, r22
     a14:	60 f9       	bld	r22, 0
     a16:	85 e1       	ldi	r24, 0x15	; 21
     a18:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,2));
     a1c:	c2 fb       	bst	r28, 2
     a1e:	66 27       	eor	r22, r22
     a20:	60 f9       	bld	r22, 0
     a22:	86 e1       	ldi	r24, 0x16	; 22
     a24:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,3));
     a28:	c3 fb       	bst	r28, 3
     a2a:	66 27       	eor	r22, r22
     a2c:	60 f9       	bld	r22, 0
     a2e:	88 e1       	ldi	r24, 0x18	; 24
     a30:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
     a34:	61 e0       	ldi	r22, 0x01	; 1
     a36:	8c e0       	ldi	r24, 0x0C	; 12
     a38:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
     a3c:	8f e9       	ldi	r24, 0x9F	; 159
     a3e:	9f e0       	ldi	r25, 0x0F	; 15
     a40:	01 97       	sbiw	r24, 0x01	; 1
     a42:	f1 f7       	brne	.-4      	; 0xa40 <H_Lcd_Void_LCDWriteCharacter+0xa0>
     a44:	00 c0       	rjmp	.+0      	; 0xa46 <H_Lcd_Void_LCDWriteCharacter+0xa6>
     a46:	00 00       	nop
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	8c e0       	ldi	r24, 0x0C	; 12
     a4c:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
     a50:	8f e1       	ldi	r24, 0x1F	; 31
     a52:	9e e4       	ldi	r25, 0x4E	; 78
     a54:	01 97       	sbiw	r24, 0x01	; 1
     a56:	f1 f7       	brne	.-4      	; 0xa54 <H_Lcd_Void_LCDWriteCharacter+0xb4>
     a58:	00 c0       	rjmp	.+0      	; 0xa5a <H_Lcd_Void_LCDWriteCharacter+0xba>
     a5a:	00 00       	nop
	_delay_ms(5);
#endif
}
     a5c:	cf 91       	pop	r28
     a5e:	08 95       	ret

00000a60 <H_Lcd_Void_LCDWriteCommand>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCommand(u8 Copy_U8_Command)
{
     a60:	cf 93       	push	r28
     a62:	c8 2f       	mov	r28, r24
	M_DIO_Void_SetPinValue(LCD_RS_PIN,LOW);
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	8d e0       	ldi	r24, 0x0D	; 13
     a68:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,4));
     a6c:	c4 fb       	bst	r28, 4
     a6e:	66 27       	eor	r22, r22
     a70:	60 f9       	bld	r22, 0
     a72:	84 e1       	ldi	r24, 0x14	; 20
     a74:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,5));
     a78:	c5 fb       	bst	r28, 5
     a7a:	66 27       	eor	r22, r22
     a7c:	60 f9       	bld	r22, 0
     a7e:	85 e1       	ldi	r24, 0x15	; 21
     a80:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,6));
     a84:	c6 fb       	bst	r28, 6
     a86:	66 27       	eor	r22, r22
     a88:	60 f9       	bld	r22, 0
     a8a:	86 e1       	ldi	r24, 0x16	; 22
     a8c:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,7));
     a90:	6c 2f       	mov	r22, r28
     a92:	66 1f       	adc	r22, r22
     a94:	66 27       	eor	r22, r22
     a96:	66 1f       	adc	r22, r22
     a98:	88 e1       	ldi	r24, 0x18	; 24
     a9a:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
     a9e:	61 e0       	ldi	r22, 0x01	; 1
     aa0:	8c e0       	ldi	r24, 0x0C	; 12
     aa2:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
     aa6:	8f e9       	ldi	r24, 0x9F	; 159
     aa8:	9f e0       	ldi	r25, 0x0F	; 15
     aaa:	01 97       	sbiw	r24, 0x01	; 1
     aac:	f1 f7       	brne	.-4      	; 0xaaa <H_Lcd_Void_LCDWriteCommand+0x4a>
     aae:	00 c0       	rjmp	.+0      	; 0xab0 <H_Lcd_Void_LCDWriteCommand+0x50>
     ab0:	00 00       	nop
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	8c e0       	ldi	r24, 0x0C	; 12
     ab6:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
     aba:	8f e9       	ldi	r24, 0x9F	; 159
     abc:	9f e0       	ldi	r25, 0x0F	; 15
     abe:	01 97       	sbiw	r24, 0x01	; 1
     ac0:	f1 f7       	brne	.-4      	; 0xabe <H_Lcd_Void_LCDWriteCommand+0x5e>
     ac2:	00 c0       	rjmp	.+0      	; 0xac4 <H_Lcd_Void_LCDWriteCommand+0x64>
     ac4:	00 00       	nop
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,0));
     ac6:	6c 2f       	mov	r22, r28
     ac8:	61 70       	andi	r22, 0x01	; 1
     aca:	84 e1       	ldi	r24, 0x14	; 20
     acc:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,1));
     ad0:	c1 fb       	bst	r28, 1
     ad2:	66 27       	eor	r22, r22
     ad4:	60 f9       	bld	r22, 0
     ad6:	85 e1       	ldi	r24, 0x15	; 21
     ad8:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,2));
     adc:	c2 fb       	bst	r28, 2
     ade:	66 27       	eor	r22, r22
     ae0:	60 f9       	bld	r22, 0
     ae2:	86 e1       	ldi	r24, 0x16	; 22
     ae4:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,3));
     ae8:	c3 fb       	bst	r28, 3
     aea:	66 27       	eor	r22, r22
     aec:	60 f9       	bld	r22, 0
     aee:	88 e1       	ldi	r24, 0x18	; 24
     af0:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
     af4:	61 e0       	ldi	r22, 0x01	; 1
     af6:	8c e0       	ldi	r24, 0x0C	; 12
     af8:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
     afc:	8f e9       	ldi	r24, 0x9F	; 159
     afe:	9f e0       	ldi	r25, 0x0F	; 15
     b00:	01 97       	sbiw	r24, 0x01	; 1
     b02:	f1 f7       	brne	.-4      	; 0xb00 <H_Lcd_Void_LCDWriteCommand+0xa0>
     b04:	00 c0       	rjmp	.+0      	; 0xb06 <H_Lcd_Void_LCDWriteCommand+0xa6>
     b06:	00 00       	nop
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	8c e0       	ldi	r24, 0x0C	; 12
     b0c:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
     b10:	8f e1       	ldi	r24, 0x1F	; 31
     b12:	9e e4       	ldi	r25, 0x4E	; 78
     b14:	01 97       	sbiw	r24, 0x01	; 1
     b16:	f1 f7       	brne	.-4      	; 0xb14 <H_Lcd_Void_LCDWriteCommand+0xb4>
     b18:	00 c0       	rjmp	.+0      	; 0xb1a <H_Lcd_Void_LCDWriteCommand+0xba>
     b1a:	00 00       	nop
	_delay_ms(5);
#endif
}
     b1c:	cf 91       	pop	r28
     b1e:	08 95       	ret

00000b20 <H_Lcd_Void_LCDInit>:

	H_Lcd_Void_LCDWriteCommand(LCD_8_BIT_MODE_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinDirection(LCD_D4_PIN,OUTPUT);
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	84 e1       	ldi	r24, 0x14	; 20
     b24:	0e 94 c8 07 	call	0xf90	; 0xf90 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D5_PIN,OUTPUT);
     b28:	61 e0       	ldi	r22, 0x01	; 1
     b2a:	85 e1       	ldi	r24, 0x15	; 21
     b2c:	0e 94 c8 07 	call	0xf90	; 0xf90 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D6_PIN,OUTPUT);
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	86 e1       	ldi	r24, 0x16	; 22
     b34:	0e 94 c8 07 	call	0xf90	; 0xf90 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D7_PIN,OUTPUT);
     b38:	61 e0       	ldi	r22, 0x01	; 1
     b3a:	88 e1       	ldi	r24, 0x18	; 24
     b3c:	0e 94 c8 07 	call	0xf90	; 0xf90 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RS_PIN,OUTPUT);
     b40:	61 e0       	ldi	r22, 0x01	; 1
     b42:	8d e0       	ldi	r24, 0x0D	; 13
     b44:	0e 94 c8 07 	call	0xf90	; 0xf90 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_EN_PIN,OUTPUT);
     b48:	61 e0       	ldi	r22, 0x01	; 1
     b4a:	8c e0       	ldi	r24, 0x0C	; 12
     b4c:	0e 94 c8 07 	call	0xf90	; 0xf90 <M_DIO_Void_SetPinDirection>

	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_1);
     b50:	83 e3       	ldi	r24, 0x33	; 51
     b52:	0e 94 30 05 	call	0xa60	; 0xa60 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_2);
     b56:	82 e3       	ldi	r24, 0x32	; 50
     b58:	0e 94 30 05 	call	0xa60	; 0xa60 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_3);
     b5c:	88 e2       	ldi	r24, 0x28	; 40
     b5e:	0e 94 30 05 	call	0xa60	; 0xa60 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
     b62:	8c e0       	ldi	r24, 0x0C	; 12
     b64:	0e 94 30 05 	call	0xa60	; 0xa60 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
     b68:	82 e0       	ldi	r24, 0x02	; 2
     b6a:	0e 94 30 05 	call	0xa60	; 0xa60 <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	0e 94 30 05 	call	0xa60	; 0xa60 <H_Lcd_Void_LCDWriteCommand>
     b74:	08 95       	ret

00000b76 <H_Lcd_Void_LCDWriteString>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
     b76:	0f 93       	push	r16
     b78:	1f 93       	push	r17
     b7a:	cf 93       	push	r28
     b7c:	8c 01       	movw	r16, r24
	u8 Local_U8_Counter = 0;
     b7e:	c0 e0       	ldi	r28, 0x00	; 0
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
     b80:	03 c0       	rjmp	.+6      	; 0xb88 <H_Lcd_Void_LCDWriteString+0x12>
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
     b82:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Counter++;
     b86:	cf 5f       	subi	r28, 0xFF	; 255
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
	u8 Local_U8_Counter = 0;
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
     b88:	f8 01       	movw	r30, r16
     b8a:	ec 0f       	add	r30, r28
     b8c:	f1 1d       	adc	r31, r1
     b8e:	80 81       	ld	r24, Z
     b90:	81 11       	cpse	r24, r1
     b92:	f7 cf       	rjmp	.-18     	; 0xb82 <H_Lcd_Void_LCDWriteString+0xc>
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
     b94:	cf 91       	pop	r28
     b96:	1f 91       	pop	r17
     b98:	0f 91       	pop	r16
     b9a:	08 95       	ret

00000b9c <H_Lcd_Void_LCDClear>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDClear()
{
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	0e 94 30 05 	call	0xa60	; 0xa60 <H_Lcd_Void_LCDWriteCommand>
     ba2:	08 95       	ret

00000ba4 <H_Lcd_Void_LCDWriteNumber>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteNumber(s32 Copy_S32_Number)
{
     ba4:	cf 92       	push	r12
     ba6:	df 92       	push	r13
     ba8:	ef 92       	push	r14
     baa:	ff 92       	push	r15
     bac:	1f 93       	push	r17
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
     bb2:	cd b7       	in	r28, 0x3d	; 61
     bb4:	de b7       	in	r29, 0x3e	; 62
     bb6:	2a 97       	sbiw	r28, 0x0a	; 10
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	f8 94       	cli
     bbc:	de bf       	out	0x3e, r29	; 62
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	cd bf       	out	0x3d, r28	; 61
     bc2:	6b 01       	movw	r12, r22
     bc4:	7c 01       	movw	r14, r24
	s8 Local_S8_Counter = 0;
	u8 Local_U8_Arr[10] = {0};
     bc6:	fe 01       	movw	r30, r28
     bc8:	31 96       	adiw	r30, 0x01	; 1
     bca:	8a e0       	ldi	r24, 0x0A	; 10
     bcc:	df 01       	movw	r26, r30
     bce:	1d 92       	st	X+, r1
     bd0:	8a 95       	dec	r24
     bd2:	e9 f7       	brne	.-6      	; 0xbce <H_Lcd_Void_LCDWriteNumber+0x2a>
	if(Copy_S32_Number < 0)
     bd4:	ff 20       	and	r15, r15
     bd6:	5c f4       	brge	.+22     	; 0xbee <H_Lcd_Void_LCDWriteNumber+0x4a>
	{
		Copy_S32_Number = Copy_S32_Number * -1;
     bd8:	f0 94       	com	r15
     bda:	e0 94       	com	r14
     bdc:	d0 94       	com	r13
     bde:	c0 94       	com	r12
     be0:	c1 1c       	adc	r12, r1
     be2:	d1 1c       	adc	r13, r1
     be4:	e1 1c       	adc	r14, r1
     be6:	f1 1c       	adc	r15, r1
		H_Lcd_Void_LCDWriteCharacter('-');
     be8:	8d e2       	ldi	r24, 0x2D	; 45
     bea:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <H_Lcd_Void_LCDWriteCharacter>

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteNumber(s32 Copy_S32_Number)
{
     bee:	10 e0       	ldi	r17, 0x00	; 0
		H_Lcd_Void_LCDWriteCharacter('-');
	}

	do
	{
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
     bf0:	c7 01       	movw	r24, r14
     bf2:	b6 01       	movw	r22, r12
     bf4:	2a e0       	ldi	r18, 0x0A	; 10
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e0       	ldi	r20, 0x00	; 0
     bfa:	50 e0       	ldi	r21, 0x00	; 0
     bfc:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__divmodsi4>
     c00:	e1 e0       	ldi	r30, 0x01	; 1
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	ec 0f       	add	r30, r28
     c06:	fd 1f       	adc	r31, r29
     c08:	e1 0f       	add	r30, r17
     c0a:	f1 1d       	adc	r31, r1
     c0c:	17 fd       	sbrc	r17, 7
     c0e:	fa 95       	dec	r31
     c10:	60 83       	st	Z, r22
		Copy_S32_Number                = Copy_S32_Number / 10;
     c12:	c2 2e       	mov	r12, r18
     c14:	d3 2e       	mov	r13, r19
     c16:	e4 2e       	mov	r14, r20
     c18:	f5 2e       	mov	r15, r21
		Local_S8_Counter++;
     c1a:	1f 5f       	subi	r17, 0xFF	; 255
	}while(Copy_S32_Number != 0);
     c1c:	c1 14       	cp	r12, r1
     c1e:	d1 04       	cpc	r13, r1
     c20:	e1 04       	cpc	r14, r1
     c22:	f1 04       	cpc	r15, r1
     c24:	29 f7       	brne	.-54     	; 0xbf0 <H_Lcd_Void_LCDWriteNumber+0x4c>
     c26:	0d c0       	rjmp	.+26     	; 0xc42 <H_Lcd_Void_LCDWriteNumber+0x9e>

	while(Local_S8_Counter > 0)
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
     c28:	11 50       	subi	r17, 0x01	; 1
     c2a:	e1 e0       	ldi	r30, 0x01	; 1
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	ec 0f       	add	r30, r28
     c30:	fd 1f       	adc	r31, r29
     c32:	e1 0f       	add	r30, r17
     c34:	f1 1d       	adc	r31, r1
     c36:	17 fd       	sbrc	r17, 7
     c38:	fa 95       	dec	r31
     c3a:	80 81       	ld	r24, Z
     c3c:	80 5d       	subi	r24, 0xD0	; 208
     c3e:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
		Copy_S32_Number                = Copy_S32_Number / 10;
		Local_S8_Counter++;
	}while(Copy_S32_Number != 0);

	while(Local_S8_Counter > 0)
     c42:	11 16       	cp	r1, r17
     c44:	8c f3       	brlt	.-30     	; 0xc28 <H_Lcd_Void_LCDWriteNumber+0x84>
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
	}
}
     c46:	2a 96       	adiw	r28, 0x0a	; 10
     c48:	0f b6       	in	r0, 0x3f	; 63
     c4a:	f8 94       	cli
     c4c:	de bf       	out	0x3e, r29	; 62
     c4e:	0f be       	out	0x3f, r0	; 63
     c50:	cd bf       	out	0x3d, r28	; 61
     c52:	df 91       	pop	r29
     c54:	cf 91       	pop	r28
     c56:	1f 91       	pop	r17
     c58:	ff 90       	pop	r15
     c5a:	ef 90       	pop	r14
     c5c:	df 90       	pop	r13
     c5e:	cf 90       	pop	r12
     c60:	08 95       	ret

00000c62 <H_Lcd_Void_LCDGoTo>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDGoTo(u8 Copy_U8_Row,u8 Copy_U8_Col)
{
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	00 d0       	rcall	.+0      	; 0xc68 <H_Lcd_Void_LCDGoTo+0x6>
     c68:	00 d0       	rcall	.+0      	; 0xc6a <H_Lcd_Void_LCDGoTo+0x8>
     c6a:	cd b7       	in	r28, 0x3d	; 61
     c6c:	de b7       	in	r29, 0x3e	; 62
	u8 Local_U8_Arr [4] = {LCD_R0_COMMAND , LCD_R1_COMMAND , LCD_R2_COMMAND , LCD_R3_COMMAND};
     c6e:	90 e8       	ldi	r25, 0x80	; 128
     c70:	99 83       	std	Y+1, r25	; 0x01
     c72:	90 ec       	ldi	r25, 0xC0	; 192
     c74:	9a 83       	std	Y+2, r25	; 0x02
     c76:	94 e9       	ldi	r25, 0x94	; 148
     c78:	9b 83       	std	Y+3, r25	; 0x03
     c7a:	94 ed       	ldi	r25, 0xD4	; 212
     c7c:	9c 83       	std	Y+4, r25	; 0x04
	H_Lcd_Void_LCDWriteCommand(Local_U8_Arr[Copy_U8_Row] + Copy_U8_Col);
     c7e:	e1 e0       	ldi	r30, 0x01	; 1
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	ec 0f       	add	r30, r28
     c84:	fd 1f       	adc	r31, r29
     c86:	e8 0f       	add	r30, r24
     c88:	f1 1d       	adc	r31, r1
     c8a:	80 81       	ld	r24, Z
     c8c:	86 0f       	add	r24, r22
     c8e:	0e 94 30 05 	call	0xa60	; 0xa60 <H_Lcd_Void_LCDWriteCommand>
}
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
     c96:	0f 90       	pop	r0
     c98:	0f 90       	pop	r0
     c9a:	df 91       	pop	r29
     c9c:	cf 91       	pop	r28
     c9e:	08 95       	ret

00000ca0 <H_LED_Void_LedInit>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedInit(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
     ca0:	82 30       	cpi	r24, 0x02	; 2
     ca2:	71 f0       	breq	.+28     	; 0xcc0 <H_LED_Void_LedInit+0x20>
     ca4:	18 f4       	brcc	.+6      	; 0xcac <H_LED_Void_LedInit+0xc>
     ca6:	81 30       	cpi	r24, 0x01	; 1
     ca8:	31 f0       	breq	.+12     	; 0xcb6 <H_LED_Void_LedInit+0x16>
     caa:	08 95       	ret
     cac:	83 30       	cpi	r24, 0x03	; 3
     cae:	69 f0       	breq	.+26     	; 0xcca <H_LED_Void_LedInit+0x2a>
     cb0:	84 30       	cpi	r24, 0x04	; 4
     cb2:	81 f0       	breq	.+32     	; 0xcd4 <H_LED_Void_LedInit+0x34>
     cb4:	08 95       	ret
	{
	case LED_YEL: M_DIO_Void_SetPinDirection(LED_YEL_PIN,OUTPUT); break;
     cb6:	61 e0       	ldi	r22, 0x01	; 1
     cb8:	80 e1       	ldi	r24, 0x10	; 16
     cba:	0e 94 c8 07 	call	0xf90	; 0xf90 <M_DIO_Void_SetPinDirection>
     cbe:	08 95       	ret
	case LED_BLU: M_DIO_Void_SetPinDirection(LED_BLU_PIN,OUTPUT); break;
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	8f e0       	ldi	r24, 0x0F	; 15
     cc4:	0e 94 c8 07 	call	0xf90	; 0xf90 <M_DIO_Void_SetPinDirection>
     cc8:	08 95       	ret
	case LED_GRN: M_DIO_Void_SetPinDirection(LED_GRN_PIN,OUTPUT); break;
     cca:	61 e0       	ldi	r22, 0x01	; 1
     ccc:	8e e0       	ldi	r24, 0x0E	; 14
     cce:	0e 94 c8 07 	call	0xf90	; 0xf90 <M_DIO_Void_SetPinDirection>
     cd2:	08 95       	ret
	case LED_RED: M_DIO_Void_SetPinDirection(LED_RED_PIN,OUTPUT); break;
     cd4:	61 e0       	ldi	r22, 0x01	; 1
     cd6:	8b e1       	ldi	r24, 0x1B	; 27
     cd8:	0e 94 c8 07 	call	0xf90	; 0xf90 <M_DIO_Void_SetPinDirection>
     cdc:	08 95       	ret

00000cde <H_LED_Void_LedOn>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedOn(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
     cde:	82 30       	cpi	r24, 0x02	; 2
     ce0:	71 f0       	breq	.+28     	; 0xcfe <H_LED_Void_LedOn+0x20>
     ce2:	18 f4       	brcc	.+6      	; 0xcea <H_LED_Void_LedOn+0xc>
     ce4:	81 30       	cpi	r24, 0x01	; 1
     ce6:	31 f0       	breq	.+12     	; 0xcf4 <H_LED_Void_LedOn+0x16>
     ce8:	08 95       	ret
     cea:	83 30       	cpi	r24, 0x03	; 3
     cec:	69 f0       	breq	.+26     	; 0xd08 <H_LED_Void_LedOn+0x2a>
     cee:	84 30       	cpi	r24, 0x04	; 4
     cf0:	81 f0       	breq	.+32     	; 0xd12 <H_LED_Void_LedOn+0x34>
     cf2:	08 95       	ret
	{
	case LED_YEL: M_DIO_Void_SetPinValue(LED_YEL_PIN,HIGH); break;
     cf4:	61 e0       	ldi	r22, 0x01	; 1
     cf6:	80 e1       	ldi	r24, 0x10	; 16
     cf8:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
     cfc:	08 95       	ret
	case LED_BLU: M_DIO_Void_SetPinValue(LED_BLU_PIN,HIGH); break;
     cfe:	61 e0       	ldi	r22, 0x01	; 1
     d00:	8f e0       	ldi	r24, 0x0F	; 15
     d02:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
     d06:	08 95       	ret
	case LED_GRN: M_DIO_Void_SetPinValue(LED_GRN_PIN,HIGH); break;
     d08:	61 e0       	ldi	r22, 0x01	; 1
     d0a:	8e e0       	ldi	r24, 0x0E	; 14
     d0c:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
     d10:	08 95       	ret
	case LED_RED: M_DIO_Void_SetPinValue(LED_RED_PIN,HIGH); break;
     d12:	61 e0       	ldi	r22, 0x01	; 1
     d14:	8b e1       	ldi	r24, 0x1B	; 27
     d16:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
     d1a:	08 95       	ret

00000d1c <H_LED_Void_LedOff>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedOff(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
     d1c:	82 30       	cpi	r24, 0x02	; 2
     d1e:	71 f0       	breq	.+28     	; 0xd3c <H_LED_Void_LedOff+0x20>
     d20:	18 f4       	brcc	.+6      	; 0xd28 <H_LED_Void_LedOff+0xc>
     d22:	81 30       	cpi	r24, 0x01	; 1
     d24:	31 f0       	breq	.+12     	; 0xd32 <H_LED_Void_LedOff+0x16>
     d26:	08 95       	ret
     d28:	83 30       	cpi	r24, 0x03	; 3
     d2a:	69 f0       	breq	.+26     	; 0xd46 <H_LED_Void_LedOff+0x2a>
     d2c:	84 30       	cpi	r24, 0x04	; 4
     d2e:	81 f0       	breq	.+32     	; 0xd50 <H_LED_Void_LedOff+0x34>
     d30:	08 95       	ret
	{
	case LED_YEL: M_DIO_Void_SetPinValue(LED_YEL_PIN,LOW); break;
     d32:	60 e0       	ldi	r22, 0x00	; 0
     d34:	80 e1       	ldi	r24, 0x10	; 16
     d36:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
     d3a:	08 95       	ret
	case LED_BLU: M_DIO_Void_SetPinValue(LED_BLU_PIN,LOW); break;
     d3c:	60 e0       	ldi	r22, 0x00	; 0
     d3e:	8f e0       	ldi	r24, 0x0F	; 15
     d40:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
     d44:	08 95       	ret
	case LED_GRN: M_DIO_Void_SetPinValue(LED_GRN_PIN,LOW); break;
     d46:	60 e0       	ldi	r22, 0x00	; 0
     d48:	8e e0       	ldi	r24, 0x0E	; 14
     d4a:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
     d4e:	08 95       	ret
	case LED_RED: M_DIO_Void_SetPinValue(LED_RED_PIN,LOW); break;
     d50:	60 e0       	ldi	r22, 0x00	; 0
     d52:	8b e1       	ldi	r24, 0x1B	; 27
     d54:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
     d58:	08 95       	ret

00000d5a <Relay_ON>:
void Relay_Init(u8 Relay_ID){
	M_DIO_Void_SetPinDirection(Relay_ID,OUTPUT);
	M_DIO_Void_SetPinValue(Relay_ID,LOW);
}
void Relay_ON(u8 Relay_ID){
	M_DIO_Void_SetPinValue(Relay_ID,HIGH);
     d5a:	61 e0       	ldi	r22, 0x01	; 1
     d5c:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
     d60:	08 95       	ret

00000d62 <Relay_OFF>:
}
void Relay_OFF(u8 Relay_ID){
	M_DIO_Void_SetPinValue(Relay_ID,LOW);
     d62:	60 e0       	ldi	r22, 0x00	; 0
     d64:	0e 94 51 08 	call	0x10a2	; 0x10a2 <M_DIO_Void_SetPinValue>
     d68:	08 95       	ret

00000d6a <RTC_Init>:
	/*send the units of month in the least 4 bits then the tens month in the higher 4 bits   */
	M_U8_I2C_Write(((Config_Date -> month / 10) << 4)|((Config_Date -> month) % 10));
	/*send the units of year in the least 4 bits then the tens year in the higher 4 bits   */
	M_U8_I2C_Write(((Config_Date -> year / 10) << 4)|((Config_Date -> year) % 10));
	M_Void_I2C_STOP();
}
     d6a:	0e 94 1e 09 	call	0x123c	; 0x123c <M_Void_I2C_Init>
     d6e:	08 95       	ret

00000d70 <RTC_Get_Time>:

void RTC_Get_Time(Date_And_Time *Get_Time_And_Date)
{
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	ec 01       	movw	r28, r24
	u8 temp_sec =0;
	u8 temp_min =0;
	u8 temp_hours =0;

	M_U8_I2C_Start();/*send the start bit*/
     d76:	0e 94 3b 09 	call	0x1276	; 0x1276 <M_U8_I2C_Start>
	/*send the slave address and write bit*/
	M_U8_I2C_SendSlaveAddressWithWrite(RTC_SLAVE_ADDRESS_WRITE);
     d7a:	80 ed       	ldi	r24, 0xD0	; 208
     d7c:	0e 94 46 09 	call	0x128c	; 0x128c <M_U8_I2C_SendSlaveAddressWithWrite>
	/*write the first address 0x00 in RTC to write the day*/
	M_U8_I2C_Write(RTC_SECONDS_REG_ADDRESS);
     d80:	80 e0       	ldi	r24, 0x00	; 0
     d82:	0e 94 63 09 	call	0x12c6	; 0x12c6 <M_U8_I2C_Write>
	M_U8_I2C_Repeated_Start();
     d86:	0e 94 4f 09 	call	0x129e	; 0x129e <M_U8_I2C_Repeated_Start>
	/*send the slave address and read bit*/
	M_U8_I2C_SendSlaveAddressWithRead(RTC_SLAVE_ADDRESS_READ);
     d8a:	81 ed       	ldi	r24, 0xD1	; 209
     d8c:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <M_U8_I2C_SendSlaveAddressWithRead>
	temp_sec = M_U8_I2C_ReadWithAck();
     d90:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <M_U8_I2C_ReadWithAck>
	/*get the seconds units + the tens seconds by >>4 then multiplied by 10*/
	Get_Time_And_Date -> sec = (temp_sec & 0x0F)+(((temp_sec & 0xF0)>>4)*10);
     d94:	98 2f       	mov	r25, r24
     d96:	92 95       	swap	r25
     d98:	9f 70       	andi	r25, 0x0F	; 15
     d9a:	8f 70       	andi	r24, 0x0F	; 15
     d9c:	99 0f       	add	r25, r25
     d9e:	29 2f       	mov	r18, r25
     da0:	22 0f       	add	r18, r18
     da2:	22 0f       	add	r18, r18
     da4:	92 0f       	add	r25, r18
     da6:	89 0f       	add	r24, r25
     da8:	88 83       	st	Y, r24
	/*get the mins units + the tens mins by >>4 then multiplied by 10*/
	temp_min = M_U8_I2C_ReadWithAck();
     daa:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <M_U8_I2C_ReadWithAck>
	Get_Time_And_Date -> min = (temp_min & 0x0F)+(((temp_min & 0xF0)>>4)*10);
     dae:	98 2f       	mov	r25, r24
     db0:	92 95       	swap	r25
     db2:	9f 70       	andi	r25, 0x0F	; 15
     db4:	8f 70       	andi	r24, 0x0F	; 15
     db6:	99 0f       	add	r25, r25
     db8:	29 2f       	mov	r18, r25
     dba:	22 0f       	add	r18, r18
     dbc:	22 0f       	add	r18, r18
     dbe:	92 0f       	add	r25, r18
     dc0:	89 0f       	add	r24, r25
     dc2:	89 83       	std	Y+1, r24	; 0x01
	/*get the hours units + the tens hours by >>4 then multiplied by 10*/
	temp_hours = M_U8_I2C_ReadWithNack();
     dc4:	0e 94 73 09 	call	0x12e6	; 0x12e6 <M_U8_I2C_ReadWithNack>
	Get_Time_And_Date -> hours = (temp_hours & 0x0F)+(((temp_hours & 0xF0)>>4)*10);
     dc8:	98 2f       	mov	r25, r24
     dca:	92 95       	swap	r25
     dcc:	9f 70       	andi	r25, 0x0F	; 15
     dce:	8f 70       	andi	r24, 0x0F	; 15
     dd0:	99 0f       	add	r25, r25
     dd2:	29 2f       	mov	r18, r25
     dd4:	22 0f       	add	r18, r18
     dd6:	22 0f       	add	r18, r18
     dd8:	92 0f       	add	r25, r18
     dda:	89 0f       	add	r24, r25
     ddc:	8a 83       	std	Y+2, r24	; 0x02
	M_Void_I2C_STOP();
     dde:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <M_Void_I2C_STOP>
}
     de2:	df 91       	pop	r29
     de4:	cf 91       	pop	r28
     de6:	08 95       	ret

00000de8 <main>:

/*********************************************************************************
 *                                    MAIN
 *********************************************************************************/
void main(void)
{
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
     df0:	27 97       	sbiw	r28, 0x07	; 7
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	de bf       	out	0x3e, r29	; 62
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	cd bf       	out	0x3d, r28	; 61
    Date_And_Time Current_Date_And_Time = {35, 21, 2, 6, 28, 3, 24};
     dfc:	87 e0       	ldi	r24, 0x07	; 7
     dfe:	ec e8       	ldi	r30, 0x8C	; 140
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	de 01       	movw	r26, r28
     e04:	11 96       	adiw	r26, 0x01	; 1
     e06:	01 90       	ld	r0, Z+
     e08:	0d 92       	st	X+, r0
     e0a:	8a 95       	dec	r24
     e0c:	e1 f7       	brne	.-8      	; 0xe06 <main+0x1e>
    //RTC_Set_Time(&Current_Date_And_Time);
    APP_EmpID EmpID = 0xFF;

    /* Initialization of the used modules in the MCAL layer */
    M_Void_I2C_Init();
     e0e:	0e 94 1e 09 	call	0x123c	; 0x123c <M_Void_I2C_Init>
    UART_Init();
     e12:	0e 94 80 09 	call	0x1300	; 0x1300 <UART_Init>

    /* Initialization of the used modules in the HAL layer */
    H_LED_Void_LedInit(LED_RED);
     e16:	84 e0       	ldi	r24, 0x04	; 4
     e18:	0e 94 50 06 	call	0xca0	; 0xca0 <H_LED_Void_LedInit>
    H_LED_Void_LedInit(LED_GRN);
     e1c:	83 e0       	ldi	r24, 0x03	; 3
     e1e:	0e 94 50 06 	call	0xca0	; 0xca0 <H_LED_Void_LedInit>

    H_KeyPad_Void_KeyPadInit();
     e22:	0e 94 14 04 	call	0x828	; 0x828 <H_KeyPad_Void_KeyPadInit>
    H_Lcd_Void_LCDInit();
     e26:	0e 94 90 05 	call	0xb20	; 0xb20 <H_Lcd_Void_LCDInit>
    RTC_Init();
     e2a:	0e 94 b5 06 	call	0xd6a	; 0xd6a <RTC_Init>
    while (1)
    {
        /* Initial function
         * Press '*' Attendance Confirmation
         * Press '#' New Enrollment */
        if (g_SystemState == INITIAL_STATE)
     e2e:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <g_SystemState>
     e32:	81 11       	cpse	r24, r1
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <main+0x52>
        {
            APP_Init();
     e36:	0e 94 49 00 	call	0x92	; 0x92 <APP_Init>
        }
        switch (g_SystemState)
     e3a:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <g_SystemState>
     e3e:	81 30       	cpi	r24, 0x01	; 1
     e40:	09 f4       	brne	.+2      	; 0xe44 <main+0x5c>
     e42:	5f c0       	rjmp	.+190    	; 0xf02 <main+0x11a>
     e44:	87 30       	cpi	r24, 0x07	; 7
     e46:	99 f7       	brne	.-26     	; 0xe2e <main+0x46>
        {
        case CONFIRM_ATTENDANCE_ENTER_ID:
            EmpID = APP_GetID();
     e48:	0e 94 77 00 	call	0xee	; 0xee <APP_GetID>
     e4c:	18 2f       	mov	r17, r24
            if (EmpID == GOBACK)
     e4e:	8f 3f       	cpi	r24, 0xFF	; 255
     e50:	19 f4       	brne	.+6      	; 0xe58 <main+0x70>
            {
                g_SystemState = INITIAL_STATE;
     e52:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <g_SystemState>
     e56:	eb cf       	rjmp	.-42     	; 0xe2e <main+0x46>
            }
            else
            {
                g_SystemState = APP_CheckIDPresence(EmpID);
     e58:	0e 94 ae 00 	call	0x15c	; 0x15c <APP_CheckIDPresence>
     e5c:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <g_SystemState>
                if (g_SystemState == FOUND_ID)
     e60:	89 30       	cpi	r24, 0x09	; 9
     e62:	d1 f5       	brne	.+116    	; 0xed8 <main+0xf0>
                {
                    /* In case ID is found then ask for the fingerPrint scan */
                    APP_PutFingerToScan();
     e64:	0e 94 82 01 	call	0x304	; 0x304 <APP_PutFingerToScan>
     e68:	2f ef       	ldi	r18, 0xFF	; 255
     e6a:	8b e7       	ldi	r24, 0x7B	; 123
     e6c:	92 e9       	ldi	r25, 0x92	; 146
     e6e:	21 50       	subi	r18, 0x01	; 1
     e70:	80 40       	sbci	r24, 0x00	; 0
     e72:	90 40       	sbci	r25, 0x00	; 0
     e74:	e1 f7       	brne	.-8      	; 0xe6e <main+0x86>
     e76:	00 c0       	rjmp	.+0      	; 0xe78 <main+0x90>
     e78:	00 00       	nop
                    _delay_ms(3000);
                    FingerPS_AuraLedConfig();
     e7a:	0e 94 32 02 	call	0x464	; 0x464 <FingerPS_AuraLedConfig>
     e7e:	00 e0       	ldi	r16, 0x00	; 0
                    do
                    {
                        if (MATCHED == FingerPS_CheckOneToOneMatch((u16)EmpID))
     e80:	e1 2e       	mov	r14, r17
     e82:	f1 2c       	mov	r15, r1
     e84:	c7 01       	movw	r24, r14
     e86:	0e 94 ce 03 	call	0x79c	; 0x79c <FingerPS_CheckOneToOneMatch>
     e8a:	81 30       	cpi	r24, 0x01	; 1
     e8c:	51 f4       	brne	.+20     	; 0xea2 <main+0xba>
                        {
                            /* If the fingerprint matches the employee's fingerprint saved, LCD will show that the confirmation of attendance has been successful */
                            APP_Confirm_Attendance_Success(EmpID, &Current_Date_And_Time);
     e8e:	be 01       	movw	r22, r28
     e90:	6f 5f       	subi	r22, 0xFF	; 255
     e92:	7f 4f       	sbci	r23, 0xFF	; 255
     e94:	81 2f       	mov	r24, r17
     e96:	0e 94 38 01 	call	0x270	; 0x270 <APP_Confirm_Attendance_Success>
                            g_SystemState = INITIAL_STATE;
     e9a:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <g_SystemState>
                            WrongFingerPrintCounter = 0;
     e9e:	00 e0       	ldi	r16, 0x00	; 0
     ea0:	18 c0       	rjmp	.+48     	; 0xed2 <main+0xea>
                        }
                        else if (NOTMATCHED == FingerPS_CheckOneToOneMatch((u16)EmpID))
     ea2:	c7 01       	movw	r24, r14
     ea4:	0e 94 ce 03 	call	0x79c	; 0x79c <FingerPS_CheckOneToOneMatch>
     ea8:	81 11       	cpse	r24, r1
     eaa:	13 c0       	rjmp	.+38     	; 0xed2 <main+0xea>
                        {
                            /* If the fingerprint doesn't match the employee's fingerprint saved will try again for 3 times then a warning will be displayed */
                            WrongFingerPrintCounter++;
     eac:	0f 5f       	subi	r16, 0xFF	; 255
                            if (WrongFingerPrintCounter == MAX_TRIALS)
     eae:	03 30       	cpi	r16, 0x03	; 3
     eb0:	81 f4       	brne	.+32     	; 0xed2 <main+0xea>
                            {
                                if (APP_WarningHandler(FINGERPRINT_NOT_FOUND) == MAIN_MENU_BUTTON_PRESSED)
     eb2:	82 e0       	ldi	r24, 0x02	; 2
     eb4:	0e 94 89 01 	call	0x312	; 0x312 <APP_WarningHandler>
     eb8:	83 34       	cpi	r24, 0x43	; 67
     eba:	19 f4       	brne	.+6      	; 0xec2 <main+0xda>
                                {
                                    /* Go back to the main menu to choose new enrollment */
                                    g_SystemState = INITIAL_STATE;
     ebc:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <g_SystemState>
     ec0:	08 c0       	rjmp	.+16     	; 0xed2 <main+0xea>
                                }
                                else if (APP_WarningHandler(FINGERPRINT_NOT_FOUND) == GOBACK_BUTTON_PRESSED)
     ec2:	82 e0       	ldi	r24, 0x02	; 2
     ec4:	0e 94 89 01 	call	0x312	; 0x312 <APP_WarningHandler>
     ec8:	81 34       	cpi	r24, 0x41	; 65
     eca:	19 f4       	brne	.+6      	; 0xed2 <main+0xea>
                                {
                                    /* Take one step back in the program and go back to confirm attendance */
                                    g_SystemState = CONFIRM_ATTENDANCE_ENTER_ID;
     ecc:	87 e0       	ldi	r24, 0x07	; 7
     ece:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <g_SystemState>
                                }
                            }
                        }
                    } while (WrongFingerPrintCounter < MAX_TRIALS);
     ed2:	03 30       	cpi	r16, 0x03	; 3
     ed4:	a8 f2       	brcs	.-86     	; 0xe80 <main+0x98>
     ed6:	ab cf       	rjmp	.-170    	; 0xe2e <main+0x46>
                    /* Return the value of wrong fingerprint counter to 0 */
                    WrongFingerPrintCounter = 0;
                }
                else if (g_SystemState == NOTFOUND_ID)
     ed8:	88 30       	cpi	r24, 0x08	; 8
     eda:	09 f0       	breq	.+2      	; 0xede <main+0xf6>
     edc:	a8 cf       	rjmp	.-176    	; 0xe2e <main+0x46>
                {
                    if (APP_WarningHandler(ID_NOT_FOUND) == MAIN_MENU_BUTTON_PRESSED)
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	0e 94 89 01 	call	0x312	; 0x312 <APP_WarningHandler>
     ee4:	83 34       	cpi	r24, 0x43	; 67
     ee6:	19 f4       	brne	.+6      	; 0xeee <main+0x106>
                    {
                        /* Go back to the main menu to choose new enrollment */
                        g_SystemState = INITIAL_STATE;
     ee8:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <g_SystemState>
     eec:	a0 cf       	rjmp	.-192    	; 0xe2e <main+0x46>
                    } 
					else if (APP_WarningHandler(ID_NOT_FOUND) == GOBACK_BUTTON_PRESSED){
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	0e 94 89 01 	call	0x312	; 0x312 <APP_WarningHandler>
     ef4:	81 34       	cpi	r24, 0x41	; 65
     ef6:	09 f0       	breq	.+2      	; 0xefa <main+0x112>
     ef8:	9a cf       	rjmp	.-204    	; 0xe2e <main+0x46>
						/* Go back to the Enter ID */
						g_SystemState = CONFIRM_ATTENDANCE_ENTER_ID;
     efa:	87 e0       	ldi	r24, 0x07	; 7
     efc:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <g_SystemState>
     f00:	96 cf       	rjmp	.-212    	; 0xe2e <main+0x46>
                }
            }
            break; /* End of confirm attendance case */

        case NEW_ENROLLMENT_SET_NEW_ID:
            EmpID = APP_GetID();
     f02:	0e 94 77 00 	call	0xee	; 0xee <APP_GetID>
     f06:	18 2f       	mov	r17, r24
            if (EmpID == GOBACK)
     f08:	8f 3f       	cpi	r24, 0xFF	; 255
     f0a:	19 f4       	brne	.+6      	; 0xf12 <main+0x12a>
            {
                g_SystemState = INITIAL_STATE;
     f0c:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <g_SystemState>
     f10:	8e cf       	rjmp	.-228    	; 0xe2e <main+0x46>
            }
            else
            {
                g_SystemState = APP_CheckIDPresence(EmpID);
     f12:	0e 94 ae 00 	call	0x15c	; 0x15c <APP_CheckIDPresence>
     f16:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <g_SystemState>
                if (g_SystemState == NOTFOUND_ID)
     f1a:	88 30       	cpi	r24, 0x08	; 8
     f1c:	21 f5       	brne	.+72     	; 0xf66 <main+0x17e>
                {
                    /* If the ID inserted out of range, display on LCD warning that the ID is out of range */
                    if (EmpID == OUT_OF_RANGE_ID)
     f1e:	1e 3f       	cpi	r17, 0xFE	; 254
     f20:	49 f4       	brne	.+18     	; 0xf34 <main+0x14c>
                    {
                        if (APP_WarningHandler(OUT_OF_RANGE_ID) == MAIN_MENU_BUTTON_PRESSED)
     f22:	8e ef       	ldi	r24, 0xFE	; 254
     f24:	0e 94 89 01 	call	0x312	; 0x312 <APP_WarningHandler>
     f28:	83 34       	cpi	r24, 0x43	; 67
     f2a:	09 f0       	breq	.+2      	; 0xf2e <main+0x146>
     f2c:	80 cf       	rjmp	.-256    	; 0xe2e <main+0x46>
                        {
                            /* Go back to the main menu to choose new enrollment */
                            g_SystemState = INITIAL_STATE;
     f2e:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <g_SystemState>
     f32:	7d cf       	rjmp	.-262    	; 0xe2e <main+0x46>
                        }
                    }
                    else
                    {
                        /* Show Put your finger to scan on the lcd */
                        APP_PutFingerToScan();
     f34:	0e 94 82 01 	call	0x304	; 0x304 <APP_PutFingerToScan>
     f38:	2f ef       	ldi	r18, 0xFF	; 255
     f3a:	8f e4       	ldi	r24, 0x4F	; 79
     f3c:	93 ec       	ldi	r25, 0xC3	; 195
     f3e:	21 50       	subi	r18, 0x01	; 1
     f40:	80 40       	sbci	r24, 0x00	; 0
     f42:	90 40       	sbci	r25, 0x00	; 0
     f44:	e1 f7       	brne	.-8      	; 0xf3e <main+0x156>
     f46:	00 c0       	rjmp	.+0      	; 0xf48 <main+0x160>
     f48:	00 00       	nop
                        _delay_ms(4000);
                        FingerPS_AuraLedConfig();
     f4a:	0e 94 32 02 	call	0x464	; 0x464 <FingerPS_AuraLedConfig>
                        /* Save the new fingerprint of the new employee in the corresponding address in the fingerprint memory */
                        FingerPS_SetNewFingerPrint((u16)EmpID);
     f4e:	81 2f       	mov	r24, r17
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	0e 94 54 03 	call	0x6a8	; 0x6a8 <FingerPS_SetNewFingerPrint>
                        /* Write the New employee ID in the corresponding address in the EEPROM */
                        APP_SetNewID(EmpID);
     f56:	81 2f       	mov	r24, r17
     f58:	0e 94 ba 00 	call	0x174	; 0x174 <APP_SetNewID>
                        /* Call LCD Display SUCCESS NEW ENROLLMENT
                         * Press Go-back button to the main menu */
                        APP_NewEnrollemtSuccessful();
     f5c:	0e 94 c2 00 	call	0x184	; 0x184 <APP_NewEnrollemtSuccessful>
                        g_SystemState = INITIAL_STATE;
     f60:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <g_SystemState>
     f64:	64 cf       	rjmp	.-312    	; 0xe2e <main+0x46>
                    }
                }
                else if (g_SystemState == FOUND_ID)
     f66:	89 30       	cpi	r24, 0x09	; 9
     f68:	09 f0       	breq	.+2      	; 0xf6c <main+0x184>
     f6a:	61 cf       	rjmp	.-318    	; 0xe2e <main+0x46>
                {
                    if (APP_WarningHandler(ALREADY_TAKEN_ID) == MAIN_MENU_BUTTON_PRESSED)
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	0e 94 89 01 	call	0x312	; 0x312 <APP_WarningHandler>
     f72:	83 34       	cpi	r24, 0x43	; 67
     f74:	19 f4       	brne	.+6      	; 0xf7c <main+0x194>
                    {
                        /* Go back to the main menu to choose new enrollment */
                        g_SystemState = INITIAL_STATE;
     f76:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <g_SystemState>
     f7a:	59 cf       	rjmp	.-334    	; 0xe2e <main+0x46>
                    }
                    else if (APP_WarningHandler(ALREADY_TAKEN_ID) == GOBACK_BUTTON_PRESSED)
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	0e 94 89 01 	call	0x312	; 0x312 <APP_WarningHandler>
     f82:	81 34       	cpi	r24, 0x41	; 65
     f84:	09 f0       	breq	.+2      	; 0xf88 <main+0x1a0>
     f86:	53 cf       	rjmp	.-346    	; 0xe2e <main+0x46>
                    {
                        /* Take one step back in the program and go back to confirm attendance */
                        g_SystemState = NEW_ENROLLMENT_SET_NEW_ID;
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <g_SystemState>
     f8e:	4f cf       	rjmp	.-354    	; 0xe2e <main+0x46>

00000f90 <M_DIO_Void_SetPinDirection>:
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinDirection(u8 Copy_U8_Number, u8 Copy_U8_State)
{

	u8 Local_U8_Bit    = Copy_U8_Number % 10;
     f90:	9d ec       	ldi	r25, 0xCD	; 205
     f92:	89 9f       	mul	r24, r25
     f94:	91 2d       	mov	r25, r1
     f96:	11 24       	eor	r1, r1
     f98:	29 2f       	mov	r18, r25
     f9a:	26 95       	lsr	r18
     f9c:	26 95       	lsr	r18
     f9e:	26 95       	lsr	r18
     fa0:	22 0f       	add	r18, r18
     fa2:	32 2f       	mov	r19, r18
     fa4:	33 0f       	add	r19, r19
     fa6:	33 0f       	add	r19, r19
     fa8:	23 0f       	add	r18, r19
     faa:	82 1b       	sub	r24, r18
     fac:	28 2f       	mov	r18, r24
	u8 Local_U8_Group  = Copy_U8_Number / 10;
     fae:	96 95       	lsr	r25
     fb0:	96 95       	lsr	r25
     fb2:	96 95       	lsr	r25
	switch(Copy_U8_State)
     fb4:	66 23       	and	r22, r22
     fb6:	19 f0       	breq	.+6      	; 0xfbe <M_DIO_Void_SetPinDirection+0x2e>
     fb8:	61 30       	cpi	r22, 0x01	; 1
     fba:	e1 f1       	breq	.+120    	; 0x1034 <M_DIO_Void_SetPinDirection+0xa4>
     fbc:	08 95       	ret
	{
	case INPUT:
		switch(Local_U8_Group)
     fbe:	92 30       	cpi	r25, 0x02	; 2
     fc0:	a9 f0       	breq	.+42     	; 0xfec <M_DIO_Void_SetPinDirection+0x5c>
     fc2:	18 f4       	brcc	.+6      	; 0xfca <M_DIO_Void_SetPinDirection+0x3a>
     fc4:	91 30       	cpi	r25, 0x01	; 1
     fc6:	31 f0       	breq	.+12     	; 0xfd4 <M_DIO_Void_SetPinDirection+0x44>
     fc8:	08 95       	ret
     fca:	93 30       	cpi	r25, 0x03	; 3
     fcc:	d9 f0       	breq	.+54     	; 0x1004 <M_DIO_Void_SetPinDirection+0x74>
     fce:	94 30       	cpi	r25, 0x04	; 4
     fd0:	29 f1       	breq	.+74     	; 0x101c <M_DIO_Void_SetPinDirection+0x8c>
     fd2:	08 95       	ret
		{
		case 1: CLR_BIT(DDRA_REG,Local_U8_Bit); break;
     fd4:	3a b3       	in	r19, 0x1a	; 26
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <M_DIO_Void_SetPinDirection+0x50>
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	2a 95       	dec	r18
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <M_DIO_Void_SetPinDirection+0x4c>
     fe4:	80 95       	com	r24
     fe6:	83 23       	and	r24, r19
     fe8:	8a bb       	out	0x1a, r24	; 26
     fea:	08 95       	ret
		case 2: CLR_BIT(DDRB_REG,Local_U8_Bit); break;
     fec:	37 b3       	in	r19, 0x17	; 23
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <M_DIO_Void_SetPinDirection+0x68>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	2a 95       	dec	r18
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <M_DIO_Void_SetPinDirection+0x64>
     ffc:	80 95       	com	r24
     ffe:	83 23       	and	r24, r19
    1000:	87 bb       	out	0x17, r24	; 23
    1002:	08 95       	ret
		case 3: CLR_BIT(DDRC_REG,Local_U8_Bit); break;
    1004:	34 b3       	in	r19, 0x14	; 20
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <M_DIO_Void_SetPinDirection+0x80>
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	2a 95       	dec	r18
    1012:	e2 f7       	brpl	.-8      	; 0x100c <M_DIO_Void_SetPinDirection+0x7c>
    1014:	80 95       	com	r24
    1016:	83 23       	and	r24, r19
    1018:	84 bb       	out	0x14, r24	; 20
    101a:	08 95       	ret
		case 4: CLR_BIT(DDRD_REG,Local_U8_Bit); break;
    101c:	31 b3       	in	r19, 0x11	; 17
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <M_DIO_Void_SetPinDirection+0x98>
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	2a 95       	dec	r18
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <M_DIO_Void_SetPinDirection+0x94>
    102c:	80 95       	com	r24
    102e:	83 23       	and	r24, r19
    1030:	81 bb       	out	0x11, r24	; 17
    1032:	08 95       	ret
		default:                                break;
		}
		break;
		case OUTPUT:
			switch(Local_U8_Group)
    1034:	92 30       	cpi	r25, 0x02	; 2
    1036:	a1 f0       	breq	.+40     	; 0x1060 <M_DIO_Void_SetPinDirection+0xd0>
    1038:	18 f4       	brcc	.+6      	; 0x1040 <M_DIO_Void_SetPinDirection+0xb0>
    103a:	91 30       	cpi	r25, 0x01	; 1
    103c:	31 f0       	breq	.+12     	; 0x104a <M_DIO_Void_SetPinDirection+0xba>
    103e:	08 95       	ret
    1040:	93 30       	cpi	r25, 0x03	; 3
    1042:	c9 f0       	breq	.+50     	; 0x1076 <M_DIO_Void_SetPinDirection+0xe6>
    1044:	94 30       	cpi	r25, 0x04	; 4
    1046:	11 f1       	breq	.+68     	; 0x108c <M_DIO_Void_SetPinDirection+0xfc>
    1048:	08 95       	ret
			{
			case 1: SET_BIT(DDRA_REG,Local_U8_Bit); break;
    104a:	3a b3       	in	r19, 0x1a	; 26
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <M_DIO_Void_SetPinDirection+0xc6>
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	2a 95       	dec	r18
    1058:	e2 f7       	brpl	.-8      	; 0x1052 <M_DIO_Void_SetPinDirection+0xc2>
    105a:	83 2b       	or	r24, r19
    105c:	8a bb       	out	0x1a, r24	; 26
    105e:	08 95       	ret
			case 2: SET_BIT(DDRB_REG,Local_U8_Bit); break;
    1060:	37 b3       	in	r19, 0x17	; 23
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	02 c0       	rjmp	.+4      	; 0x106c <M_DIO_Void_SetPinDirection+0xdc>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	2a 95       	dec	r18
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <M_DIO_Void_SetPinDirection+0xd8>
    1070:	83 2b       	or	r24, r19
    1072:	87 bb       	out	0x17, r24	; 23
    1074:	08 95       	ret
			case 3: SET_BIT(DDRC_REG,Local_U8_Bit); break;
    1076:	34 b3       	in	r19, 0x14	; 20
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <M_DIO_Void_SetPinDirection+0xf2>
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	2a 95       	dec	r18
    1084:	e2 f7       	brpl	.-8      	; 0x107e <M_DIO_Void_SetPinDirection+0xee>
    1086:	83 2b       	or	r24, r19
    1088:	84 bb       	out	0x14, r24	; 20
    108a:	08 95       	ret
			case 4: SET_BIT(DDRD_REG,Local_U8_Bit); break;
    108c:	31 b3       	in	r19, 0x11	; 17
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	02 c0       	rjmp	.+4      	; 0x1098 <M_DIO_Void_SetPinDirection+0x108>
    1094:	88 0f       	add	r24, r24
    1096:	99 1f       	adc	r25, r25
    1098:	2a 95       	dec	r18
    109a:	e2 f7       	brpl	.-8      	; 0x1094 <M_DIO_Void_SetPinDirection+0x104>
    109c:	83 2b       	or	r24, r19
    109e:	81 bb       	out	0x11, r24	; 17
    10a0:	08 95       	ret

000010a2 <M_DIO_Void_SetPinValue>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinValue(u8 Copy_U8_Number, u8 Copy_U8_State)
{
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    10a2:	9d ec       	ldi	r25, 0xCD	; 205
    10a4:	89 9f       	mul	r24, r25
    10a6:	91 2d       	mov	r25, r1
    10a8:	11 24       	eor	r1, r1
    10aa:	29 2f       	mov	r18, r25
    10ac:	26 95       	lsr	r18
    10ae:	26 95       	lsr	r18
    10b0:	26 95       	lsr	r18
    10b2:	22 0f       	add	r18, r18
    10b4:	32 2f       	mov	r19, r18
    10b6:	33 0f       	add	r19, r19
    10b8:	33 0f       	add	r19, r19
    10ba:	23 0f       	add	r18, r19
    10bc:	82 1b       	sub	r24, r18
    10be:	28 2f       	mov	r18, r24
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    10c0:	96 95       	lsr	r25
    10c2:	96 95       	lsr	r25
    10c4:	96 95       	lsr	r25
	switch(Copy_U8_State)
    10c6:	66 23       	and	r22, r22
    10c8:	19 f0       	breq	.+6      	; 0x10d0 <M_DIO_Void_SetPinValue+0x2e>
    10ca:	61 30       	cpi	r22, 0x01	; 1
    10cc:	e1 f1       	breq	.+120    	; 0x1146 <M_DIO_Void_SetPinValue+0xa4>
    10ce:	08 95       	ret
	{
	case LOW:
		switch(Local_U8_Group)
    10d0:	92 30       	cpi	r25, 0x02	; 2
    10d2:	a9 f0       	breq	.+42     	; 0x10fe <M_DIO_Void_SetPinValue+0x5c>
    10d4:	18 f4       	brcc	.+6      	; 0x10dc <M_DIO_Void_SetPinValue+0x3a>
    10d6:	91 30       	cpi	r25, 0x01	; 1
    10d8:	31 f0       	breq	.+12     	; 0x10e6 <M_DIO_Void_SetPinValue+0x44>
    10da:	08 95       	ret
    10dc:	93 30       	cpi	r25, 0x03	; 3
    10de:	d9 f0       	breq	.+54     	; 0x1116 <M_DIO_Void_SetPinValue+0x74>
    10e0:	94 30       	cpi	r25, 0x04	; 4
    10e2:	29 f1       	breq	.+74     	; 0x112e <M_DIO_Void_SetPinValue+0x8c>
    10e4:	08 95       	ret
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
    10e6:	3b b3       	in	r19, 0x1b	; 27
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <M_DIO_Void_SetPinValue+0x50>
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	2a 95       	dec	r18
    10f4:	e2 f7       	brpl	.-8      	; 0x10ee <M_DIO_Void_SetPinValue+0x4c>
    10f6:	80 95       	com	r24
    10f8:	83 23       	and	r24, r19
    10fa:	8b bb       	out	0x1b, r24	; 27
    10fc:	08 95       	ret
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
    10fe:	38 b3       	in	r19, 0x18	; 24
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	02 c0       	rjmp	.+4      	; 0x110a <M_DIO_Void_SetPinValue+0x68>
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	2a 95       	dec	r18
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <M_DIO_Void_SetPinValue+0x64>
    110e:	80 95       	com	r24
    1110:	83 23       	and	r24, r19
    1112:	88 bb       	out	0x18, r24	; 24
    1114:	08 95       	ret
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
    1116:	35 b3       	in	r19, 0x15	; 21
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <M_DIO_Void_SetPinValue+0x80>
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	2a 95       	dec	r18
    1124:	e2 f7       	brpl	.-8      	; 0x111e <M_DIO_Void_SetPinValue+0x7c>
    1126:	80 95       	com	r24
    1128:	83 23       	and	r24, r19
    112a:	85 bb       	out	0x15, r24	; 21
    112c:	08 95       	ret
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
    112e:	32 b3       	in	r19, 0x12	; 18
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	02 c0       	rjmp	.+4      	; 0x113a <M_DIO_Void_SetPinValue+0x98>
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	2a 95       	dec	r18
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <M_DIO_Void_SetPinValue+0x94>
    113e:	80 95       	com	r24
    1140:	83 23       	and	r24, r19
    1142:	82 bb       	out	0x12, r24	; 18
    1144:	08 95       	ret
		default:                                 break;
		}
		break;
		case HIGH:
			switch(Local_U8_Group)
    1146:	92 30       	cpi	r25, 0x02	; 2
    1148:	a1 f0       	breq	.+40     	; 0x1172 <M_DIO_Void_SetPinValue+0xd0>
    114a:	18 f4       	brcc	.+6      	; 0x1152 <M_DIO_Void_SetPinValue+0xb0>
    114c:	91 30       	cpi	r25, 0x01	; 1
    114e:	31 f0       	breq	.+12     	; 0x115c <M_DIO_Void_SetPinValue+0xba>
    1150:	08 95       	ret
    1152:	93 30       	cpi	r25, 0x03	; 3
    1154:	c9 f0       	breq	.+50     	; 0x1188 <M_DIO_Void_SetPinValue+0xe6>
    1156:	94 30       	cpi	r25, 0x04	; 4
    1158:	11 f1       	breq	.+68     	; 0x119e <M_DIO_Void_SetPinValue+0xfc>
    115a:	08 95       	ret
			{
			case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
    115c:	3b b3       	in	r19, 0x1b	; 27
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <M_DIO_Void_SetPinValue+0xc6>
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	2a 95       	dec	r18
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <M_DIO_Void_SetPinValue+0xc2>
    116c:	83 2b       	or	r24, r19
    116e:	8b bb       	out	0x1b, r24	; 27
    1170:	08 95       	ret
			case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
    1172:	38 b3       	in	r19, 0x18	; 24
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	02 c0       	rjmp	.+4      	; 0x117e <M_DIO_Void_SetPinValue+0xdc>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	2a 95       	dec	r18
    1180:	e2 f7       	brpl	.-8      	; 0x117a <M_DIO_Void_SetPinValue+0xd8>
    1182:	83 2b       	or	r24, r19
    1184:	88 bb       	out	0x18, r24	; 24
    1186:	08 95       	ret
			case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
    1188:	35 b3       	in	r19, 0x15	; 21
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <M_DIO_Void_SetPinValue+0xf2>
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	2a 95       	dec	r18
    1196:	e2 f7       	brpl	.-8      	; 0x1190 <M_DIO_Void_SetPinValue+0xee>
    1198:	83 2b       	or	r24, r19
    119a:	85 bb       	out	0x15, r24	; 21
    119c:	08 95       	ret
			case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
    119e:	32 b3       	in	r19, 0x12	; 18
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <M_DIO_Void_SetPinValue+0x108>
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	2a 95       	dec	r18
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <M_DIO_Void_SetPinValue+0x104>
    11ae:	83 2b       	or	r24, r19
    11b0:	82 bb       	out	0x12, r24	; 18
    11b2:	08 95       	ret

000011b4 <M_DIO_Void_GetPinValue>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
u8   M_DIO_Void_GetPinValue(u8 Copy_U8_Number)
{
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    11b4:	9d ec       	ldi	r25, 0xCD	; 205
    11b6:	89 9f       	mul	r24, r25
    11b8:	91 2d       	mov	r25, r1
    11ba:	11 24       	eor	r1, r1
    11bc:	29 2f       	mov	r18, r25
    11be:	26 95       	lsr	r18
    11c0:	26 95       	lsr	r18
    11c2:	26 95       	lsr	r18
    11c4:	22 0f       	add	r18, r18
    11c6:	32 2f       	mov	r19, r18
    11c8:	33 0f       	add	r19, r19
    11ca:	33 0f       	add	r19, r19
    11cc:	23 0f       	add	r18, r19
    11ce:	82 1b       	sub	r24, r18
    11d0:	28 2f       	mov	r18, r24
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    11d2:	89 2f       	mov	r24, r25
    11d4:	86 95       	lsr	r24
    11d6:	86 95       	lsr	r24
    11d8:	86 95       	lsr	r24
	u8 Local_U8_Reading = 0;
	switch(Local_U8_Group)
    11da:	82 30       	cpi	r24, 0x02	; 2
    11dc:	91 f0       	breq	.+36     	; 0x1202 <M_DIO_Void_GetPinValue+0x4e>
    11de:	18 f4       	brcc	.+6      	; 0x11e6 <M_DIO_Void_GetPinValue+0x32>
    11e0:	81 30       	cpi	r24, 0x01	; 1
    11e2:	31 f0       	breq	.+12     	; 0x11f0 <M_DIO_Void_GetPinValue+0x3c>
    11e4:	29 c0       	rjmp	.+82     	; 0x1238 <M_DIO_Void_GetPinValue+0x84>
    11e6:	83 30       	cpi	r24, 0x03	; 3
    11e8:	a9 f0       	breq	.+42     	; 0x1214 <M_DIO_Void_GetPinValue+0x60>
    11ea:	84 30       	cpi	r24, 0x04	; 4
    11ec:	e1 f0       	breq	.+56     	; 0x1226 <M_DIO_Void_GetPinValue+0x72>
    11ee:	24 c0       	rjmp	.+72     	; 0x1238 <M_DIO_Void_GetPinValue+0x84>
	{
	case 1: Local_U8_Reading = GET_BIT(PINA_REG,Local_U8_Bit); break;
    11f0:	89 b3       	in	r24, 0x19	; 25
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <M_DIO_Void_GetPinValue+0x46>
    11f6:	95 95       	asr	r25
    11f8:	87 95       	ror	r24
    11fa:	2a 95       	dec	r18
    11fc:	e2 f7       	brpl	.-8      	; 0x11f6 <M_DIO_Void_GetPinValue+0x42>
    11fe:	81 70       	andi	r24, 0x01	; 1
    1200:	08 95       	ret
	case 2: Local_U8_Reading = GET_BIT(PINB_REG,Local_U8_Bit); break;
    1202:	86 b3       	in	r24, 0x16	; 22
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	02 c0       	rjmp	.+4      	; 0x120c <M_DIO_Void_GetPinValue+0x58>
    1208:	95 95       	asr	r25
    120a:	87 95       	ror	r24
    120c:	2a 95       	dec	r18
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <M_DIO_Void_GetPinValue+0x54>
    1210:	81 70       	andi	r24, 0x01	; 1
    1212:	08 95       	ret
	case 3: Local_U8_Reading = GET_BIT(PINC_REG,Local_U8_Bit); break;
    1214:	83 b3       	in	r24, 0x13	; 19
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	02 c0       	rjmp	.+4      	; 0x121e <M_DIO_Void_GetPinValue+0x6a>
    121a:	95 95       	asr	r25
    121c:	87 95       	ror	r24
    121e:	2a 95       	dec	r18
    1220:	e2 f7       	brpl	.-8      	; 0x121a <M_DIO_Void_GetPinValue+0x66>
    1222:	81 70       	andi	r24, 0x01	; 1
    1224:	08 95       	ret
	case 4: Local_U8_Reading = GET_BIT(PIND_REG,Local_U8_Bit); break;
    1226:	80 b3       	in	r24, 0x10	; 16
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <M_DIO_Void_GetPinValue+0x7c>
    122c:	95 95       	asr	r25
    122e:	87 95       	ror	r24
    1230:	2a 95       	dec	r18
    1232:	e2 f7       	brpl	.-8      	; 0x122c <M_DIO_Void_GetPinValue+0x78>
    1234:	81 70       	andi	r24, 0x01	; 1
    1236:	08 95       	ret
/*--------------------------------------------------------------------------------------------*/
u8   M_DIO_Void_GetPinValue(u8 Copy_U8_Number)
{
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
	u8 Local_U8_Group  = Copy_U8_Number / 10;
	u8 Local_U8_Reading = 0;
    1238:	80 e0       	ldi	r24, 0x00	; 0
	case 3: Local_U8_Reading = GET_BIT(PINC_REG,Local_U8_Bit); break;
	case 4: Local_U8_Reading = GET_BIT(PIND_REG,Local_U8_Bit); break;
	default:                                                   break;
	}
	return Local_U8_Reading ;
}
    123a:	08 95       	ret

0000123c <M_Void_I2C_Init>:
#define SCL_CLK 200000 /*Select SCL_CLK in Hz*/
#define BITRATE(TWSR_REG)	((F_CPU/SCL_CLK)-16)/(2 * (1 << (TWSR_REG*2)))
/*************************		INITIATE I2C	******************/
void M_Void_I2C_Init (){
	#if TWPS == TWPS_Value1
		CLR_BIT(TWSR_REG,TWPS0);
    123c:	81 b1       	in	r24, 0x01	; 1
    123e:	8e 7f       	andi	r24, 0xFE	; 254
    1240:	81 b9       	out	0x01, r24	; 1
		CLR_BIT(TWSR_REG,TWPS1);
    1242:	81 b1       	in	r24, 0x01	; 1
    1244:	8d 7f       	andi	r24, 0xFD	; 253
    1246:	81 b9       	out	0x01, r24	; 1
		SET_BIT(TWSR_REG,TWPS1);
	#elif TWPS == TWPS_Value64 
		SET_BIT(TWSR_REG,TWPS0);
		SET_BIT(TWSR_REG,TWPS1);
	#endif
	TWBR_REG = BITRATE(TWSR_REG);	 
    1248:	81 b1       	in	r24, 0x01	; 1
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	22 e0       	ldi	r18, 0x02	; 2
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	02 c0       	rjmp	.+4      	; 0x125a <M_Void_I2C_Init+0x1e>
    1256:	22 0f       	add	r18, r18
    1258:	33 1f       	adc	r19, r19
    125a:	8a 95       	dec	r24
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <M_Void_I2C_Init+0x1a>
    125e:	03 2e       	mov	r0, r19
    1260:	00 0c       	add	r0, r0
    1262:	44 0b       	sbc	r20, r20
    1264:	55 0b       	sbc	r21, r21
    1266:	60 e4       	ldi	r22, 0x40	; 64
    1268:	70 e0       	ldi	r23, 0x00	; 0
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	0e 94 be 09 	call	0x137c	; 0x137c <__udivmodsi4>
    1272:	20 b9       	out	0x00, r18	; 0
    1274:	08 95       	ret

00001276 <M_U8_I2C_Start>:
} 
/*************************		SEND START		*******************/
u8 M_U8_I2C_Start(){
	u8 transmit_status;		
	TWCR_REG =(1<<TWSTA)|(1<<TWEN)|(1<<TWINT); /*Enable TWI, generate START*/
    1276:	84 ea       	ldi	r24, 0xA4	; 164
    1278:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR_REG & (1<<TWINT)));	/* Wait until TWI finish its current job*/
    127a:	06 b6       	in	r0, 0x36	; 54
    127c:	07 fe       	sbrs	r0, 7
    127e:	fd cf       	rjmp	.-6      	; 0x127a <M_U8_I2C_Start+0x4>
	transmit_status = (TWSR_REG & 0xF8);		/* Read TWI status register */
    1280:	81 b1       	in	r24, 0x01	; 1
    1282:	88 7f       	andi	r24, 0xF8	; 248
	if(transmit_status != TWI_START)		/* Check weather START transmitted or not? */
    1284:	88 30       	cpi	r24, 0x08	; 8
    1286:	09 f0       	breq	.+2      	; 0x128a <M_U8_I2C_Start+0x14>
	transmit_status = START_FAILED;			/* Return 0 to indicate start condition fail*/ 
    1288:	80 e0       	ldi	r24, 0x00	; 0
	return transmit_status;
} 
    128a:	08 95       	ret

0000128c <M_U8_I2C_SendSlaveAddressWithWrite>:
/*After Start we will send slave address with write*/
u8 M_U8_I2C_SendSlaveAddressWithWrite (u8 write_address){
	u8 transmit_status;
	/*SEND ADDRESS BYTE*/
	TWDR_REG = write_address;		    /* Write SLA+W in TWI data register */
    128c:	83 b9       	out	0x03, r24	; 3
	TWCR_REG = (1<<TWEN)|(1<<TWINT);	/* Enable TWI & clear interrupt flag */
    128e:	84 e8       	ldi	r24, 0x84	; 132
    1290:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR_REG&(1<<TWINT)));		/* Wait until TWI finish its current job */
    1292:	06 b6       	in	r0, 0x36	; 54
    1294:	07 fe       	sbrs	r0, 7
    1296:	fd cf       	rjmp	.-6      	; 0x1292 <M_U8_I2C_SendSlaveAddressWithWrite+0x6>
	
	/*CHECK TRANSMIT WITH ACK*/
	transmit_status= (TWSR_REG & 0xF8);		/* Read TWI status register */
    1298:	81 b1       	in	r24, 0x01	; 1
	/*TRANSMIT WITH NO ACK*/
	else if(transmit_status == TWI_MT_SLA_NACK)		/* Check for SLA+W transmitted*/
	transmit_status = TWI_MT_SLA_NACK;				/* Nack received */  
	
	return transmit_status;
}
    129a:	88 7f       	andi	r24, 0xF8	; 248
    129c:	08 95       	ret

0000129e <M_U8_I2C_Repeated_Start>:
/**************************		REPEAT START FUNCTION		****************/
u8 M_U8_I2C_Repeated_Start(){
	u8 transmit_status;									
	TWCR_REG = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT); /* Enable TWI, generate start */
    129e:	84 ea       	ldi	r24, 0xA4	; 164
    12a0:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR_REG & (1<<TWINT)));			/* Wait until TWI finish its current job */
    12a2:	06 b6       	in	r0, 0x36	; 54
    12a4:	07 fe       	sbrs	r0, 7
    12a6:	fd cf       	rjmp	.-6      	; 0x12a2 <M_U8_I2C_Repeated_Start+0x4>
	transmit_status = TWSR_REG & 0xF8;					/* Read TWI status register */
    12a8:	81 b1       	in	r24, 0x01	; 1
    12aa:	88 7f       	andi	r24, 0xF8	; 248
	if(transmit_status!= TWI_REP_START)					/* Check for repeated start transmitted */
    12ac:	80 31       	cpi	r24, 0x10	; 16
    12ae:	09 f0       	breq	.+2      	; 0x12b2 <M_U8_I2C_Repeated_Start+0x14>
	transmit_status = REP_START_FAILED;					/* repeated start condition fail */
    12b0:	80 e0       	ldi	r24, 0x00	; 0
	
	return transmit_status; 
}
    12b2:	08 95       	ret

000012b4 <M_U8_I2C_SendSlaveAddressWithRead>:
/**************************		SEND SLAVE ADDRESS WITH WRITE	**************/
u8 M_U8_I2C_SendSlaveAddressWithRead(u8 read_address){
	u8 transmit_status; 
	TWDR_REG = read_address;					/* Write SLA+R in TWI data register */
    12b4:	83 b9       	out	0x03, r24	; 3
	TWCR_REG = (1<<TWEN)|(1<<TWINT);			/* Enable TWI and clear interrupt flag */
    12b6:	84 e8       	ldi	r24, 0x84	; 132
    12b8:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR_REG&(1<<TWINT)));				/* Wait until TWI finish its current job */
    12ba:	06 b6       	in	r0, 0x36	; 54
    12bc:	07 fe       	sbrs	r0, 7
    12be:	fd cf       	rjmp	.-6      	; 0x12ba <M_U8_I2C_SendSlaveAddressWithRead+0x6>
	transmit_status = TWSR_REG & 0xF8;					/* Read TWI status register */
    12c0:	81 b1       	in	r24, 0x01	; 1
	transmit_status = TWI_MT_SLA_R_ACK;					/* Ack received */
	else if(transmit_status == TWI_MR_SLA_R_NACK)				/* Check for SLA+R transmitted*/
	transmit_status = TWI_MR_SLA_R_NACK;					/* Nack received */
	
	return transmit_status; 
}
    12c2:	88 7f       	andi	r24, 0xF8	; 248
    12c4:	08 95       	ret

000012c6 <M_U8_I2C_Write>:
/**************************		WRITE DATA	FUNCTION	***********************/
u8 M_U8_I2C_Write(u8 data){
	u8 transmit_status;						
	TWDR_REG = data;				/* Copy data in TWI data register */
    12c6:	83 b9       	out	0x03, r24	; 3
	TWCR_REG = (1<<TWEN)|(1<<TWINT);/* Enable TWI and clear interrupt flag */
    12c8:	84 e8       	ldi	r24, 0x84	; 132
    12ca:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR_REG&(1<<TWINT)));	/* Wait until TWI finish its current job */
    12cc:	06 b6       	in	r0, 0x36	; 54
    12ce:	07 fe       	sbrs	r0, 7
    12d0:	fd cf       	rjmp	.-6      	; 0x12cc <M_U8_I2C_Write+0x6>
	transmit_status = TWSR_REG & 0xF8;		/* Read TWI status register */
    12d2:	81 b1       	in	r24, 0x01	; 1
	transmit_status = TWI_MT_DATA_ACK;			/* Ack received */
	else if(transmit_status==TWI_MT_DATA_NACK)	/* Check for data transmitted*/
	transmit_status = TWI_MT_DATA_NACK;		/* Nack received */ 
	
	return transmit_status; 
}
    12d4:	88 7f       	andi	r24, 0xF8	; 248
    12d6:	08 95       	ret

000012d8 <M_U8_I2C_ReadWithAck>:
u8 M_U8_I2C_ReadWithAck(){
	TWCR_REG = (1<<TWEN)|(1<<TWINT)|(1<<TWEA);	/* Enable TWI, generation of Ack */
    12d8:	84 ec       	ldi	r24, 0xC4	; 196
    12da:	86 bf       	out	0x36, r24	; 54
    while(!(TWCR_REG&(1<<TWINT)));				/* Wait until TWI finish its current job */
    12dc:	06 b6       	in	r0, 0x36	; 54
    12de:	07 fe       	sbrs	r0, 7
    12e0:	fd cf       	rjmp	.-6      	; 0x12dc <M_U8_I2C_ReadWithAck+0x4>
    return TWDR_REG;							/* Return received data */
    12e2:	83 b1       	in	r24, 0x03	; 3
}
    12e4:	08 95       	ret

000012e6 <M_U8_I2C_ReadWithNack>:
u8 M_U8_I2C_ReadWithNack(){
	TWCR_REG =(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
    12e6:	84 e8       	ldi	r24, 0x84	; 132
    12e8:	86 bf       	out	0x36, r24	; 54
    while(!(TWCR_REG&(1<<TWINT)));			/* Wait until TWI finish its current job */
    12ea:	06 b6       	in	r0, 0x36	; 54
    12ec:	07 fe       	sbrs	r0, 7
    12ee:	fd cf       	rjmp	.-6      	; 0x12ea <M_U8_I2C_ReadWithNack+0x4>
    return TWDR_REG;					/* Return received data */
    12f0:	83 b1       	in	r24, 0x03	; 3
}
    12f2:	08 95       	ret

000012f4 <M_Void_I2C_STOP>:
void M_Void_I2C_STOP(){
    TWCR_REG=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);/* Enable TWI, generate stop */
    12f4:	84 e9       	ldi	r24, 0x94	; 148
    12f6:	86 bf       	out	0x36, r24	; 54
    while(TWCR_REG&(1<<TWSTO));				 /* Wait until stop condition execution */
    12f8:	06 b6       	in	r0, 0x36	; 54
    12fa:	04 fc       	sbrc	r0, 4
    12fc:	fd cf       	rjmp	.-6      	; 0x12f8 <M_Void_I2C_STOP+0x4>
    12fe:	08 95       	ret

00001300 <UART_Init>:
		/*WAIT UNTIL THE RECIEVER FLAG IS ONE*/
	}
	return (UDR);
}
void UART_receiveByteAsynchCallBack(void(*CpyPtr)(u8)){
	ptr_func = CpyPtr; 
    1300:	80 b5       	in	r24, 0x20	; 32
    1302:	8f 77       	andi	r24, 0x7F	; 127
    1304:	80 bd       	out	0x20, r24	; 32
    1306:	10 bc       	out	0x20, r1	; 32
    1308:	80 e1       	ldi	r24, 0x10	; 16
    130a:	89 b9       	out	0x09, r24	; 9
    130c:	80 b5       	in	r24, 0x20	; 32
    130e:	80 bd       	out	0x20, r24	; 32
    1310:	88 e9       	ldi	r24, 0x98	; 152
    1312:	8a b9       	out	0x0a, r24	; 10
    1314:	80 b5       	in	r24, 0x20	; 32
    1316:	80 68       	ori	r24, 0x80	; 128
    1318:	80 bd       	out	0x20, r24	; 32
    131a:	86 e8       	ldi	r24, 0x86	; 134
    131c:	80 bd       	out	0x20, r24	; 32
    131e:	08 95       	ret

00001320 <UART_sendByte>:
    1320:	5d 9b       	sbis	0x0b, 5	; 11
    1322:	fe cf       	rjmp	.-4      	; 0x1320 <UART_sendByte>
    1324:	8c b9       	out	0x0c, r24	; 12
    1326:	5e 9b       	sbis	0x0b, 6	; 11
    1328:	fe cf       	rjmp	.-4      	; 0x1326 <UART_sendByte+0x6>
    132a:	08 95       	ret

0000132c <__vector_13>:
} 
ISR(USART_RXC_vect){
    132c:	1f 92       	push	r1
    132e:	0f 92       	push	r0
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	0f 92       	push	r0
    1334:	11 24       	eor	r1, r1
    1336:	2f 93       	push	r18
    1338:	3f 93       	push	r19
    133a:	4f 93       	push	r20
    133c:	5f 93       	push	r21
    133e:	6f 93       	push	r22
    1340:	7f 93       	push	r23
    1342:	8f 93       	push	r24
    1344:	9f 93       	push	r25
    1346:	af 93       	push	r26
    1348:	bf 93       	push	r27
    134a:	ef 93       	push	r30
    134c:	ff 93       	push	r31
	ptr_func(UDR);
    134e:	8c b1       	in	r24, 0x0c	; 12
    1350:	e0 91 ab 01 	lds	r30, 0x01AB	; 0x8001ab <ptr_func>
    1354:	f0 91 ac 01 	lds	r31, 0x01AC	; 0x8001ac <ptr_func+0x1>
    1358:	09 95       	icall
}
    135a:	ff 91       	pop	r31
    135c:	ef 91       	pop	r30
    135e:	bf 91       	pop	r27
    1360:	af 91       	pop	r26
    1362:	9f 91       	pop	r25
    1364:	8f 91       	pop	r24
    1366:	7f 91       	pop	r23
    1368:	6f 91       	pop	r22
    136a:	5f 91       	pop	r21
    136c:	4f 91       	pop	r20
    136e:	3f 91       	pop	r19
    1370:	2f 91       	pop	r18
    1372:	0f 90       	pop	r0
    1374:	0f be       	out	0x3f, r0	; 63
    1376:	0f 90       	pop	r0
    1378:	1f 90       	pop	r1
    137a:	18 95       	reti

0000137c <__udivmodsi4>:
    137c:	a1 e2       	ldi	r26, 0x21	; 33
    137e:	1a 2e       	mov	r1, r26
    1380:	aa 1b       	sub	r26, r26
    1382:	bb 1b       	sub	r27, r27
    1384:	fd 01       	movw	r30, r26
    1386:	0d c0       	rjmp	.+26     	; 0x13a2 <__udivmodsi4_ep>

00001388 <__udivmodsi4_loop>:
    1388:	aa 1f       	adc	r26, r26
    138a:	bb 1f       	adc	r27, r27
    138c:	ee 1f       	adc	r30, r30
    138e:	ff 1f       	adc	r31, r31
    1390:	a2 17       	cp	r26, r18
    1392:	b3 07       	cpc	r27, r19
    1394:	e4 07       	cpc	r30, r20
    1396:	f5 07       	cpc	r31, r21
    1398:	20 f0       	brcs	.+8      	; 0x13a2 <__udivmodsi4_ep>
    139a:	a2 1b       	sub	r26, r18
    139c:	b3 0b       	sbc	r27, r19
    139e:	e4 0b       	sbc	r30, r20
    13a0:	f5 0b       	sbc	r31, r21

000013a2 <__udivmodsi4_ep>:
    13a2:	66 1f       	adc	r22, r22
    13a4:	77 1f       	adc	r23, r23
    13a6:	88 1f       	adc	r24, r24
    13a8:	99 1f       	adc	r25, r25
    13aa:	1a 94       	dec	r1
    13ac:	69 f7       	brne	.-38     	; 0x1388 <__udivmodsi4_loop>
    13ae:	60 95       	com	r22
    13b0:	70 95       	com	r23
    13b2:	80 95       	com	r24
    13b4:	90 95       	com	r25
    13b6:	9b 01       	movw	r18, r22
    13b8:	ac 01       	movw	r20, r24
    13ba:	bd 01       	movw	r22, r26
    13bc:	cf 01       	movw	r24, r30
    13be:	08 95       	ret

000013c0 <__divmodsi4>:
    13c0:	05 2e       	mov	r0, r21
    13c2:	97 fb       	bst	r25, 7
    13c4:	1e f4       	brtc	.+6      	; 0x13cc <__divmodsi4+0xc>
    13c6:	00 94       	com	r0
    13c8:	0e 94 f7 09 	call	0x13ee	; 0x13ee <__negsi2>
    13cc:	57 fd       	sbrc	r21, 7
    13ce:	07 d0       	rcall	.+14     	; 0x13de <__divmodsi4_neg2>
    13d0:	0e 94 be 09 	call	0x137c	; 0x137c <__udivmodsi4>
    13d4:	07 fc       	sbrc	r0, 7
    13d6:	03 d0       	rcall	.+6      	; 0x13de <__divmodsi4_neg2>
    13d8:	4e f4       	brtc	.+18     	; 0x13ec <__divmodsi4_exit>
    13da:	0c 94 f7 09 	jmp	0x13ee	; 0x13ee <__negsi2>

000013de <__divmodsi4_neg2>:
    13de:	50 95       	com	r21
    13e0:	40 95       	com	r20
    13e2:	30 95       	com	r19
    13e4:	21 95       	neg	r18
    13e6:	3f 4f       	sbci	r19, 0xFF	; 255
    13e8:	4f 4f       	sbci	r20, 0xFF	; 255
    13ea:	5f 4f       	sbci	r21, 0xFF	; 255

000013ec <__divmodsi4_exit>:
    13ec:	08 95       	ret

000013ee <__negsi2>:
    13ee:	90 95       	com	r25
    13f0:	80 95       	com	r24
    13f2:	70 95       	com	r23
    13f4:	61 95       	neg	r22
    13f6:	7f 4f       	sbci	r23, 0xFF	; 255
    13f8:	8f 4f       	sbci	r24, 0xFF	; 255
    13fa:	9f 4f       	sbci	r25, 0xFF	; 255
    13fc:	08 95       	ret

000013fe <_exit>:
    13fe:	f8 94       	cli

00001400 <__stop_program>:
    1400:	ff cf       	rjmp	.-2      	; 0x1400 <__stop_program>
