
AttendanceBiometricSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000148  00800060  000013d4  00001468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  008001a8  008001a8  000015b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000015e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000348  00000000  00000000  0000161c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000040da  00000000  00000000  00001964  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001325  00000000  00000000  00005a3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002289  00000000  00000000  00006d63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000718  00000000  00000000  00008fec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f33  00000000  00000000  00009704  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c5b  00000000  00000000  0000a637  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000288  00000000  00000000  0000c292  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 7f 09 	jmp	0x12fe	; 0x12fe <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ed       	ldi	r30, 0xD4	; 212
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a8 ea       	ldi	r26, 0xA8	; 168
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3b       	cpi	r26, 0xB7	; 183
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d3 06 	call	0xda6	; 0xda6 <main>
      8a:	0c 94 e8 09 	jmp	0x13d0	; 0x13d0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_Init>:
*  Return Value     : NONE
*************************************************************************/
void APP_Init(void)
{
	u8 key = KEYPAD_RELEASED;
	H_Lcd_Void_LCDClear();
      92:	0e 94 ad 05 	call	0xb5a	; 0xb5a <H_Lcd_Void_LCDClear>
	H_Lcd_Void_LCDGoTo(0,0);
      96:	60 e0       	ldi	r22, 0x00	; 0
      98:	80 e0       	ldi	r24, 0x00	; 0
      9a:	0e 94 10 06 	call	0xc20	; 0xc20 <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteString((u8*)"Please Press");
      9e:	83 e9       	ldi	r24, 0x93	; 147
      a0:	90 e0       	ldi	r25, 0x00	; 0
      a2:	0e 94 9a 05 	call	0xb34	; 0xb34 <H_Lcd_Void_LCDWriteString>
	H_Lcd_Void_LCDGoTo(1,0);
      a6:	60 e0       	ldi	r22, 0x00	; 0
      a8:	81 e0       	ldi	r24, 0x01	; 1
      aa:	0e 94 10 06 	call	0xc20	; 0xc20 <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteString((u8*)"(*) : Attendance");
      ae:	80 ea       	ldi	r24, 0xA0	; 160
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	0e 94 9a 05 	call	0xb34	; 0xb34 <H_Lcd_Void_LCDWriteString>
	H_Lcd_Void_LCDGoTo(2,0);
      b6:	60 e0       	ldi	r22, 0x00	; 0
      b8:	82 e0       	ldi	r24, 0x02	; 2
      ba:	0e 94 10 06 	call	0xc20	; 0xc20 <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteString((u8*)"(#) : New Employee");
      be:	81 eb       	ldi	r24, 0xB1	; 177
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	0e 94 9a 05 	call	0xb34	; 0xb34 <H_Lcd_Void_LCDWriteString>
*  parameters (out) : None
*  Return Value     : NONE
*************************************************************************/
void APP_Init(void)
{
	u8 key = KEYPAD_RELEASED;
      c6:	81 e0       	ldi	r24, 0x01	; 1
	H_Lcd_Void_LCDGoTo(1,0);
	H_Lcd_Void_LCDWriteString((u8*)"(*) : Attendance");
	H_Lcd_Void_LCDGoTo(2,0);
	H_Lcd_Void_LCDWriteString((u8*)"(#) : New Employee");
	/*((key != CONFIRM_ATTENDANCE_BUTTON_PRESSED) || (key != NEW_ENROLLEMENT_BUTTON_PRESSED));*/ 
	while (key == KEYPAD_RELEASED){
      c8:	02 c0       	rjmp	.+4      	; 0xce <APP_Init+0x3c>
		key = H_KeyPad_U8_KeyPadRead();
      ca:	0e 94 24 04 	call	0x848	; 0x848 <H_KeyPad_U8_KeyPadRead>
	H_Lcd_Void_LCDGoTo(1,0);
	H_Lcd_Void_LCDWriteString((u8*)"(*) : Attendance");
	H_Lcd_Void_LCDGoTo(2,0);
	H_Lcd_Void_LCDWriteString((u8*)"(#) : New Employee");
	/*((key != CONFIRM_ATTENDANCE_BUTTON_PRESSED) || (key != NEW_ENROLLEMENT_BUTTON_PRESSED));*/ 
	while (key == KEYPAD_RELEASED){
      ce:	81 30       	cpi	r24, 0x01	; 1
      d0:	e1 f3       	breq	.-8      	; 0xca <APP_Init+0x38>
		key = H_KeyPad_U8_KeyPadRead();
	}
	
	switch(key)
      d2:	83 32       	cpi	r24, 0x23	; 35
      d4:	31 f0       	breq	.+12     	; 0xe2 <APP_Init+0x50>
      d6:	8a 32       	cpi	r24, 0x2A	; 42
      d8:	39 f4       	brne	.+14     	; 0xe8 <APP_Init+0x56>
	{
	case CONFIRM_ATTENDANCE_BUTTON_PRESSED:
	g_SystemState = CONFIRM_ATTENDANCE_ENTER_ID;
      da:	87 e0       	ldi	r24, 0x07	; 7
      dc:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <g_SystemState>
	break;
      e0:	08 95       	ret
	case NEW_ENROLLEMENT_BUTTON_PRESSED:
	g_SystemState = NEW_ENROLLMENT_SET_NEW_ID;
      e2:	81 e0       	ldi	r24, 0x01	; 1
      e4:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <g_SystemState>
      e8:	08 95       	ret

000000ea <APP_GetID>:
*  parameters (in)  : None
*  parameters (out) : APP_EmpID ID value
*  Return Value     : from 0x01 to 0x0F
*************************************************************************/
APP_EmpID APP_GetID(void)
{
      ea:	cf 93       	push	r28
      ec:	df 93       	push	r29
	APP_EmpID Copy_ID =0;
	u8 Temp_keyPressed =0;

	/*go to the first place in the second line */
	H_Lcd_Void_LCDClear();
      ee:	0e 94 ad 05 	call	0xb5a	; 0xb5a <H_Lcd_Void_LCDClear>
	H_Lcd_Void_LCDGoTo(0,0);
      f2:	60 e0       	ldi	r22, 0x00	; 0
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	0e 94 10 06 	call	0xc20	; 0xc20 <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteString((u8*)"Please Enter Your ID");
      fa:	84 ec       	ldi	r24, 0xC4	; 196
      fc:	90 e0       	ldi	r25, 0x00	; 0
      fe:	0e 94 9a 05 	call	0xb34	; 0xb34 <H_Lcd_Void_LCDWriteString>
	H_Lcd_Void_LCDGoTo(1,0);
     102:	60 e0       	ldi	r22, 0x00	; 0
     104:	81 e0       	ldi	r24, 0x01	; 1
     106:	0e 94 10 06 	call	0xc20	; 0xc20 <H_Lcd_Void_LCDGoTo>
*  parameters (out) : APP_EmpID ID value
*  Return Value     : from 0x01 to 0x0F
*************************************************************************/
APP_EmpID APP_GetID(void)
{
	APP_EmpID Copy_ID =0;
     10a:	d0 e0       	ldi	r29, 0x00	; 0

	/*this while loop keeps taking input buttons from user via Keypad
	 *until user press ENTER button and convert the input uint8 char into u8 integer value*/
	do
	{
		Temp_keyPressed = H_KeyPad_U8_KeyPadRead();/*get char reading from user via keypad*/
     10c:	0e 94 24 04 	call	0x848	; 0x848 <H_KeyPad_U8_KeyPadRead>
		if(GOBACK_BUTTON_PRESSED == Temp_keyPressed)
     110:	81 34       	cpi	r24, 0x41	; 65
     112:	a1 f0       	breq	.+40     	; 0x13c <APP_GetID+0x52>
		{	/*if the user pressed the go-back button in the middle of the operation
		 	  Ignore the inputs by overwriting the Copy_ID by 0xFF and break the loop*/
			Copy_ID = GOBACK;
			break;
		}
		if(((Temp_keyPressed >= MIN_DIGIT) && (Temp_keyPressed <= MAX_DIGIT)))
     114:	c0 ed       	ldi	r28, 0xD0	; 208
     116:	c8 0f       	add	r28, r24
     118:	ca 30       	cpi	r28, 0x0A	; 10
     11a:	68 f4       	brcc	.+26     	; 0x136 <APP_GetID+0x4c>
		{
			/*convert the ASCII to decimal char by char BY -THE ZERO ASCII (48) from the input*/
			Temp_keyPressed-=48;

			H_Lcd_Void_LCDWriteNumber(Temp_keyPressed);/*display the number on the LCD for User interface*/
     11c:	6c 2f       	mov	r22, r28
     11e:	70 e0       	ldi	r23, 0x00	; 0
     120:	80 e0       	ldi	r24, 0x00	; 0
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	0e 94 b1 05 	call	0xb62	; 0xb62 <H_Lcd_Void_LCDWriteNumber>

			Copy_ID = ((Copy_ID * 10 ) + Temp_keyPressed) ;/*convert ID into u8 integer value*/
     128:	dd 0f       	add	r29, r29
     12a:	8d 2f       	mov	r24, r29
     12c:	88 0f       	add	r24, r24
     12e:	88 0f       	add	r24, r24
     130:	d8 0f       	add	r29, r24
     132:	dc 0f       	add	r29, r28
			break;
		}
		if(((Temp_keyPressed >= MIN_DIGIT) && (Temp_keyPressed <= MAX_DIGIT)))
		{
			/*convert the ASCII to decimal char by char BY -THE ZERO ASCII (48) from the input*/
			Temp_keyPressed-=48;
     134:	8c 2f       	mov	r24, r28
			H_Lcd_Void_LCDWriteNumber(Temp_keyPressed);/*display the number on the LCD for User interface*/

			Copy_ID = ((Copy_ID * 10 ) + Temp_keyPressed) ;/*convert ID into u8 integer value*/

		}
	}while(ENTER_BUTTON_PRESSED != Temp_keyPressed);
     136:	84 34       	cpi	r24, 0x44	; 68
     138:	49 f7       	brne	.-46     	; 0x10c <APP_GetID+0x22>
     13a:	01 c0       	rjmp	.+2      	; 0x13e <APP_GetID+0x54>
	{
		Temp_keyPressed = H_KeyPad_U8_KeyPadRead();/*get char reading from user via keypad*/
		if(GOBACK_BUTTON_PRESSED == Temp_keyPressed)
		{	/*if the user pressed the go-back button in the middle of the operation
		 	  Ignore the inputs by overwriting the Copy_ID by 0xFF and break the loop*/
			Copy_ID = GOBACK;
     13c:	df ef       	ldi	r29, 0xFF	; 255

			Copy_ID = ((Copy_ID * 10 ) + Temp_keyPressed) ;/*convert ID into u8 integer value*/

		}
	}while(ENTER_BUTTON_PRESSED != Temp_keyPressed);
	if((Copy_ID>MAX_ALLOWED_ID)||(Copy_ID<MIN_ALLOWED_ID)){
     13e:	8f ef       	ldi	r24, 0xFF	; 255
     140:	8d 0f       	add	r24, r29
     142:	8f 30       	cpi	r24, 0x0F	; 15
     144:	08 f0       	brcs	.+2      	; 0x148 <APP_GetID+0x5e>
		Copy_ID=OUT_OF_RANGE_ID;
     146:	de ef       	ldi	r29, 0xFE	; 254
	}
	return Copy_ID;/*return the ID u8 integer value*/
}
     148:	8d 2f       	mov	r24, r29
     14a:	df 91       	pop	r29
     14c:	cf 91       	pop	r28
     14e:	08 95       	ret

00000150 <APP_CheckIDPresence>:
*  Return Value     : CONFIRM_ATTENDANCE_NOTFOUND_ID
*  					  CONFIRM_ATTENDANCE_FOUND_ID
*************************************************************************/

APP_CurrentState APP_CheckIDPresence ( APP_EmpID copy_ID)
{
     150:	cf 93       	push	r28
     152:	c8 2f       	mov	r28, r24
	/*check if the ID value is saved in the EEPROM
	 * or not and return the state of presence */
	APP_CurrentState Local_Is_found = 0;
	if(copy_ID == H_Void_EEPROMRead(copy_ID))
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	0e 94 dd 01 	call	0x3ba	; 0x3ba <H_Void_EEPROMRead>
     15a:	c8 13       	cpse	r28, r24
     15c:	02 c0       	rjmp	.+4      	; 0x162 <APP_CheckIDPresence+0x12>
	{
		Local_Is_found = FOUND_ID;
     15e:	89 e0       	ldi	r24, 0x09	; 9
     160:	01 c0       	rjmp	.+2      	; 0x164 <APP_CheckIDPresence+0x14>
	}
	else
	{
		Local_Is_found = NOTFOUND_ID;
     162:	88 e0       	ldi	r24, 0x08	; 8
	}
	return Local_Is_found;
}
     164:	cf 91       	pop	r28
     166:	08 95       	ret

00000168 <APP_SetNewID>:
*  parameters (out) : None
*  Return Value     : None
*************************************************************************/
void APP_SetNewID(APP_EmpID copy_ID)
{
	H_Void_EEPROMWrite((u16)copy_ID , copy_ID);
     168:	68 2f       	mov	r22, r24
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	0e 94 bf 01 	call	0x37e	; 0x37e <H_Void_EEPROMWrite>
	g_SystemState = NEW_ENROLLMENT_ID_SUCCESS;
     170:	82 e0       	ldi	r24, 0x02	; 2
     172:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <g_SystemState>
     176:	08 95       	ret

00000178 <APP_NewEnrollemtSuccessful>:
*  parameters (in)  : None
*  parameters (out) : None
*  Return Value     : None
*************************************************************************/
void APP_NewEnrollemtSuccessful(void){
	H_Lcd_Void_LCDClear();
     178:	0e 94 ad 05 	call	0xb5a	; 0xb5a <H_Lcd_Void_LCDClear>
	H_Lcd_Void_LCDWriteString((u8*) "New Enrollment successful");
     17c:	89 ed       	ldi	r24, 0xD9	; 217
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	0e 94 9a 05 	call	0xb34	; 0xb34 <H_Lcd_Void_LCDWriteString>
	H_LED_Void_LedOn(LED_GRN);
     184:	83 e0       	ldi	r24, 0x03	; 3
     186:	0e 94 4e 06 	call	0xc9c	; 0xc9c <H_LED_Void_LedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     18a:	2f e3       	ldi	r18, 0x3F	; 63
     18c:	82 e4       	ldi	r24, 0x42	; 66
     18e:	9f e0       	ldi	r25, 0x0F	; 15
     190:	21 50       	subi	r18, 0x01	; 1
     192:	80 40       	sbci	r24, 0x00	; 0
     194:	90 40       	sbci	r25, 0x00	; 0
     196:	e1 f7       	brne	.-8      	; 0x190 <APP_NewEnrollemtSuccessful+0x18>
     198:	00 c0       	rjmp	.+0      	; 0x19a <APP_NewEnrollemtSuccessful+0x22>
     19a:	00 00       	nop
	_delay_ms(DISPLAY_FOR_5_SEC);
	H_LED_Void_LedOff(LED_GRN);
     19c:	83 e0       	ldi	r24, 0x03	; 3
     19e:	0e 94 6d 06 	call	0xcda	; 0xcda <H_LED_Void_LedOff>
     1a2:	08 95       	ret

000001a4 <APP_RTC_Display_Time_and_Date>:
*  parameters (out) : None
*  Return Value     : None
*************************************************************************/

void  APP_RTC_Display_Time_and_Date(Date_And_Time * ptr)
{
     1a4:	cf 93       	push	r28
     1a6:	df 93       	push	r29
     1a8:	ec 01       	movw	r28, r24
    H_Lcd_Void_LCDGoTo(2,0);
     1aa:	60 e0       	ldi	r22, 0x00	; 0
     1ac:	82 e0       	ldi	r24, 0x02	; 2
     1ae:	0e 94 10 06 	call	0xc20	; 0xc20 <H_Lcd_Void_LCDGoTo>
    H_Lcd_Void_LCDWriteString(RTC_Day_str_display[ptr->day]);
     1b2:	8b 81       	ldd	r24, Y+3	; 0x03
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	88 0f       	add	r24, r24
     1b8:	99 1f       	adc	r25, r25
     1ba:	88 0f       	add	r24, r24
     1bc:	99 1f       	adc	r25, r25
     1be:	80 5a       	subi	r24, 0xA0	; 160
     1c0:	9f 4f       	sbci	r25, 0xFF	; 255
     1c2:	0e 94 9a 05 	call	0xb34	; 0xb34 <H_Lcd_Void_LCDWriteString>
    H_Lcd_Void_LCDWriteCharacter(' ');
     1c6:	80 e2       	ldi	r24, 0x20	; 32
     1c8:	0e 94 af 04 	call	0x95e	; 0x95e <H_Lcd_Void_LCDWriteCharacter>
    H_Lcd_Void_LCDWriteNumber(ptr->date);
     1cc:	6c 81       	ldd	r22, Y+4	; 0x04
     1ce:	70 e0       	ldi	r23, 0x00	; 0
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	0e 94 b1 05 	call	0xb62	; 0xb62 <H_Lcd_Void_LCDWriteNumber>
    H_Lcd_Void_LCDWriteCharacter('/');
     1d8:	8f e2       	ldi	r24, 0x2F	; 47
     1da:	0e 94 af 04 	call	0x95e	; 0x95e <H_Lcd_Void_LCDWriteCharacter>
    H_Lcd_Void_LCDWriteNumber(ptr->month);
     1de:	6d 81       	ldd	r22, Y+5	; 0x05
     1e0:	70 e0       	ldi	r23, 0x00	; 0
     1e2:	80 e0       	ldi	r24, 0x00	; 0
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	0e 94 b1 05 	call	0xb62	; 0xb62 <H_Lcd_Void_LCDWriteNumber>
    H_Lcd_Void_LCDWriteCharacter('/');
     1ea:	8f e2       	ldi	r24, 0x2F	; 47
     1ec:	0e 94 af 04 	call	0x95e	; 0x95e <H_Lcd_Void_LCDWriteCharacter>
    H_Lcd_Void_LCDWriteNumber(20);
     1f0:	64 e1       	ldi	r22, 0x14	; 20
     1f2:	70 e0       	ldi	r23, 0x00	; 0
     1f4:	80 e0       	ldi	r24, 0x00	; 0
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	0e 94 b1 05 	call	0xb62	; 0xb62 <H_Lcd_Void_LCDWriteNumber>
    H_Lcd_Void_LCDWriteNumber(ptr->year);
     1fc:	6e 81       	ldd	r22, Y+6	; 0x06
     1fe:	70 e0       	ldi	r23, 0x00	; 0
     200:	80 e0       	ldi	r24, 0x00	; 0
     202:	90 e0       	ldi	r25, 0x00	; 0
     204:	0e 94 b1 05 	call	0xb62	; 0xb62 <H_Lcd_Void_LCDWriteNumber>
	H_Lcd_Void_LCDGoTo(3,0);
     208:	60 e0       	ldi	r22, 0x00	; 0
     20a:	83 e0       	ldi	r24, 0x03	; 3
     20c:	0e 94 10 06 	call	0xc20	; 0xc20 <H_Lcd_Void_LCDGoTo>
    H_Lcd_Void_LCDWriteNumber(ptr->hours);
     210:	6a 81       	ldd	r22, Y+2	; 0x02
     212:	70 e0       	ldi	r23, 0x00	; 0
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	0e 94 b1 05 	call	0xb62	; 0xb62 <H_Lcd_Void_LCDWriteNumber>
    H_Lcd_Void_LCDWriteCharacter(':');
     21c:	8a e3       	ldi	r24, 0x3A	; 58
     21e:	0e 94 af 04 	call	0x95e	; 0x95e <H_Lcd_Void_LCDWriteCharacter>
    H_Lcd_Void_LCDWriteNumber(ptr->min);
     222:	69 81       	ldd	r22, Y+1	; 0x01
     224:	70 e0       	ldi	r23, 0x00	; 0
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	0e 94 b1 05 	call	0xb62	; 0xb62 <H_Lcd_Void_LCDWriteNumber>
    H_Lcd_Void_LCDWriteCharacter(':');
     22e:	8a e3       	ldi	r24, 0x3A	; 58
     230:	0e 94 af 04 	call	0x95e	; 0x95e <H_Lcd_Void_LCDWriteCharacter>
    H_Lcd_Void_LCDWriteNumber(ptr->sec);
     234:	68 81       	ld	r22, Y
     236:	70 e0       	ldi	r23, 0x00	; 0
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	0e 94 b1 05 	call	0xb62	; 0xb62 <H_Lcd_Void_LCDWriteNumber>
    if((ptr->hours>=9)&&(ptr->min>0)){
     240:	8a 81       	ldd	r24, Y+2	; 0x02
     242:	89 30       	cpi	r24, 0x09	; 9
     244:	40 f0       	brcs	.+16     	; 0x256 <APP_RTC_Display_Time_and_Date+0xb2>
     246:	89 81       	ldd	r24, Y+1	; 0x01
     248:	88 23       	and	r24, r24
     24a:	29 f0       	breq	.+10     	; 0x256 <APP_RTC_Display_Time_and_Date+0xb2>
    	H_Lcd_Void_LCDWriteString((u8*) " LATE");
     24c:	83 ef       	ldi	r24, 0xF3	; 243
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	0e 94 9a 05 	call	0xb34	; 0xb34 <H_Lcd_Void_LCDWriteString>
     254:	04 c0       	rjmp	.+8      	; 0x25e <APP_RTC_Display_Time_and_Date+0xba>
    }
    else{
    	H_Lcd_Void_LCDWriteString((u8*) " welcome");
     256:	89 ef       	ldi	r24, 0xF9	; 249
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	0e 94 9a 05 	call	0xb34	; 0xb34 <H_Lcd_Void_LCDWriteString>
    }
}
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	08 95       	ret

00000264 <APP_Confirm_Attendance_Success>:
*  Reentrance       : Reentrant
*  parameters (in)  : None
*  parameters (out) : None
*  Return Value     : None
*************************************************************************/
void APP_Confirm_Attendance_Success(APP_EmpID copy_ID, Date_And_Time* CurrentDateAndTime_ptr){
     264:	0f 93       	push	r16
     266:	1f 93       	push	r17
     268:	cf 93       	push	r28
     26a:	c8 2f       	mov	r28, r24
     26c:	8b 01       	movw	r16, r22
	H_Lcd_Void_LCDClear();
     26e:	0e 94 ad 05 	call	0xb5a	; 0xb5a <H_Lcd_Void_LCDClear>
	/*LCD says Hi Tarek for ID 7, Hi youssef for ID 6 and Hi seif for ID 5 */
	if(copy_ID == TAREK_ID){
     272:	c7 30       	cpi	r28, 0x07	; 7
     274:	49 f4       	brne	.+18     	; 0x288 <APP_Confirm_Attendance_Success+0x24>
		H_Lcd_Void_LCDWriteString((u8*) "Hi Tarek");
     276:	82 e0       	ldi	r24, 0x02	; 2
     278:	91 e0       	ldi	r25, 0x01	; 1
     27a:	0e 94 9a 05 	call	0xb34	; 0xb34 <H_Lcd_Void_LCDWriteString>
		H_Lcd_Void_LCDGoTo(1,0);
     27e:	60 e0       	ldi	r22, 0x00	; 0
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	0e 94 10 06 	call	0xc20	; 0xc20 <H_Lcd_Void_LCDGoTo>
     286:	15 c0       	rjmp	.+42     	; 0x2b2 <APP_Confirm_Attendance_Success+0x4e>
	}
	else if(copy_ID == YOUSSEF_ID){
     288:	c6 30       	cpi	r28, 0x06	; 6
     28a:	49 f4       	brne	.+18     	; 0x29e <APP_Confirm_Attendance_Success+0x3a>
		H_Lcd_Void_LCDWriteString((u8*) "Hi Youssef");
     28c:	8b e0       	ldi	r24, 0x0B	; 11
     28e:	91 e0       	ldi	r25, 0x01	; 1
     290:	0e 94 9a 05 	call	0xb34	; 0xb34 <H_Lcd_Void_LCDWriteString>
		H_Lcd_Void_LCDGoTo(1,0);
     294:	60 e0       	ldi	r22, 0x00	; 0
     296:	81 e0       	ldi	r24, 0x01	; 1
     298:	0e 94 10 06 	call	0xc20	; 0xc20 <H_Lcd_Void_LCDGoTo>
     29c:	0a c0       	rjmp	.+20     	; 0x2b2 <APP_Confirm_Attendance_Success+0x4e>
	}
	else if(copy_ID == SEIF_ID){
     29e:	c5 30       	cpi	r28, 0x05	; 5
     2a0:	41 f4       	brne	.+16     	; 0x2b2 <APP_Confirm_Attendance_Success+0x4e>
		H_Lcd_Void_LCDWriteString((u8*) "Hi Seif");
     2a2:	86 e1       	ldi	r24, 0x16	; 22
     2a4:	91 e0       	ldi	r25, 0x01	; 1
     2a6:	0e 94 9a 05 	call	0xb34	; 0xb34 <H_Lcd_Void_LCDWriteString>
		H_Lcd_Void_LCDGoTo(1,0);
     2aa:	60 e0       	ldi	r22, 0x00	; 0
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	0e 94 10 06 	call	0xc20	; 0xc20 <H_Lcd_Void_LCDGoTo>
	}
	H_Lcd_Void_LCDWriteString((u8*) "Attendance success");
     2b2:	8e e1       	ldi	r24, 0x1E	; 30
     2b4:	91 e0       	ldi	r25, 0x01	; 1
     2b6:	0e 94 9a 05 	call	0xb34	; 0xb34 <H_Lcd_Void_LCDWriteString>
	/*Get the current time and display it on LCD to show if late or not*/
	RTC_Get_Time(CurrentDateAndTime_ptr);
     2ba:	c8 01       	movw	r24, r16
     2bc:	0e 94 97 06 	call	0xd2e	; 0xd2e <RTC_Get_Time>
	APP_RTC_Display_Time_and_Date(CurrentDateAndTime_ptr);
     2c0:	c8 01       	movw	r24, r16
     2c2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <APP_RTC_Display_Time_and_Date>
	/*Opens the door for the employee and the green led for 5 secs*/
	Relay_ON(RELAY_1_PIN);
     2c6:	85 e2       	ldi	r24, 0x25	; 37
     2c8:	0e 94 8c 06 	call	0xd18	; 0xd18 <Relay_ON>
	H_LED_Void_LedOn(LED_GRN);
     2cc:	83 e0       	ldi	r24, 0x03	; 3
     2ce:	0e 94 4e 06 	call	0xc9c	; 0xc9c <H_LED_Void_LedOn>
     2d2:	2f e3       	ldi	r18, 0x3F	; 63
     2d4:	82 e4       	ldi	r24, 0x42	; 66
     2d6:	9f e0       	ldi	r25, 0x0F	; 15
     2d8:	21 50       	subi	r18, 0x01	; 1
     2da:	80 40       	sbci	r24, 0x00	; 0
     2dc:	90 40       	sbci	r25, 0x00	; 0
     2de:	e1 f7       	brne	.-8      	; 0x2d8 <APP_Confirm_Attendance_Success+0x74>
     2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <APP_Confirm_Attendance_Success+0x7e>
     2e2:	00 00       	nop
	_delay_ms(DISPLAY_FOR_5_SEC);
	Relay_OFF(RELAY_1_PIN);
     2e4:	85 e2       	ldi	r24, 0x25	; 37
     2e6:	0e 94 90 06 	call	0xd20	; 0xd20 <Relay_OFF>
	H_LED_Void_LedOff(LED_GRN);
     2ea:	83 e0       	ldi	r24, 0x03	; 3
     2ec:	0e 94 6d 06 	call	0xcda	; 0xcda <H_LED_Void_LedOff>
}
     2f0:	cf 91       	pop	r28
     2f2:	1f 91       	pop	r17
     2f4:	0f 91       	pop	r16
     2f6:	08 95       	ret

000002f8 <APP_PutFingerToScan>:
*  parameters (in)  : None
*  parameters (out) : None
*  Return Value     : None
*************************************************************************/
void APP_PutFingerToScan(void){
	H_Lcd_Void_LCDClear();
     2f8:	0e 94 ad 05 	call	0xb5a	; 0xb5a <H_Lcd_Void_LCDClear>
	H_Lcd_Void_LCDWriteString((u8*) "Put finger to scan");
     2fc:	81 e3       	ldi	r24, 0x31	; 49
     2fe:	91 e0       	ldi	r25, 0x01	; 1
     300:	0e 94 9a 05 	call	0xb34	; 0xb34 <H_Lcd_Void_LCDWriteString>
     304:	08 95       	ret

00000306 <APP_WarningHandler>:
*  Reentrance       : Reentrant
*  parameters (in)  : WarningType
*  parameters (out) : None
*  Return Value     : user_action (GOBACK_BUTTON_PRESSED or MAIN_MENU_BUTTON_PRESSED)
*************************************************************************/
u8 APP_WarningHandler(APP_Warnings warningType){
     306:	c8 2f       	mov	r28, r24
	* led red on  +  lcd warning display
	* wait  for the go back key to get pressed
	* then
	* initial state */
	u8 user_action=0;
	H_LED_Void_LedOn(LED_RED);
     308:	84 e0       	ldi	r24, 0x04	; 4
     30a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <H_LED_Void_LedOn>
	H_Lcd_Void_LCDClear();
     30e:	0e 94 ad 05 	call	0xb5a	; 0xb5a <H_Lcd_Void_LCDClear>
	H_Lcd_Void_LCDWriteString((u8*) "Warning:");
     312:	84 e4       	ldi	r24, 0x44	; 68
     314:	91 e0       	ldi	r25, 0x01	; 1
     316:	0e 94 9a 05 	call	0xb34	; 0xb34 <H_Lcd_Void_LCDWriteString>
	H_Lcd_Void_LCDGoTo(1,0);
     31a:	60 e0       	ldi	r22, 0x00	; 0
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	0e 94 10 06 	call	0xc20	; 0xc20 <H_Lcd_Void_LCDGoTo>
	/*Switch on warning type and print the warning on LCD*/
	switch (warningType){
     322:	c1 30       	cpi	r28, 0x01	; 1
     324:	81 f0       	breq	.+32     	; 0x346 <APP_WarningHandler+0x40>
     326:	28 f0       	brcs	.+10     	; 0x332 <APP_WarningHandler+0x2c>
     328:	c2 30       	cpi	r28, 0x02	; 2
     32a:	91 f0       	breq	.+36     	; 0x350 <APP_WarningHandler+0x4a>
     32c:	ce 3f       	cpi	r28, 0xFE	; 254
     32e:	31 f0       	breq	.+12     	; 0x33c <APP_WarningHandler+0x36>
     330:	13 c0       	rjmp	.+38     	; 0x358 <APP_WarningHandler+0x52>
	case ALREADY_TAKEN_ID:
		H_Lcd_Void_LCDWriteString((u8*) "ALREADY TAKEN ID");
     332:	8d e4       	ldi	r24, 0x4D	; 77
     334:	91 e0       	ldi	r25, 0x01	; 1
     336:	0e 94 9a 05 	call	0xb34	; 0xb34 <H_Lcd_Void_LCDWriteString>
	break;
     33a:	0e c0       	rjmp	.+28     	; 0x358 <APP_WarningHandler+0x52>
	case OUT_OF_RANGE_ID:
		H_Lcd_Void_LCDWriteString((u8*) "OUT OF RANGE ID");
     33c:	8e e5       	ldi	r24, 0x5E	; 94
     33e:	91 e0       	ldi	r25, 0x01	; 1
     340:	0e 94 9a 05 	call	0xb34	; 0xb34 <H_Lcd_Void_LCDWriteString>
	break;
     344:	09 c0       	rjmp	.+18     	; 0x358 <APP_WarningHandler+0x52>
	case ID_NOT_FOUND:
		H_Lcd_Void_LCDWriteString((u8*) "ID NOT FOUND");
     346:	8e e6       	ldi	r24, 0x6E	; 110
     348:	91 e0       	ldi	r25, 0x01	; 1
     34a:	0e 94 9a 05 	call	0xb34	; 0xb34 <H_Lcd_Void_LCDWriteString>
	break;
     34e:	04 c0       	rjmp	.+8      	; 0x358 <APP_WarningHandler+0x52>
	case FINGERPRINT_NOT_FOUND:
		H_Lcd_Void_LCDWriteString((u8*) "FINGERPRINT NOTFOUND");
     350:	8b e7       	ldi	r24, 0x7B	; 123
     352:	91 e0       	ldi	r25, 0x01	; 1
     354:	0e 94 9a 05 	call	0xb34	; 0xb34 <H_Lcd_Void_LCDWriteString>
	break;
	}
	H_Lcd_Void_LCDGoTo(2,0);
     358:	60 e0       	ldi	r22, 0x00	; 0
     35a:	82 e0       	ldi	r24, 0x02	; 2
     35c:	0e 94 10 06 	call	0xc20	; 0xc20 <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteString((u8*) "C : Main Menu");
     360:	80 e9       	ldi	r24, 0x90	; 144
     362:	91 e0       	ldi	r25, 0x01	; 1
     364:	0e 94 9a 05 	call	0xb34	; 0xb34 <H_Lcd_Void_LCDWriteString>
	H_Lcd_Void_LCDGoTo(3,0);
     368:	60 e0       	ldi	r22, 0x00	; 0
     36a:	83 e0       	ldi	r24, 0x03	; 3
     36c:	0e 94 10 06 	call	0xc20	; 0xc20 <H_Lcd_Void_LCDGoTo>
	H_Lcd_Void_LCDWriteString((u8*) "A : Back");
     370:	8e e9       	ldi	r24, 0x9E	; 158
     372:	91 e0       	ldi	r25, 0x01	; 1
     374:	0e 94 9a 05 	call	0xb34	; 0xb34 <H_Lcd_Void_LCDWriteString>
	while((user_action!= GOBACK_BUTTON_PRESSED)||(user_action!= MAIN_MENU_BUTTON_PRESSED)){
	user_action= H_KeyPad_U8_KeyPadRead();
     378:	0e 94 24 04 	call	0x848	; 0x848 <H_KeyPad_U8_KeyPadRead>
     37c:	fd cf       	rjmp	.-6      	; 0x378 <APP_WarningHandler+0x72>

0000037e <H_Void_EEPROMWrite>:
 *
 * Created: 3/27/2024 5:29:15 PM
 *  Author: seif
 */ 
#include "EEPROM_Interfac.h"
void H_Void_EEPROMWrite(u16 address, u8 data){
     37e:	1f 93       	push	r17
     380:	cf 93       	push	r28
     382:	df 93       	push	r29
     384:	ec 01       	movw	r28, r24
     386:	16 2f       	mov	r17, r22
	/*Address to Write = 0011 1010 1111*/  
	/*				   & 0011 0000 0000*/
	/*		0xA0	   |      1010 0000*/
	M_U8_I2C_Start();  
     388:	0e 94 24 09 	call	0x1248	; 0x1248 <M_U8_I2C_Start>
	/*SEND 1010 + E A9 A8 + W*/
	M_U8_I2C_SendSlaveAddressWithWrite((u8)(0xA0 | ((address & 0x300) >> 7))); 
     38c:	ce 01       	movw	r24, r28
     38e:	88 27       	eor	r24, r24
     390:	93 70       	andi	r25, 0x03	; 3
     392:	88 0f       	add	r24, r24
     394:	89 2f       	mov	r24, r25
     396:	88 1f       	adc	r24, r24
     398:	99 0b       	sbc	r25, r25
     39a:	91 95       	neg	r25
     39c:	80 6a       	ori	r24, 0xA0	; 160
     39e:	0e 94 2f 09 	call	0x125e	; 0x125e <M_U8_I2C_SendSlaveAddressWithWrite>
	/*Complete Address to write data in*/
	M_U8_I2C_Write((u8) address); 
     3a2:	8c 2f       	mov	r24, r28
     3a4:	0e 94 4c 09 	call	0x1298	; 0x1298 <M_U8_I2C_Write>
	M_U8_I2C_Write(data); 
     3a8:	81 2f       	mov	r24, r17
     3aa:	0e 94 4c 09 	call	0x1298	; 0x1298 <M_U8_I2C_Write>
	M_Void_I2C_STOP(); 
     3ae:	0e 94 63 09 	call	0x12c6	; 0x12c6 <M_Void_I2C_STOP>
} 
     3b2:	df 91       	pop	r29
     3b4:	cf 91       	pop	r28
     3b6:	1f 91       	pop	r17
     3b8:	08 95       	ret

000003ba <H_Void_EEPROMRead>:
u8 H_Void_EEPROMRead (u16 address){ 
     3ba:	0f 93       	push	r16
     3bc:	1f 93       	push	r17
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	8c 01       	movw	r16, r24
	u8 data;
	/*Write Address = 0011 1010 1111*/
	/*              & 0011 0000 0000*/
	/*              |      1010 0000*/
	M_U8_I2C_Start(); 
     3c4:	0e 94 24 09 	call	0x1248	; 0x1248 <M_U8_I2C_Start>
	/*SEND 1010 + E A9 A8 + W*/
	M_U8_I2C_SendSlaveAddressWithWrite((u8)((0xA0) | ((address & 0x300) >> 7)));
     3c8:	e8 01       	movw	r28, r16
     3ca:	cc 27       	eor	r28, r28
     3cc:	d3 70       	andi	r29, 0x03	; 3
     3ce:	cc 0f       	add	r28, r28
     3d0:	cd 2f       	mov	r28, r29
     3d2:	cc 1f       	adc	r28, r28
     3d4:	dd 0b       	sbc	r29, r29
     3d6:	d1 95       	neg	r29
     3d8:	8c 2f       	mov	r24, r28
     3da:	80 6a       	ori	r24, 0xA0	; 160
     3dc:	0e 94 2f 09 	call	0x125e	; 0x125e <M_U8_I2C_SendSlaveAddressWithWrite>
	/*Complete address to read from*/ 
	M_U8_I2C_Write((u8) address);  
     3e0:	80 2f       	mov	r24, r16
     3e2:	0e 94 4c 09 	call	0x1298	; 0x1298 <M_U8_I2C_Write>
	M_U8_I2C_Repeated_Start();  
     3e6:	0e 94 38 09 	call	0x1270	; 0x1270 <M_U8_I2C_Repeated_Start>
	M_U8_I2C_SendSlaveAddressWithRead((u8)(0xA0 | ((address & 0x300) >> 7) | 0x01)); 
     3ea:	8c 2f       	mov	r24, r28
     3ec:	81 6a       	ori	r24, 0xA1	; 161
     3ee:	0e 94 43 09 	call	0x1286	; 0x1286 <M_U8_I2C_SendSlaveAddressWithRead>
	data = M_U8_I2C_ReadWithNack(); 
     3f2:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <M_U8_I2C_ReadWithNack>
     3f6:	c8 2f       	mov	r28, r24
	M_Void_I2C_STOP(); 
     3f8:	0e 94 63 09 	call	0x12c6	; 0x12c6 <M_Void_I2C_STOP>
	return data; 
     3fc:	8c 2f       	mov	r24, r28
     3fe:	df 91       	pop	r29
     400:	cf 91       	pop	r28
     402:	1f 91       	pop	r17
     404:	0f 91       	pop	r16
     406:	08 95       	ret

00000408 <FingerP_send>:
	static u8 i = 0;
	AckPack [i] = RecivedByte; 
	if (i==11){
		i = 0;
	}
	else i++;
     408:	1f 93       	push	r17
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	18 2f       	mov	r17, r24
     410:	c6 2f       	mov	r28, r22
     412:	d7 2f       	mov	r29, r23
     414:	8f ee       	ldi	r24, 0xEF	; 239
     416:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     420:	8f ef       	ldi	r24, 0xFF	; 255
     422:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     426:	8f ef       	ldi	r24, 0xFF	; 255
     428:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     42c:	8f ef       	ldi	r24, 0xFF	; 255
     42e:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     432:	8f ef       	ldi	r24, 0xFF	; 255
     434:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     438:	81 2f       	mov	r24, r17
     43a:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     43e:	8d 2f       	mov	r24, r29
     440:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     444:	8c 2f       	mov	r24, r28
     446:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	1f 91       	pop	r17
     450:	08 95       	ret

00000452 <FingerPS_AuraLedConfig>:
     452:	67 e0       	ldi	r22, 0x07	; 7
     454:	70 e0       	ldi	r23, 0x00	; 0
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	0e 94 04 02 	call	0x408	; 0x408 <FingerP_send>
     45c:	85 e3       	ldi	r24, 0x35	; 53
     45e:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     462:	82 e0       	ldi	r24, 0x02	; 2
     464:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     468:	8f e0       	ldi	r24, 0x0F	; 15
     46a:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     46e:	83 e0       	ldi	r24, 0x03	; 3
     470:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     480:	82 e5       	ldi	r24, 0x52	; 82
     482:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     486:	08 95       	ret

00000488 <FingerPS_genImg>:
     488:	63 e0       	ldi	r22, 0x03	; 3
     48a:	70 e0       	ldi	r23, 0x00	; 0
     48c:	81 e0       	ldi	r24, 0x01	; 1
     48e:	0e 94 04 02 	call	0x408	; 0x408 <FingerP_send>
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     498:	80 e0       	ldi	r24, 0x00	; 0
     49a:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     49e:	85 e0       	ldi	r24, 0x05	; 5
     4a0:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     4a4:	08 95       	ret

000004a6 <FingerPS_convertImg1CharFile>:
     4a6:	8f ee       	ldi	r24, 0xEF	; 239
     4a8:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     4b2:	8f ef       	ldi	r24, 0xFF	; 255
     4b4:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     4b8:	8f ef       	ldi	r24, 0xFF	; 255
     4ba:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     4be:	8f ef       	ldi	r24, 0xFF	; 255
     4c0:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     4c4:	8f ef       	ldi	r24, 0xFF	; 255
     4c6:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     4d6:	84 e0       	ldi	r24, 0x04	; 4
     4d8:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     4dc:	82 e0       	ldi	r24, 0x02	; 2
     4de:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     4ee:	88 e0       	ldi	r24, 0x08	; 8
     4f0:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     4f4:	08 95       	ret

000004f6 <FingerPS_convertImg2CharFile>:
     4f6:	8f ee       	ldi	r24, 0xEF	; 239
     4f8:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     502:	8f ef       	ldi	r24, 0xFF	; 255
     504:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     508:	8f ef       	ldi	r24, 0xFF	; 255
     50a:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     50e:	8f ef       	ldi	r24, 0xFF	; 255
     510:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     514:	8f ef       	ldi	r24, 0xFF	; 255
     516:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     526:	84 e0       	ldi	r24, 0x04	; 4
     528:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     52c:	82 e0       	ldi	r24, 0x02	; 2
     52e:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     532:	82 e0       	ldi	r24, 0x02	; 2
     534:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     53e:	89 e0       	ldi	r24, 0x09	; 9
     540:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     544:	08 95       	ret

00000546 <FingerPS_genTemplate>:
     546:	8f ee       	ldi	r24, 0xEF	; 239
     548:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     552:	8f ef       	ldi	r24, 0xFF	; 255
     554:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     558:	8f ef       	ldi	r24, 0xFF	; 255
     55a:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     55e:	8f ef       	ldi	r24, 0xFF	; 255
     560:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     564:	8f ef       	ldi	r24, 0xFF	; 255
     566:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     576:	83 e0       	ldi	r24, 0x03	; 3
     578:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     57c:	85 e0       	ldi	r24, 0x05	; 5
     57e:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     588:	89 e0       	ldi	r24, 0x09	; 9
     58a:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     58e:	08 95       	ret

00000590 <FingerPS_strTemplate>:
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	ec 01       	movw	r28, r24
     596:	66 e0       	ldi	r22, 0x06	; 6
     598:	70 e0       	ldi	r23, 0x00	; 0
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	0e 94 04 02 	call	0x408	; 0x408 <FingerP_send>
     5a0:	86 e0       	ldi	r24, 0x06	; 6
     5a2:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     5ac:	8d 2f       	mov	r24, r29
     5ae:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     5b2:	8c 2f       	mov	r24, r28
     5b4:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     5b8:	ce 01       	movw	r24, r28
     5ba:	0e 96       	adiw	r24, 0x0e	; 14
     5bc:	89 2f       	mov	r24, r25
     5be:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     5c2:	8c 2f       	mov	r24, r28
     5c4:	82 5f       	subi	r24, 0xF2	; 242
     5c6:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	08 95       	ret

000005d0 <FingerPS_LoadCharFile>:
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	c8 2f       	mov	r28, r24
     5d6:	d9 2f       	mov	r29, r25
     5d8:	8f ee       	ldi	r24, 0xEF	; 239
     5da:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     5e4:	8f ef       	ldi	r24, 0xFF	; 255
     5e6:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     5ea:	8f ef       	ldi	r24, 0xFF	; 255
     5ec:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     5f0:	8f ef       	ldi	r24, 0xFF	; 255
     5f2:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     5f6:	8f ef       	ldi	r24, 0xFF	; 255
     5f8:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     608:	86 e0       	ldi	r24, 0x06	; 6
     60a:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     60e:	87 e0       	ldi	r24, 0x07	; 7
     610:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     614:	82 e0       	ldi	r24, 0x02	; 2
     616:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     61a:	8d 2f       	mov	r24, r29
     61c:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     620:	8c 2f       	mov	r24, r28
     622:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     626:	80 e0       	ldi	r24, 0x00	; 0
     628:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     62c:	84 e1       	ldi	r24, 0x14	; 20
     62e:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	08 95       	ret

00000638 <FingerPS_match>:
     638:	8f ee       	ldi	r24, 0xEF	; 239
     63a:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     644:	8f ef       	ldi	r24, 0xFF	; 255
     646:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     64a:	8f ef       	ldi	r24, 0xFF	; 255
     64c:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     650:	8f ef       	ldi	r24, 0xFF	; 255
     652:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     656:	8f ef       	ldi	r24, 0xFF	; 255
     658:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     662:	80 e0       	ldi	r24, 0x00	; 0
     664:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     668:	83 e0       	ldi	r24, 0x03	; 3
     66a:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     66e:	83 e0       	ldi	r24, 0x03	; 3
     670:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     67a:	87 e0       	ldi	r24, 0x07	; 7
     67c:	0e 94 79 09 	call	0x12f2	; 0x12f2 <UART_sendByte>
     680:	08 95       	ret

00000682 <FingerPS_CheckAck>:
}
/********************************************* FUNCTION TO CHECK THE SUM OF EACH ACKNOWLEDGMENT PACK	***************/
u8 FingerPS_CheckAck (){
	u8 CheckResult;
	if (AckPack[11] == 0x0A){
     682:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <__data_end+0xb>
     686:	8a 30       	cpi	r24, 0x0A	; 10
     688:	21 f4       	brne	.+8      	; 0x692 <FingerPS_CheckAck+0x10>
		CheckResult = true ;
		AckPack [11] = 0x00; 
     68a:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <__data_end+0xb>
}
/********************************************* FUNCTION TO CHECK THE SUM OF EACH ACKNOWLEDGMENT PACK	***************/
u8 FingerPS_CheckAck (){
	u8 CheckResult;
	if (AckPack[11] == 0x0A){
		CheckResult = true ;
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	08 95       	ret
		AckPack [11] = 0x00; 
	}
	else{
		CheckResult = false;
     692:	80 e0       	ldi	r24, 0x00	; 0
	}
	return CheckResult;
} 
     694:	08 95       	ret

00000696 <FingerPS_SetNewFingerPrint>:
void FingerPS_SetNewFingerPrint (u16 address){
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	ec 01       	movw	r28, r24
	/*********************************************		FIRST IMAGE GENERATION	******************************************/
	RepeatGenImag1:
	FingerPS_genImg();
     69c:	0e 94 44 02 	call	0x488	; 0x488 <FingerPS_genImg>
     6a0:	2f ef       	ldi	r18, 0xFF	; 255
     6a2:	81 ee       	ldi	r24, 0xE1	; 225
     6a4:	94 e0       	ldi	r25, 0x04	; 4
     6a6:	21 50       	subi	r18, 0x01	; 1
     6a8:	80 40       	sbci	r24, 0x00	; 0
     6aa:	90 40       	sbci	r25, 0x00	; 0
     6ac:	e1 f7       	brne	.-8      	; 0x6a6 <FingerPS_SetNewFingerPrint+0x10>
     6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <FingerPS_SetNewFingerPrint+0x1a>
     6b0:	00 00       	nop
	_delay_ms(100);
	if (FingerPS_CheckAck() == false) goto RepeatGenImag1; /*WAIT FOR ACK*/ 
     6b2:	0e 94 41 03 	call	0x682	; 0x682 <FingerPS_CheckAck>
     6b6:	88 23       	and	r24, r24
     6b8:	89 f3       	breq	.-30     	; 0x69c <FingerPS_SetNewFingerPrint+0x6>
	/*********************************************	FIRST CHARACTER FILE GENERATION	**************************************/
	RepeatConvertFile1:
	FingerPS_convertImg1CharFile();
     6ba:	0e 94 53 02 	call	0x4a6	; 0x4a6 <FingerPS_convertImg1CharFile>
     6be:	2f ef       	ldi	r18, 0xFF	; 255
     6c0:	81 ee       	ldi	r24, 0xE1	; 225
     6c2:	94 e0       	ldi	r25, 0x04	; 4
     6c4:	21 50       	subi	r18, 0x01	; 1
     6c6:	80 40       	sbci	r24, 0x00	; 0
     6c8:	90 40       	sbci	r25, 0x00	; 0
     6ca:	e1 f7       	brne	.-8      	; 0x6c4 <FingerPS_SetNewFingerPrint+0x2e>
     6cc:	00 c0       	rjmp	.+0      	; 0x6ce <FingerPS_SetNewFingerPrint+0x38>
     6ce:	00 00       	nop
	_delay_ms(100);
	if (FingerPS_CheckAck() == false) goto RepeatConvertFile1; /*WAIT FOR ACK*/
     6d0:	0e 94 41 03 	call	0x682	; 0x682 <FingerPS_CheckAck>
     6d4:	88 23       	and	r24, r24
     6d6:	89 f3       	breq	.-30     	; 0x6ba <FingerPS_SetNewFingerPrint+0x24>
	/*********************************************		SECOND IMAGE GENERATION		**************************************/
	RepeatGenImag2:
	FingerPS_genImg();
     6d8:	0e 94 44 02 	call	0x488	; 0x488 <FingerPS_genImg>
     6dc:	2f ef       	ldi	r18, 0xFF	; 255
     6de:	81 ee       	ldi	r24, 0xE1	; 225
     6e0:	94 e0       	ldi	r25, 0x04	; 4
     6e2:	21 50       	subi	r18, 0x01	; 1
     6e4:	80 40       	sbci	r24, 0x00	; 0
     6e6:	90 40       	sbci	r25, 0x00	; 0
     6e8:	e1 f7       	brne	.-8      	; 0x6e2 <FingerPS_SetNewFingerPrint+0x4c>
     6ea:	00 c0       	rjmp	.+0      	; 0x6ec <FingerPS_SetNewFingerPrint+0x56>
     6ec:	00 00       	nop
	_delay_ms(100);
	if (FingerPS_CheckAck() == false) goto RepeatGenImag2;/*WAIT FOR ACK*/
     6ee:	0e 94 41 03 	call	0x682	; 0x682 <FingerPS_CheckAck>
     6f2:	88 23       	and	r24, r24
     6f4:	89 f3       	breq	.-30     	; 0x6d8 <FingerPS_SetNewFingerPrint+0x42>
	/*********************************************		SECONED CHAR FILE GENERATED		**********************************/
	RepeatConvertFile2:
	FingerPS_convertImg2CharFile();
     6f6:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <FingerPS_convertImg2CharFile>
     6fa:	2f ef       	ldi	r18, 0xFF	; 255
     6fc:	81 ee       	ldi	r24, 0xE1	; 225
     6fe:	94 e0       	ldi	r25, 0x04	; 4
     700:	21 50       	subi	r18, 0x01	; 1
     702:	80 40       	sbci	r24, 0x00	; 0
     704:	90 40       	sbci	r25, 0x00	; 0
     706:	e1 f7       	brne	.-8      	; 0x700 <FingerPS_SetNewFingerPrint+0x6a>
     708:	00 c0       	rjmp	.+0      	; 0x70a <FingerPS_SetNewFingerPrint+0x74>
     70a:	00 00       	nop
	_delay_ms(100);
	if (FingerPS_CheckAck() == false) goto RepeatConvertFile2;/*WAIT FOR ACK*/
     70c:	0e 94 41 03 	call	0x682	; 0x682 <FingerPS_CheckAck>
     710:	88 23       	and	r24, r24
     712:	89 f3       	breq	.-30     	; 0x6f6 <FingerPS_SetNewFingerPrint+0x60>
	/********************************************		Generate Tempelate			**********************************/
	FingerPS_genTemplate();
     714:	0e 94 a3 02 	call	0x546	; 0x546 <FingerPS_genTemplate>
     718:	2f ef       	ldi	r18, 0xFF	; 255
     71a:	89 e6       	ldi	r24, 0x69	; 105
     71c:	98 e1       	ldi	r25, 0x18	; 24
     71e:	21 50       	subi	r18, 0x01	; 1
     720:	80 40       	sbci	r24, 0x00	; 0
     722:	90 40       	sbci	r25, 0x00	; 0
     724:	e1 f7       	brne	.-8      	; 0x71e <FingerPS_SetNewFingerPrint+0x88>
     726:	00 c0       	rjmp	.+0      	; 0x728 <FingerPS_SetNewFingerPrint+0x92>
     728:	00 00       	nop
	_delay_ms(500);
	if (FingerPS_CheckAck() == false) goto RepeatGenImag1;/*WAIT FOR ACK*/
     72a:	0e 94 41 03 	call	0x682	; 0x682 <FingerPS_CheckAck>
     72e:	88 23       	and	r24, r24
     730:	09 f4       	brne	.+2      	; 0x734 <FingerPS_SetNewFingerPrint+0x9e>
     732:	b4 cf       	rjmp	.-152    	; 0x69c <FingerPS_SetNewFingerPrint+0x6>
	/*******************************************		Tempelate Storing			***********************************/
	RepeatStrTemp:
	FingerPS_strTemplate(address);
     734:	ce 01       	movw	r24, r28
     736:	0e 94 c8 02 	call	0x590	; 0x590 <FingerPS_strTemplate>
     73a:	2f ef       	ldi	r18, 0xFF	; 255
     73c:	81 ee       	ldi	r24, 0xE1	; 225
     73e:	94 e0       	ldi	r25, 0x04	; 4
     740:	21 50       	subi	r18, 0x01	; 1
     742:	80 40       	sbci	r24, 0x00	; 0
     744:	90 40       	sbci	r25, 0x00	; 0
     746:	e1 f7       	brne	.-8      	; 0x740 <FingerPS_SetNewFingerPrint+0xaa>
     748:	00 c0       	rjmp	.+0      	; 0x74a <FingerPS_SetNewFingerPrint+0xb4>
     74a:	00 00       	nop
	_delay_ms(100);
	if (FingerPS_CheckAck() == false) goto RepeatStrTemp;/*WAIT FOR ACK*/
     74c:	0e 94 41 03 	call	0x682	; 0x682 <FingerPS_CheckAck>
     750:	88 23       	and	r24, r24
     752:	81 f3       	breq	.-32     	; 0x734 <FingerPS_SetNewFingerPrint+0x9e>
}
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	08 95       	ret

0000075a <FingerPS_CheckOneToOneMatch>:
u8 FingerPS_CheckOneToOneMatch(u16 address){
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	ec 01       	movw	r28, r24
	u8 match_result; 
	/*******************************************		Generate Image to check one to one match	********************/
	RepeatCheckImagGen:
	FingerPS_genImg();
     760:	0e 94 44 02 	call	0x488	; 0x488 <FingerPS_genImg>
     764:	2f ef       	ldi	r18, 0xFF	; 255
     766:	81 ee       	ldi	r24, 0xE1	; 225
     768:	94 e0       	ldi	r25, 0x04	; 4
     76a:	21 50       	subi	r18, 0x01	; 1
     76c:	80 40       	sbci	r24, 0x00	; 0
     76e:	90 40       	sbci	r25, 0x00	; 0
     770:	e1 f7       	brne	.-8      	; 0x76a <FingerPS_CheckOneToOneMatch+0x10>
     772:	00 c0       	rjmp	.+0      	; 0x774 <FingerPS_CheckOneToOneMatch+0x1a>
     774:	00 00       	nop
	_delay_ms(100);
	if (FingerPS_CheckAck() == false) goto RepeatCheckImagGen; /*WAIT FOR ACK*/
     776:	0e 94 41 03 	call	0x682	; 0x682 <FingerPS_CheckAck>
     77a:	88 23       	and	r24, r24
     77c:	89 f3       	breq	.-30     	; 0x760 <FingerPS_CheckOneToOneMatch+0x6>
	/******************************************			Generate char from Check Image	****************************************/
	RepeatCharCheckFileGen:
	FingerPS_convertImg1CharFile();
     77e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <FingerPS_convertImg1CharFile>
     782:	2f ef       	ldi	r18, 0xFF	; 255
     784:	81 ee       	ldi	r24, 0xE1	; 225
     786:	94 e0       	ldi	r25, 0x04	; 4
     788:	21 50       	subi	r18, 0x01	; 1
     78a:	80 40       	sbci	r24, 0x00	; 0
     78c:	90 40       	sbci	r25, 0x00	; 0
     78e:	e1 f7       	brne	.-8      	; 0x788 <FingerPS_CheckOneToOneMatch+0x2e>
     790:	00 c0       	rjmp	.+0      	; 0x792 <FingerPS_CheckOneToOneMatch+0x38>
     792:	00 00       	nop
	_delay_ms(100);
	if (FingerPS_CheckAck() == false) goto RepeatCharCheckFileGen; /*WAIT FOR ACK*/
     794:	0e 94 41 03 	call	0x682	; 0x682 <FingerPS_CheckAck>
     798:	88 23       	and	r24, r24
     79a:	89 f3       	breq	.-30     	; 0x77e <FingerPS_CheckOneToOneMatch+0x24>
	/******************************************			Load Char in char file 2	***********************************/
	RepeatLoadCharFile:
	FingerPS_LoadCharFile(address);
     79c:	ce 01       	movw	r24, r28
     79e:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <FingerPS_LoadCharFile>
     7a2:	2f ef       	ldi	r18, 0xFF	; 255
     7a4:	81 ee       	ldi	r24, 0xE1	; 225
     7a6:	94 e0       	ldi	r25, 0x04	; 4
     7a8:	21 50       	subi	r18, 0x01	; 1
     7aa:	80 40       	sbci	r24, 0x00	; 0
     7ac:	90 40       	sbci	r25, 0x00	; 0
     7ae:	e1 f7       	brne	.-8      	; 0x7a8 <FingerPS_CheckOneToOneMatch+0x4e>
     7b0:	00 c0       	rjmp	.+0      	; 0x7b2 <FingerPS_CheckOneToOneMatch+0x58>
     7b2:	00 00       	nop
	_delay_ms(100);
	if (FingerPS_CheckAck() == false) goto RepeatLoadCharFile; /*Wait for ACK*/
     7b4:	0e 94 41 03 	call	0x682	; 0x682 <FingerPS_CheckAck>
     7b8:	88 23       	and	r24, r24
     7ba:	81 f3       	breq	.-32     	; 0x79c <FingerPS_CheckOneToOneMatch+0x42>
	/******************************************			CHECK MATCH				****************************************/
	FingerPS_match();
     7bc:	0e 94 1c 03 	call	0x638	; 0x638 <FingerPS_match>
     7c0:	2f ef       	ldi	r18, 0xFF	; 255
     7c2:	81 ee       	ldi	r24, 0xE1	; 225
     7c4:	94 e0       	ldi	r25, 0x04	; 4
     7c6:	21 50       	subi	r18, 0x01	; 1
     7c8:	80 40       	sbci	r24, 0x00	; 0
     7ca:	90 40       	sbci	r25, 0x00	; 0
     7cc:	e1 f7       	brne	.-8      	; 0x7c6 <FingerPS_CheckOneToOneMatch+0x6c>
     7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <FingerPS_CheckOneToOneMatch+0x76>
     7d0:	00 00       	nop
	_delay_ms(100); 
	if (AckPack[9] == 0x00){
     7d2:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <__data_end+0x9>
     7d6:	81 11       	cpse	r24, r1
     7d8:	02 c0       	rjmp	.+4      	; 0x7de <FingerPS_CheckOneToOneMatch+0x84>
		match_result = MATCHED;
     7da:	81 e0       	ldi	r24, 0x01	; 1
     7dc:	01 c0       	rjmp	.+2      	; 0x7e0 <FingerPS_CheckOneToOneMatch+0x86>
	}
	else {
		match_result = NOTMATCHED; 
     7de:	80 e0       	ldi	r24, 0x00	; 0
	} 
	return match_result; 
}
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	08 95       	ret

000007e6 <H_KeyPad_Void_KeyPadInit>:
/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
void H_KeyPad_Void_KeyPadInit(void)
{
	M_DIO_Void_SetPinDirection(KEYPAD_R0_PIN,OUTPUT);
     7e6:	61 e0       	ldi	r22, 0x01	; 1
     7e8:	83 e2       	ldi	r24, 0x23	; 35
     7ea:	0e 94 b1 07 	call	0xf62	; 0xf62 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R1_PIN,OUTPUT);
     7ee:	61 e0       	ldi	r22, 0x01	; 1
     7f0:	82 e2       	ldi	r24, 0x22	; 34
     7f2:	0e 94 b1 07 	call	0xf62	; 0xf62 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R2_PIN,OUTPUT);
     7f6:	61 e0       	ldi	r22, 0x01	; 1
     7f8:	81 e2       	ldi	r24, 0x21	; 33
     7fa:	0e 94 b1 07 	call	0xf62	; 0xf62 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R3_PIN,OUTPUT);
     7fe:	61 e0       	ldi	r22, 0x01	; 1
     800:	80 e2       	ldi	r24, 0x20	; 32
     802:	0e 94 b1 07 	call	0xf62	; 0xf62 <M_DIO_Void_SetPinDirection>

	M_DIO_Void_SetPinValue(KEYPAD_R0_PIN,HIGH);
     806:	61 e0       	ldi	r22, 0x01	; 1
     808:	83 e2       	ldi	r24, 0x23	; 35
     80a:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R1_PIN,HIGH);
     80e:	61 e0       	ldi	r22, 0x01	; 1
     810:	82 e2       	ldi	r24, 0x22	; 34
     812:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R2_PIN,HIGH);
     816:	61 e0       	ldi	r22, 0x01	; 1
     818:	81 e2       	ldi	r24, 0x21	; 33
     81a:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R3_PIN,HIGH);
     81e:	61 e0       	ldi	r22, 0x01	; 1
     820:	80 e2       	ldi	r24, 0x20	; 32
     822:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinDirection(KEYPAD_C0_PIN,INPUT);
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	8f e2       	ldi	r24, 0x2F	; 47
     82a:	0e 94 b1 07 	call	0xf62	; 0xf62 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C1_PIN,INPUT);
     82e:	60 e0       	ldi	r22, 0x00	; 0
     830:	8e e2       	ldi	r24, 0x2E	; 46
     832:	0e 94 b1 07 	call	0xf62	; 0xf62 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C2_PIN,INPUT);
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	8d e2       	ldi	r24, 0x2D	; 45
     83a:	0e 94 b1 07 	call	0xf62	; 0xf62 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C3_PIN,INPUT);
     83e:	60 e0       	ldi	r22, 0x00	; 0
     840:	8b e2       	ldi	r24, 0x2B	; 43
     842:	0e 94 b1 07 	call	0xf62	; 0xf62 <M_DIO_Void_SetPinDirection>
     846:	08 95       	ret

00000848 <H_KeyPad_U8_KeyPadRead>:

/*============================================================================================*/
/*   FUNCTION BODY   */
/*============================================================================================*/
u8   H_KeyPad_U8_KeyPadRead(void)
{
     848:	9f 92       	push	r9
     84a:	af 92       	push	r10
     84c:	bf 92       	push	r11
     84e:	cf 92       	push	r12
     850:	df 92       	push	r13
     852:	ef 92       	push	r14
     854:	ff 92       	push	r15
     856:	0f 93       	push	r16
     858:	1f 93       	push	r17
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	cd b7       	in	r28, 0x3d	; 61
     860:	de b7       	in	r29, 0x3e	; 62
     862:	68 97       	sbiw	r28, 0x18	; 24
     864:	0f b6       	in	r0, 0x3f	; 63
     866:	f8 94       	cli
     868:	de bf       	out	0x3e, r29	; 62
     86a:	0f be       	out	0x3f, r0	; 63
     86c:	cd bf       	out	0x3d, r28	; 61
	u8 Local_U8_KeypadRowPins[4] = { KEYPAD_R0_PIN , KEYPAD_R1_PIN , KEYPAD_R2_PIN , KEYPAD_R3_PIN };
     86e:	83 e2       	ldi	r24, 0x23	; 35
     870:	89 83       	std	Y+1, r24	; 0x01
     872:	82 e2       	ldi	r24, 0x22	; 34
     874:	8a 83       	std	Y+2, r24	; 0x02
     876:	81 e2       	ldi	r24, 0x21	; 33
     878:	8b 83       	std	Y+3, r24	; 0x03
     87a:	80 e2       	ldi	r24, 0x20	; 32
     87c:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_U8_KeypadColPins[4] = { KEYPAD_C0_PIN , KEYPAD_C1_PIN , KEYPAD_C2_PIN , KEYPAD_C3_PIN };
     87e:	8f e2       	ldi	r24, 0x2F	; 47
     880:	8d 83       	std	Y+5, r24	; 0x05
     882:	8e e2       	ldi	r24, 0x2E	; 46
     884:	8e 83       	std	Y+6, r24	; 0x06
     886:	8d e2       	ldi	r24, 0x2D	; 45
     888:	8f 83       	std	Y+7, r24	; 0x07
     88a:	8b e2       	ldi	r24, 0x2B	; 43
     88c:	88 87       	std	Y+8, r24	; 0x08
#if   KEYPAD_MODEL   ==   KEYPAD_MODEL_A
	u8 Local_U8_KeypadValue [4][4] = {{ '1' , '2' , '3' , 'A' },
     88e:	80 e1       	ldi	r24, 0x10	; 16
     890:	ec e7       	ldi	r30, 0x7C	; 124
     892:	f0 e0       	ldi	r31, 0x00	; 0
     894:	de 01       	movw	r26, r28
     896:	19 96       	adiw	r26, 0x09	; 9
     898:	01 90       	ld	r0, Z+
     89a:	0d 92       	st	X+, r0
     89c:	8a 95       	dec	r24
     89e:	e1 f7       	brne	.-8      	; 0x898 <__stack+0x39>
							          { 'C' , '0' , '=' , '/' }};
#endif
	u8 Local_U8_Reading    = KEYPAD_RELEASED;
	u8 Local_U8_RowCounter = 0;
	u8 Local_U8_ColCounter = 0;
	for(Local_U8_RowCounter = 0 ; Local_U8_RowCounter <= 3 ; Local_U8_RowCounter++)
     8a0:	d1 2c       	mov	r13, r1
	u8 Local_U8_KeypadValue [4][4] = {{ '7' , '8' , '9' , '+' },
			                          { '4' , '5' , '6' , '-' },
							          { '1' , '2' , '3' , '*' },
							          { 'C' , '0' , '=' , '/' }};
#endif
	u8 Local_U8_Reading    = KEYPAD_RELEASED;
     8a2:	99 24       	eor	r9, r9
     8a4:	93 94       	inc	r9
	u8 Local_U8_RowCounter = 0;
	u8 Local_U8_ColCounter = 0;
	for(Local_U8_RowCounter = 0 ; Local_U8_RowCounter <= 3 ; Local_U8_RowCounter++)
     8a6:	44 c0       	rjmp	.+136    	; 0x930 <__stack+0xd1>
	{
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],LOW);
     8a8:	ad 2c       	mov	r10, r13
     8aa:	b1 2c       	mov	r11, r1
     8ac:	e1 e0       	ldi	r30, 0x01	; 1
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	ec 0f       	add	r30, r28
     8b2:	fd 1f       	adc	r31, r29
     8b4:	ea 0d       	add	r30, r10
     8b6:	fb 1d       	adc	r31, r11
     8b8:	c0 80       	ld	r12, Z
     8ba:	60 e0       	ldi	r22, 0x00	; 0
     8bc:	8c 2d       	mov	r24, r12
     8be:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
		for(Local_U8_ColCounter = 0 ; Local_U8_ColCounter <= 3 ; Local_U8_ColCounter++)
     8c2:	10 e0       	ldi	r17, 0x00	; 0
     8c4:	2e c0       	rjmp	.+92     	; 0x922 <__stack+0xc3>
		{
			if(M_DIO_Void_GetPinValue(Local_U8_KeypadColPins[Local_U8_ColCounter]) == KEYPAD_PRESSED)
     8c6:	e1 2e       	mov	r14, r17
     8c8:	f1 2c       	mov	r15, r1
     8ca:	e5 e0       	ldi	r30, 0x05	; 5
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	ec 0f       	add	r30, r28
     8d0:	fd 1f       	adc	r31, r29
     8d2:	ee 0d       	add	r30, r14
     8d4:	ff 1d       	adc	r31, r15
     8d6:	00 81       	ld	r16, Z
     8d8:	80 2f       	mov	r24, r16
     8da:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_Void_GetPinValue>
     8de:	81 11       	cpse	r24, r1
     8e0:	1f c0       	rjmp	.+62     	; 0x920 <__stack+0xc1>
     8e2:	8f e0       	ldi	r24, 0x0F	; 15
     8e4:	97 e2       	ldi	r25, 0x27	; 39
     8e6:	01 97       	sbiw	r24, 0x01	; 1
     8e8:	f1 f7       	brne	.-4      	; 0x8e6 <__stack+0x87>
     8ea:	00 c0       	rjmp	.+0      	; 0x8ec <__stack+0x8d>
     8ec:	00 00       	nop
			{
				_delay_ms(KEYPAD_DEBOUNCING_TIME);
				if(M_DIO_Void_GetPinValue(Local_U8_KeypadColPins[Local_U8_ColCounter]) == KEYPAD_PRESSED)
     8ee:	80 2f       	mov	r24, r16
     8f0:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_Void_GetPinValue>
     8f4:	81 11       	cpse	r24, r1
     8f6:	14 c0       	rjmp	.+40     	; 0x920 <__stack+0xc1>
				{
					while(M_DIO_Void_GetPinValue(Local_U8_KeypadColPins[Local_U8_ColCounter]) == KEYPAD_PRESSED);
     8f8:	80 2f       	mov	r24, r16
     8fa:	0e 94 c3 08 	call	0x1186	; 0x1186 <M_DIO_Void_GetPinValue>
     8fe:	88 23       	and	r24, r24
     900:	d9 f3       	breq	.-10     	; 0x8f8 <__stack+0x99>
					Local_U8_Reading = Local_U8_KeypadValue[Local_U8_RowCounter][Local_U8_ColCounter];
     902:	f5 01       	movw	r30, r10
     904:	ee 0f       	add	r30, r30
     906:	ff 1f       	adc	r31, r31
     908:	ee 0f       	add	r30, r30
     90a:	ff 1f       	adc	r31, r31
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	8c 0f       	add	r24, r28
     912:	9d 1f       	adc	r25, r29
     914:	e8 0f       	add	r30, r24
     916:	f9 1f       	adc	r31, r25
     918:	ee 0d       	add	r30, r14
     91a:	ff 1d       	adc	r31, r15
     91c:	90 84       	ldd	r9, Z+8	; 0x08
					break;
     91e:	03 c0       	rjmp	.+6      	; 0x926 <__stack+0xc7>
	u8 Local_U8_RowCounter = 0;
	u8 Local_U8_ColCounter = 0;
	for(Local_U8_RowCounter = 0 ; Local_U8_RowCounter <= 3 ; Local_U8_RowCounter++)
	{
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],LOW);
		for(Local_U8_ColCounter = 0 ; Local_U8_ColCounter <= 3 ; Local_U8_ColCounter++)
     920:	1f 5f       	subi	r17, 0xFF	; 255
     922:	14 30       	cpi	r17, 0x04	; 4
     924:	80 f2       	brcs	.-96     	; 0x8c6 <__stack+0x67>
					break;
				}

			}
		}
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],HIGH);
     926:	61 e0       	ldi	r22, 0x01	; 1
     928:	8c 2d       	mov	r24, r12
     92a:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
							          { 'C' , '0' , '=' , '/' }};
#endif
	u8 Local_U8_Reading    = KEYPAD_RELEASED;
	u8 Local_U8_RowCounter = 0;
	u8 Local_U8_ColCounter = 0;
	for(Local_U8_RowCounter = 0 ; Local_U8_RowCounter <= 3 ; Local_U8_RowCounter++)
     92e:	d3 94       	inc	r13
     930:	93 e0       	ldi	r25, 0x03	; 3
     932:	9d 15       	cp	r25, r13
     934:	08 f0       	brcs	.+2      	; 0x938 <__stack+0xd9>
     936:	b8 cf       	rjmp	.-144    	; 0x8a8 <__stack+0x49>
			}
		}
		M_DIO_Void_SetPinValue(Local_U8_KeypadRowPins[Local_U8_RowCounter],HIGH);
	}
return Local_U8_Reading;
}
     938:	89 2d       	mov	r24, r9
     93a:	68 96       	adiw	r28, 0x18	; 24
     93c:	0f b6       	in	r0, 0x3f	; 63
     93e:	f8 94       	cli
     940:	de bf       	out	0x3e, r29	; 62
     942:	0f be       	out	0x3f, r0	; 63
     944:	cd bf       	out	0x3d, r28	; 61
     946:	df 91       	pop	r29
     948:	cf 91       	pop	r28
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	df 90       	pop	r13
     954:	cf 90       	pop	r12
     956:	bf 90       	pop	r11
     958:	af 90       	pop	r10
     95a:	9f 90       	pop	r9
     95c:	08 95       	ret

0000095e <H_Lcd_Void_LCDWriteCharacter>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCharacter(u8 Copy_U8_Character)
{
     95e:	cf 93       	push	r28
     960:	c8 2f       	mov	r28, r24
	M_DIO_Void_SetPinValue(LCD_RS_PIN,HIGH);
     962:	61 e0       	ldi	r22, 0x01	; 1
     964:	8d e0       	ldi	r24, 0x0D	; 13
     966:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,4));
     96a:	c4 fb       	bst	r28, 4
     96c:	66 27       	eor	r22, r22
     96e:	60 f9       	bld	r22, 0
     970:	84 e1       	ldi	r24, 0x14	; 20
     972:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,5));
     976:	c5 fb       	bst	r28, 5
     978:	66 27       	eor	r22, r22
     97a:	60 f9       	bld	r22, 0
     97c:	85 e1       	ldi	r24, 0x15	; 21
     97e:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,6));
     982:	c6 fb       	bst	r28, 6
     984:	66 27       	eor	r22, r22
     986:	60 f9       	bld	r22, 0
     988:	86 e1       	ldi	r24, 0x16	; 22
     98a:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,7));
     98e:	6c 2f       	mov	r22, r28
     990:	66 1f       	adc	r22, r22
     992:	66 27       	eor	r22, r22
     994:	66 1f       	adc	r22, r22
     996:	88 e1       	ldi	r24, 0x18	; 24
     998:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
     99c:	61 e0       	ldi	r22, 0x01	; 1
     99e:	8c e0       	ldi	r24, 0x0C	; 12
     9a0:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
     9a4:	8f e9       	ldi	r24, 0x9F	; 159
     9a6:	9f e0       	ldi	r25, 0x0F	; 15
     9a8:	01 97       	sbiw	r24, 0x01	; 1
     9aa:	f1 f7       	brne	.-4      	; 0x9a8 <H_Lcd_Void_LCDWriteCharacter+0x4a>
     9ac:	00 c0       	rjmp	.+0      	; 0x9ae <H_Lcd_Void_LCDWriteCharacter+0x50>
     9ae:	00 00       	nop
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
     9b0:	60 e0       	ldi	r22, 0x00	; 0
     9b2:	8c e0       	ldi	r24, 0x0C	; 12
     9b4:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
     9b8:	8f e9       	ldi	r24, 0x9F	; 159
     9ba:	9f e0       	ldi	r25, 0x0F	; 15
     9bc:	01 97       	sbiw	r24, 0x01	; 1
     9be:	f1 f7       	brne	.-4      	; 0x9bc <H_Lcd_Void_LCDWriteCharacter+0x5e>
     9c0:	00 c0       	rjmp	.+0      	; 0x9c2 <H_Lcd_Void_LCDWriteCharacter+0x64>
     9c2:	00 00       	nop
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Character,0));
     9c4:	6c 2f       	mov	r22, r28
     9c6:	61 70       	andi	r22, 0x01	; 1
     9c8:	84 e1       	ldi	r24, 0x14	; 20
     9ca:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Character,1));
     9ce:	c1 fb       	bst	r28, 1
     9d0:	66 27       	eor	r22, r22
     9d2:	60 f9       	bld	r22, 0
     9d4:	85 e1       	ldi	r24, 0x15	; 21
     9d6:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Character,2));
     9da:	c2 fb       	bst	r28, 2
     9dc:	66 27       	eor	r22, r22
     9de:	60 f9       	bld	r22, 0
     9e0:	86 e1       	ldi	r24, 0x16	; 22
     9e2:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Character,3));
     9e6:	c3 fb       	bst	r28, 3
     9e8:	66 27       	eor	r22, r22
     9ea:	60 f9       	bld	r22, 0
     9ec:	88 e1       	ldi	r24, 0x18	; 24
     9ee:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
     9f2:	61 e0       	ldi	r22, 0x01	; 1
     9f4:	8c e0       	ldi	r24, 0x0C	; 12
     9f6:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
     9fa:	8f e9       	ldi	r24, 0x9F	; 159
     9fc:	9f e0       	ldi	r25, 0x0F	; 15
     9fe:	01 97       	sbiw	r24, 0x01	; 1
     a00:	f1 f7       	brne	.-4      	; 0x9fe <H_Lcd_Void_LCDWriteCharacter+0xa0>
     a02:	00 c0       	rjmp	.+0      	; 0xa04 <H_Lcd_Void_LCDWriteCharacter+0xa6>
     a04:	00 00       	nop
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
     a06:	60 e0       	ldi	r22, 0x00	; 0
     a08:	8c e0       	ldi	r24, 0x0C	; 12
     a0a:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
     a0e:	8f e1       	ldi	r24, 0x1F	; 31
     a10:	9e e4       	ldi	r25, 0x4E	; 78
     a12:	01 97       	sbiw	r24, 0x01	; 1
     a14:	f1 f7       	brne	.-4      	; 0xa12 <H_Lcd_Void_LCDWriteCharacter+0xb4>
     a16:	00 c0       	rjmp	.+0      	; 0xa18 <H_Lcd_Void_LCDWriteCharacter+0xba>
     a18:	00 00       	nop
	_delay_ms(5);
#endif
}
     a1a:	cf 91       	pop	r28
     a1c:	08 95       	ret

00000a1e <H_Lcd_Void_LCDWriteCommand>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteCommand(u8 Copy_U8_Command)
{
     a1e:	cf 93       	push	r28
     a20:	c8 2f       	mov	r28, r24
	M_DIO_Void_SetPinValue(LCD_RS_PIN,LOW);
     a22:	60 e0       	ldi	r22, 0x00	; 0
     a24:	8d e0       	ldi	r24, 0x0D	; 13
     a26:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>

	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,4));
     a2a:	c4 fb       	bst	r28, 4
     a2c:	66 27       	eor	r22, r22
     a2e:	60 f9       	bld	r22, 0
     a30:	84 e1       	ldi	r24, 0x14	; 20
     a32:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,5));
     a36:	c5 fb       	bst	r28, 5
     a38:	66 27       	eor	r22, r22
     a3a:	60 f9       	bld	r22, 0
     a3c:	85 e1       	ldi	r24, 0x15	; 21
     a3e:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,6));
     a42:	c6 fb       	bst	r28, 6
     a44:	66 27       	eor	r22, r22
     a46:	60 f9       	bld	r22, 0
     a48:	86 e1       	ldi	r24, 0x16	; 22
     a4a:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,7));
     a4e:	6c 2f       	mov	r22, r28
     a50:	66 1f       	adc	r22, r22
     a52:	66 27       	eor	r22, r22
     a54:	66 1f       	adc	r22, r22
     a56:	88 e1       	ldi	r24, 0x18	; 24
     a58:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
     a5c:	61 e0       	ldi	r22, 0x01	; 1
     a5e:	8c e0       	ldi	r24, 0x0C	; 12
     a60:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
     a64:	8f e9       	ldi	r24, 0x9F	; 159
     a66:	9f e0       	ldi	r25, 0x0F	; 15
     a68:	01 97       	sbiw	r24, 0x01	; 1
     a6a:	f1 f7       	brne	.-4      	; 0xa68 <H_Lcd_Void_LCDWriteCommand+0x4a>
     a6c:	00 c0       	rjmp	.+0      	; 0xa6e <H_Lcd_Void_LCDWriteCommand+0x50>
     a6e:	00 00       	nop
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
     a70:	60 e0       	ldi	r22, 0x00	; 0
     a72:	8c e0       	ldi	r24, 0x0C	; 12
     a74:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
     a78:	8f e9       	ldi	r24, 0x9F	; 159
     a7a:	9f e0       	ldi	r25, 0x0F	; 15
     a7c:	01 97       	sbiw	r24, 0x01	; 1
     a7e:	f1 f7       	brne	.-4      	; 0xa7c <H_Lcd_Void_LCDWriteCommand+0x5e>
     a80:	00 c0       	rjmp	.+0      	; 0xa82 <H_Lcd_Void_LCDWriteCommand+0x64>
     a82:	00 00       	nop
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_D4_PIN,GET_BIT(Copy_U8_Command,0));
     a84:	6c 2f       	mov	r22, r28
     a86:	61 70       	andi	r22, 0x01	; 1
     a88:	84 e1       	ldi	r24, 0x14	; 20
     a8a:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,GET_BIT(Copy_U8_Command,1));
     a8e:	c1 fb       	bst	r28, 1
     a90:	66 27       	eor	r22, r22
     a92:	60 f9       	bld	r22, 0
     a94:	85 e1       	ldi	r24, 0x15	; 21
     a96:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,GET_BIT(Copy_U8_Command,2));
     a9a:	c2 fb       	bst	r28, 2
     a9c:	66 27       	eor	r22, r22
     a9e:	60 f9       	bld	r22, 0
     aa0:	86 e1       	ldi	r24, 0x16	; 22
     aa2:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,GET_BIT(Copy_U8_Command,3));
     aa6:	c3 fb       	bst	r28, 3
     aa8:	66 27       	eor	r22, r22
     aaa:	60 f9       	bld	r22, 0
     aac:	88 e1       	ldi	r24, 0x18	; 24
     aae:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
     ab2:	61 e0       	ldi	r22, 0x01	; 1
     ab4:	8c e0       	ldi	r24, 0x0C	; 12
     ab6:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
     aba:	8f e9       	ldi	r24, 0x9F	; 159
     abc:	9f e0       	ldi	r25, 0x0F	; 15
     abe:	01 97       	sbiw	r24, 0x01	; 1
     ac0:	f1 f7       	brne	.-4      	; 0xabe <H_Lcd_Void_LCDWriteCommand+0xa0>
     ac2:	00 c0       	rjmp	.+0      	; 0xac4 <H_Lcd_Void_LCDWriteCommand+0xa6>
     ac4:	00 00       	nop
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	8c e0       	ldi	r24, 0x0C	; 12
     aca:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
     ace:	8f e1       	ldi	r24, 0x1F	; 31
     ad0:	9e e4       	ldi	r25, 0x4E	; 78
     ad2:	01 97       	sbiw	r24, 0x01	; 1
     ad4:	f1 f7       	brne	.-4      	; 0xad2 <H_Lcd_Void_LCDWriteCommand+0xb4>
     ad6:	00 c0       	rjmp	.+0      	; 0xad8 <H_Lcd_Void_LCDWriteCommand+0xba>
     ad8:	00 00       	nop
	_delay_ms(5);
#endif
}
     ada:	cf 91       	pop	r28
     adc:	08 95       	ret

00000ade <H_Lcd_Void_LCDInit>:

	H_Lcd_Void_LCDWriteCommand(LCD_8_BIT_MODE_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinDirection(LCD_D4_PIN,OUTPUT);
     ade:	61 e0       	ldi	r22, 0x01	; 1
     ae0:	84 e1       	ldi	r24, 0x14	; 20
     ae2:	0e 94 b1 07 	call	0xf62	; 0xf62 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D5_PIN,OUTPUT);
     ae6:	61 e0       	ldi	r22, 0x01	; 1
     ae8:	85 e1       	ldi	r24, 0x15	; 21
     aea:	0e 94 b1 07 	call	0xf62	; 0xf62 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D6_PIN,OUTPUT);
     aee:	61 e0       	ldi	r22, 0x01	; 1
     af0:	86 e1       	ldi	r24, 0x16	; 22
     af2:	0e 94 b1 07 	call	0xf62	; 0xf62 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D7_PIN,OUTPUT);
     af6:	61 e0       	ldi	r22, 0x01	; 1
     af8:	88 e1       	ldi	r24, 0x18	; 24
     afa:	0e 94 b1 07 	call	0xf62	; 0xf62 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RS_PIN,OUTPUT);
     afe:	61 e0       	ldi	r22, 0x01	; 1
     b00:	8d e0       	ldi	r24, 0x0D	; 13
     b02:	0e 94 b1 07 	call	0xf62	; 0xf62 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_EN_PIN,OUTPUT);
     b06:	61 e0       	ldi	r22, 0x01	; 1
     b08:	8c e0       	ldi	r24, 0x0C	; 12
     b0a:	0e 94 b1 07 	call	0xf62	; 0xf62 <M_DIO_Void_SetPinDirection>

	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_1);
     b0e:	83 e3       	ldi	r24, 0x33	; 51
     b10:	0e 94 0f 05 	call	0xa1e	; 0xa1e <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_2);
     b14:	82 e3       	ldi	r24, 0x32	; 50
     b16:	0e 94 0f 05 	call	0xa1e	; 0xa1e <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_4_BIT_MODE_COMMAND_3);
     b1a:	88 e2       	ldi	r24, 0x28	; 40
     b1c:	0e 94 0f 05 	call	0xa1e	; 0xa1e <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_DISPLAY_ON_COMMAND);
     b20:	8c e0       	ldi	r24, 0x0C	; 12
     b22:	0e 94 0f 05 	call	0xa1e	; 0xa1e <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_RETURN_HOME_COMMAND);
     b26:	82 e0       	ldi	r24, 0x02	; 2
     b28:	0e 94 0f 05 	call	0xa1e	; 0xa1e <H_Lcd_Void_LCDWriteCommand>
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	0e 94 0f 05 	call	0xa1e	; 0xa1e <H_Lcd_Void_LCDWriteCommand>
     b32:	08 95       	ret

00000b34 <H_Lcd_Void_LCDWriteString>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
     b34:	0f 93       	push	r16
     b36:	1f 93       	push	r17
     b38:	cf 93       	push	r28
     b3a:	8c 01       	movw	r16, r24
	u8 Local_U8_Counter = 0;
     b3c:	c0 e0       	ldi	r28, 0x00	; 0
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
     b3e:	03 c0       	rjmp	.+6      	; 0xb46 <H_Lcd_Void_LCDWriteString+0x12>
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
     b40:	0e 94 af 04 	call	0x95e	; 0x95e <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Counter++;
     b44:	cf 5f       	subi	r28, 0xFF	; 255
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteString(u8*Copy_U8_Ptr)
{
	u8 Local_U8_Counter = 0;
	while(Copy_U8_Ptr[Local_U8_Counter] != NULL)
     b46:	f8 01       	movw	r30, r16
     b48:	ec 0f       	add	r30, r28
     b4a:	f1 1d       	adc	r31, r1
     b4c:	80 81       	ld	r24, Z
     b4e:	81 11       	cpse	r24, r1
     b50:	f7 cf       	rjmp	.-18     	; 0xb40 <H_Lcd_Void_LCDWriteString+0xc>
	{
		H_Lcd_Void_LCDWriteCharacter(Copy_U8_Ptr[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
     b52:	cf 91       	pop	r28
     b54:	1f 91       	pop	r17
     b56:	0f 91       	pop	r16
     b58:	08 95       	ret

00000b5a <H_Lcd_Void_LCDClear>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDClear()
{
	H_Lcd_Void_LCDWriteCommand(LCD_CLEAR);
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	0e 94 0f 05 	call	0xa1e	; 0xa1e <H_Lcd_Void_LCDWriteCommand>
     b60:	08 95       	ret

00000b62 <H_Lcd_Void_LCDWriteNumber>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteNumber(s32 Copy_S32_Number)
{
     b62:	cf 92       	push	r12
     b64:	df 92       	push	r13
     b66:	ef 92       	push	r14
     b68:	ff 92       	push	r15
     b6a:	1f 93       	push	r17
     b6c:	cf 93       	push	r28
     b6e:	df 93       	push	r29
     b70:	cd b7       	in	r28, 0x3d	; 61
     b72:	de b7       	in	r29, 0x3e	; 62
     b74:	2a 97       	sbiw	r28, 0x0a	; 10
     b76:	0f b6       	in	r0, 0x3f	; 63
     b78:	f8 94       	cli
     b7a:	de bf       	out	0x3e, r29	; 62
     b7c:	0f be       	out	0x3f, r0	; 63
     b7e:	cd bf       	out	0x3d, r28	; 61
     b80:	6b 01       	movw	r12, r22
     b82:	7c 01       	movw	r14, r24
	s8 Local_S8_Counter = 0;
	u8 Local_U8_Arr[10] = {0};
     b84:	fe 01       	movw	r30, r28
     b86:	31 96       	adiw	r30, 0x01	; 1
     b88:	8a e0       	ldi	r24, 0x0A	; 10
     b8a:	df 01       	movw	r26, r30
     b8c:	1d 92       	st	X+, r1
     b8e:	8a 95       	dec	r24
     b90:	e9 f7       	brne	.-6      	; 0xb8c <H_Lcd_Void_LCDWriteNumber+0x2a>
	if(Copy_S32_Number < 0)
     b92:	ff 20       	and	r15, r15
     b94:	5c f4       	brge	.+22     	; 0xbac <H_Lcd_Void_LCDWriteNumber+0x4a>
	{
		Copy_S32_Number = Copy_S32_Number * -1;
     b96:	f0 94       	com	r15
     b98:	e0 94       	com	r14
     b9a:	d0 94       	com	r13
     b9c:	c0 94       	com	r12
     b9e:	c1 1c       	adc	r12, r1
     ba0:	d1 1c       	adc	r13, r1
     ba2:	e1 1c       	adc	r14, r1
     ba4:	f1 1c       	adc	r15, r1
		H_Lcd_Void_LCDWriteCharacter('-');
     ba6:	8d e2       	ldi	r24, 0x2D	; 45
     ba8:	0e 94 af 04 	call	0x95e	; 0x95e <H_Lcd_Void_LCDWriteCharacter>

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDWriteNumber(s32 Copy_S32_Number)
{
     bac:	10 e0       	ldi	r17, 0x00	; 0
		H_Lcd_Void_LCDWriteCharacter('-');
	}

	do
	{
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
     bae:	c7 01       	movw	r24, r14
     bb0:	b6 01       	movw	r22, r12
     bb2:	2a e0       	ldi	r18, 0x0A	; 10
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	40 e0       	ldi	r20, 0x00	; 0
     bb8:	50 e0       	ldi	r21, 0x00	; 0
     bba:	0e 94 c9 09 	call	0x1392	; 0x1392 <__divmodsi4>
     bbe:	e1 e0       	ldi	r30, 0x01	; 1
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	ec 0f       	add	r30, r28
     bc4:	fd 1f       	adc	r31, r29
     bc6:	e1 0f       	add	r30, r17
     bc8:	f1 1d       	adc	r31, r1
     bca:	17 fd       	sbrc	r17, 7
     bcc:	fa 95       	dec	r31
     bce:	60 83       	st	Z, r22
		Copy_S32_Number                = Copy_S32_Number / 10;
     bd0:	c2 2e       	mov	r12, r18
     bd2:	d3 2e       	mov	r13, r19
     bd4:	e4 2e       	mov	r14, r20
     bd6:	f5 2e       	mov	r15, r21
		Local_S8_Counter++;
     bd8:	1f 5f       	subi	r17, 0xFF	; 255
	}while(Copy_S32_Number != 0);
     bda:	c1 14       	cp	r12, r1
     bdc:	d1 04       	cpc	r13, r1
     bde:	e1 04       	cpc	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	29 f7       	brne	.-54     	; 0xbae <H_Lcd_Void_LCDWriteNumber+0x4c>
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <H_Lcd_Void_LCDWriteNumber+0x9e>

	while(Local_S8_Counter > 0)
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
     be6:	11 50       	subi	r17, 0x01	; 1
     be8:	e1 e0       	ldi	r30, 0x01	; 1
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	ec 0f       	add	r30, r28
     bee:	fd 1f       	adc	r31, r29
     bf0:	e1 0f       	add	r30, r17
     bf2:	f1 1d       	adc	r31, r1
     bf4:	17 fd       	sbrc	r17, 7
     bf6:	fa 95       	dec	r31
     bf8:	80 81       	ld	r24, Z
     bfa:	80 5d       	subi	r24, 0xD0	; 208
     bfc:	0e 94 af 04 	call	0x95e	; 0x95e <H_Lcd_Void_LCDWriteCharacter>
		Local_U8_Arr[Local_S8_Counter] = Copy_S32_Number % 10;
		Copy_S32_Number                = Copy_S32_Number / 10;
		Local_S8_Counter++;
	}while(Copy_S32_Number != 0);

	while(Local_S8_Counter > 0)
     c00:	11 16       	cp	r1, r17
     c02:	8c f3       	brlt	.-30     	; 0xbe6 <H_Lcd_Void_LCDWriteNumber+0x84>
	{
		H_Lcd_Void_LCDWriteCharacter(Local_U8_Arr[--Local_S8_Counter] + 48);
	}
}
     c04:	2a 96       	adiw	r28, 0x0a	; 10
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	f8 94       	cli
     c0a:	de bf       	out	0x3e, r29	; 62
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	cd bf       	out	0x3d, r28	; 61
     c10:	df 91       	pop	r29
     c12:	cf 91       	pop	r28
     c14:	1f 91       	pop	r17
     c16:	ff 90       	pop	r15
     c18:	ef 90       	pop	r14
     c1a:	df 90       	pop	r13
     c1c:	cf 90       	pop	r12
     c1e:	08 95       	ret

00000c20 <H_Lcd_Void_LCDGoTo>:

/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_Lcd_Void_LCDGoTo(u8 Copy_U8_Row,u8 Copy_U8_Col)
{
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	00 d0       	rcall	.+0      	; 0xc26 <H_Lcd_Void_LCDGoTo+0x6>
     c26:	00 d0       	rcall	.+0      	; 0xc28 <H_Lcd_Void_LCDGoTo+0x8>
     c28:	cd b7       	in	r28, 0x3d	; 61
     c2a:	de b7       	in	r29, 0x3e	; 62
	u8 Local_U8_Arr [4] = {LCD_R0_COMMAND , LCD_R1_COMMAND , LCD_R2_COMMAND , LCD_R3_COMMAND};
     c2c:	90 e8       	ldi	r25, 0x80	; 128
     c2e:	99 83       	std	Y+1, r25	; 0x01
     c30:	90 ec       	ldi	r25, 0xC0	; 192
     c32:	9a 83       	std	Y+2, r25	; 0x02
     c34:	94 e9       	ldi	r25, 0x94	; 148
     c36:	9b 83       	std	Y+3, r25	; 0x03
     c38:	94 ed       	ldi	r25, 0xD4	; 212
     c3a:	9c 83       	std	Y+4, r25	; 0x04
	H_Lcd_Void_LCDWriteCommand(Local_U8_Arr[Copy_U8_Row] + Copy_U8_Col);
     c3c:	e1 e0       	ldi	r30, 0x01	; 1
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	ec 0f       	add	r30, r28
     c42:	fd 1f       	adc	r31, r29
     c44:	e8 0f       	add	r30, r24
     c46:	f1 1d       	adc	r31, r1
     c48:	80 81       	ld	r24, Z
     c4a:	86 0f       	add	r24, r22
     c4c:	0e 94 0f 05 	call	0xa1e	; 0xa1e <H_Lcd_Void_LCDWriteCommand>
}
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	08 95       	ret

00000c5e <H_LED_Void_LedInit>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedInit(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
     c5e:	82 30       	cpi	r24, 0x02	; 2
     c60:	71 f0       	breq	.+28     	; 0xc7e <H_LED_Void_LedInit+0x20>
     c62:	18 f4       	brcc	.+6      	; 0xc6a <H_LED_Void_LedInit+0xc>
     c64:	81 30       	cpi	r24, 0x01	; 1
     c66:	31 f0       	breq	.+12     	; 0xc74 <H_LED_Void_LedInit+0x16>
     c68:	08 95       	ret
     c6a:	83 30       	cpi	r24, 0x03	; 3
     c6c:	69 f0       	breq	.+26     	; 0xc88 <H_LED_Void_LedInit+0x2a>
     c6e:	84 30       	cpi	r24, 0x04	; 4
     c70:	81 f0       	breq	.+32     	; 0xc92 <H_LED_Void_LedInit+0x34>
     c72:	08 95       	ret
	{
	case LED_YEL: M_DIO_Void_SetPinDirection(LED_YEL_PIN,OUTPUT); break;
     c74:	61 e0       	ldi	r22, 0x01	; 1
     c76:	80 e1       	ldi	r24, 0x10	; 16
     c78:	0e 94 b1 07 	call	0xf62	; 0xf62 <M_DIO_Void_SetPinDirection>
     c7c:	08 95       	ret
	case LED_BLU: M_DIO_Void_SetPinDirection(LED_BLU_PIN,OUTPUT); break;
     c7e:	61 e0       	ldi	r22, 0x01	; 1
     c80:	8f e0       	ldi	r24, 0x0F	; 15
     c82:	0e 94 b1 07 	call	0xf62	; 0xf62 <M_DIO_Void_SetPinDirection>
     c86:	08 95       	ret
	case LED_GRN: M_DIO_Void_SetPinDirection(LED_GRN_PIN,OUTPUT); break;
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	8e e0       	ldi	r24, 0x0E	; 14
     c8c:	0e 94 b1 07 	call	0xf62	; 0xf62 <M_DIO_Void_SetPinDirection>
     c90:	08 95       	ret
	case LED_RED: M_DIO_Void_SetPinDirection(LED_RED_PIN,OUTPUT); break;
     c92:	61 e0       	ldi	r22, 0x01	; 1
     c94:	8b e1       	ldi	r24, 0x1B	; 27
     c96:	0e 94 b1 07 	call	0xf62	; 0xf62 <M_DIO_Void_SetPinDirection>
     c9a:	08 95       	ret

00000c9c <H_LED_Void_LedOn>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedOn(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
     c9c:	82 30       	cpi	r24, 0x02	; 2
     c9e:	71 f0       	breq	.+28     	; 0xcbc <H_LED_Void_LedOn+0x20>
     ca0:	18 f4       	brcc	.+6      	; 0xca8 <H_LED_Void_LedOn+0xc>
     ca2:	81 30       	cpi	r24, 0x01	; 1
     ca4:	31 f0       	breq	.+12     	; 0xcb2 <H_LED_Void_LedOn+0x16>
     ca6:	08 95       	ret
     ca8:	83 30       	cpi	r24, 0x03	; 3
     caa:	69 f0       	breq	.+26     	; 0xcc6 <H_LED_Void_LedOn+0x2a>
     cac:	84 30       	cpi	r24, 0x04	; 4
     cae:	81 f0       	breq	.+32     	; 0xcd0 <H_LED_Void_LedOn+0x34>
     cb0:	08 95       	ret
	{
	case LED_YEL: M_DIO_Void_SetPinValue(LED_YEL_PIN,HIGH); break;
     cb2:	61 e0       	ldi	r22, 0x01	; 1
     cb4:	80 e1       	ldi	r24, 0x10	; 16
     cb6:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
     cba:	08 95       	ret
	case LED_BLU: M_DIO_Void_SetPinValue(LED_BLU_PIN,HIGH); break;
     cbc:	61 e0       	ldi	r22, 0x01	; 1
     cbe:	8f e0       	ldi	r24, 0x0F	; 15
     cc0:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
     cc4:	08 95       	ret
	case LED_GRN: M_DIO_Void_SetPinValue(LED_GRN_PIN,HIGH); break;
     cc6:	61 e0       	ldi	r22, 0x01	; 1
     cc8:	8e e0       	ldi	r24, 0x0E	; 14
     cca:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
     cce:	08 95       	ret
	case LED_RED: M_DIO_Void_SetPinValue(LED_RED_PIN,HIGH); break;
     cd0:	61 e0       	ldi	r22, 0x01	; 1
     cd2:	8b e1       	ldi	r24, 0x1B	; 27
     cd4:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
     cd8:	08 95       	ret

00000cda <H_LED_Void_LedOff>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void H_LED_Void_LedOff(u8 Copy_U8_Led)
{
	switch(Copy_U8_Led)
     cda:	82 30       	cpi	r24, 0x02	; 2
     cdc:	71 f0       	breq	.+28     	; 0xcfa <H_LED_Void_LedOff+0x20>
     cde:	18 f4       	brcc	.+6      	; 0xce6 <H_LED_Void_LedOff+0xc>
     ce0:	81 30       	cpi	r24, 0x01	; 1
     ce2:	31 f0       	breq	.+12     	; 0xcf0 <H_LED_Void_LedOff+0x16>
     ce4:	08 95       	ret
     ce6:	83 30       	cpi	r24, 0x03	; 3
     ce8:	69 f0       	breq	.+26     	; 0xd04 <H_LED_Void_LedOff+0x2a>
     cea:	84 30       	cpi	r24, 0x04	; 4
     cec:	81 f0       	breq	.+32     	; 0xd0e <H_LED_Void_LedOff+0x34>
     cee:	08 95       	ret
	{
	case LED_YEL: M_DIO_Void_SetPinValue(LED_YEL_PIN,LOW); break;
     cf0:	60 e0       	ldi	r22, 0x00	; 0
     cf2:	80 e1       	ldi	r24, 0x10	; 16
     cf4:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
     cf8:	08 95       	ret
	case LED_BLU: M_DIO_Void_SetPinValue(LED_BLU_PIN,LOW); break;
     cfa:	60 e0       	ldi	r22, 0x00	; 0
     cfc:	8f e0       	ldi	r24, 0x0F	; 15
     cfe:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
     d02:	08 95       	ret
	case LED_GRN: M_DIO_Void_SetPinValue(LED_GRN_PIN,LOW); break;
     d04:	60 e0       	ldi	r22, 0x00	; 0
     d06:	8e e0       	ldi	r24, 0x0E	; 14
     d08:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
     d0c:	08 95       	ret
	case LED_RED: M_DIO_Void_SetPinValue(LED_RED_PIN,LOW); break;
     d0e:	60 e0       	ldi	r22, 0x00	; 0
     d10:	8b e1       	ldi	r24, 0x1B	; 27
     d12:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
     d16:	08 95       	ret

00000d18 <Relay_ON>:
void Relay_Init(u8 Relay_ID){
	M_DIO_Void_SetPinDirection(Relay_ID,OUTPUT);
	M_DIO_Void_SetPinValue(Relay_ID,LOW);
}
void Relay_ON(u8 Relay_ID){
	M_DIO_Void_SetPinValue(Relay_ID,HIGH);
     d18:	61 e0       	ldi	r22, 0x01	; 1
     d1a:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
     d1e:	08 95       	ret

00000d20 <Relay_OFF>:
}
void Relay_OFF(u8 Relay_ID){
	M_DIO_Void_SetPinValue(Relay_ID,LOW);
     d20:	60 e0       	ldi	r22, 0x00	; 0
     d22:	0e 94 3a 08 	call	0x1074	; 0x1074 <M_DIO_Void_SetPinValue>
     d26:	08 95       	ret

00000d28 <RTC_Init>:
	/*send the units of month in the least 4 bits then the tens month in the higher 4 bits   */
	M_U8_I2C_Write(((Config_Date -> month / 10) << 4)|((Config_Date -> month) % 10));
	/*send the units of year in the least 4 bits then the tens year in the higher 4 bits   */
	M_U8_I2C_Write(((Config_Date -> year / 10) << 4)|((Config_Date -> year) % 10));
	M_Void_I2C_STOP();
}
     d28:	0e 94 07 09 	call	0x120e	; 0x120e <M_Void_I2C_Init>
     d2c:	08 95       	ret

00000d2e <RTC_Get_Time>:

void RTC_Get_Time(Date_And_Time *Get_Time_And_Date)
{
     d2e:	cf 93       	push	r28
     d30:	df 93       	push	r29
     d32:	ec 01       	movw	r28, r24
	u8 temp_sec =0;
	u8 temp_min =0;
	u8 temp_hours =0;

	M_U8_I2C_Start();/*send the start bit*/
     d34:	0e 94 24 09 	call	0x1248	; 0x1248 <M_U8_I2C_Start>
	/*send the slave address and write bit*/
	M_U8_I2C_SendSlaveAddressWithWrite(RTC_SLAVE_ADDRESS_WRITE);
     d38:	80 ed       	ldi	r24, 0xD0	; 208
     d3a:	0e 94 2f 09 	call	0x125e	; 0x125e <M_U8_I2C_SendSlaveAddressWithWrite>
	/*write the first address 0x00 in RTC to write the day*/
	M_U8_I2C_Write(RTC_SECONDS_REG_ADDRESS);
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	0e 94 4c 09 	call	0x1298	; 0x1298 <M_U8_I2C_Write>
	M_U8_I2C_Repeated_Start();
     d44:	0e 94 38 09 	call	0x1270	; 0x1270 <M_U8_I2C_Repeated_Start>
	/*send the slave address and read bit*/
	M_U8_I2C_SendSlaveAddressWithRead(RTC_SLAVE_ADDRESS_READ);
     d48:	81 ed       	ldi	r24, 0xD1	; 209
     d4a:	0e 94 43 09 	call	0x1286	; 0x1286 <M_U8_I2C_SendSlaveAddressWithRead>
	temp_sec = M_U8_I2C_ReadWithAck();
     d4e:	0e 94 55 09 	call	0x12aa	; 0x12aa <M_U8_I2C_ReadWithAck>
	/*get the seconds units + the tens seconds by >>4 then multiplied by 10*/
	Get_Time_And_Date -> sec = (temp_sec & 0x0F)+(((temp_sec & 0xF0)>>4)*10);
     d52:	98 2f       	mov	r25, r24
     d54:	92 95       	swap	r25
     d56:	9f 70       	andi	r25, 0x0F	; 15
     d58:	8f 70       	andi	r24, 0x0F	; 15
     d5a:	99 0f       	add	r25, r25
     d5c:	29 2f       	mov	r18, r25
     d5e:	22 0f       	add	r18, r18
     d60:	22 0f       	add	r18, r18
     d62:	92 0f       	add	r25, r18
     d64:	89 0f       	add	r24, r25
     d66:	88 83       	st	Y, r24
	/*get the mins units + the tens mins by >>4 then multiplied by 10*/
	temp_min = M_U8_I2C_ReadWithAck();
     d68:	0e 94 55 09 	call	0x12aa	; 0x12aa <M_U8_I2C_ReadWithAck>
	Get_Time_And_Date -> min = (temp_min & 0x0F)+(((temp_min & 0xF0)>>4)*10);
     d6c:	98 2f       	mov	r25, r24
     d6e:	92 95       	swap	r25
     d70:	9f 70       	andi	r25, 0x0F	; 15
     d72:	8f 70       	andi	r24, 0x0F	; 15
     d74:	99 0f       	add	r25, r25
     d76:	29 2f       	mov	r18, r25
     d78:	22 0f       	add	r18, r18
     d7a:	22 0f       	add	r18, r18
     d7c:	92 0f       	add	r25, r18
     d7e:	89 0f       	add	r24, r25
     d80:	89 83       	std	Y+1, r24	; 0x01
	/*get the hours units + the tens hours by >>4 then multiplied by 10*/
	temp_hours = M_U8_I2C_ReadWithNack();
     d82:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <M_U8_I2C_ReadWithNack>
	Get_Time_And_Date -> hours = (temp_hours & 0x0F)+(((temp_hours & 0xF0)>>4)*10);
     d86:	98 2f       	mov	r25, r24
     d88:	92 95       	swap	r25
     d8a:	9f 70       	andi	r25, 0x0F	; 15
     d8c:	8f 70       	andi	r24, 0x0F	; 15
     d8e:	99 0f       	add	r25, r25
     d90:	29 2f       	mov	r18, r25
     d92:	22 0f       	add	r18, r18
     d94:	22 0f       	add	r18, r18
     d96:	92 0f       	add	r25, r18
     d98:	89 0f       	add	r24, r25
     d9a:	8a 83       	std	Y+2, r24	; 0x02
	M_Void_I2C_STOP();
     d9c:	0e 94 63 09 	call	0x12c6	; 0x12c6 <M_Void_I2C_STOP>
}
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	08 95       	ret

00000da6 <main>:

/*********************************************************************************
 * 									MAIN
 *********************************************************************************/
int main(void)
{
     da6:	cf 93       	push	r28
     da8:	df 93       	push	r29
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	27 97       	sbiw	r28, 0x07	; 7
     db0:	0f b6       	in	r0, 0x3f	; 63
     db2:	f8 94       	cli
     db4:	de bf       	out	0x3e, r29	; 62
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	cd bf       	out	0x3d, r28	; 61
	Date_And_Time Current_Date_And_Time={35,21,2,6,28,3,24};
     dba:	87 e0       	ldi	r24, 0x07	; 7
     dbc:	ec e8       	ldi	r30, 0x8C	; 140
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	de 01       	movw	r26, r28
     dc2:	11 96       	adiw	r26, 0x01	; 1
     dc4:	01 90       	ld	r0, Z+
     dc6:	0d 92       	st	X+, r0
     dc8:	8a 95       	dec	r24
     dca:	e1 f7       	brne	.-8      	; 0xdc4 <main+0x1e>
	//RTC_Set_Time(&Current_Date_And_Time);
	APP_EmpID EmpID = 0xFF;

	/*initialization of the used modules in the MCAL layer*/
	M_Void_I2C_Init();
     dcc:	0e 94 07 09 	call	0x120e	; 0x120e <M_Void_I2C_Init>

	UART_Init();
     dd0:	0e 94 69 09 	call	0x12d2	; 0x12d2 <UART_Init>

	/*initialization of the used modules in the HAL layer*/
	H_LED_Void_LedInit(LED_RED);
     dd4:	84 e0       	ldi	r24, 0x04	; 4
     dd6:	0e 94 2f 06 	call	0xc5e	; 0xc5e <H_LED_Void_LedInit>
	H_LED_Void_LedInit(LED_GRN);
     dda:	83 e0       	ldi	r24, 0x03	; 3
     ddc:	0e 94 2f 06 	call	0xc5e	; 0xc5e <H_LED_Void_LedInit>

	H_KeyPad_Void_KeyPadInit();
     de0:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <H_KeyPad_Void_KeyPadInit>

	H_Lcd_Void_LCDInit();
     de4:	0e 94 6f 05 	call	0xade	; 0xade <H_Lcd_Void_LCDInit>

	RTC_Init();
     de8:	0e 94 94 06 	call	0xd28	; 0xd28 <RTC_Init>
	while(1)
	{
		/*intial function
		 * press '*' Attendance Confirmation
		 * press '#' New Enrollment */
		if(g_SystemState == INITIAL_STATE)
     dec:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <g_SystemState>
     df0:	81 11       	cpse	r24, r1
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <main+0x52>
		{
			APP_Init();
     df4:	0e 94 49 00 	call	0x92	; 0x92 <APP_Init>
		}
		switch (g_SystemState)
     df8:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <g_SystemState>
     dfc:	81 30       	cpi	r24, 0x01	; 1
     dfe:	09 f4       	brne	.+2      	; 0xe02 <main+0x5c>
     e00:	5f c0       	rjmp	.+190    	; 0xec0 <main+0x11a>
     e02:	87 30       	cpi	r24, 0x07	; 7
     e04:	99 f7       	brne	.-26     	; 0xdec <main+0x46>
		{
		case CONFIRM_ATTENDANCE_ENTER_ID :
			EmpID = APP_GetID();
     e06:	0e 94 75 00 	call	0xea	; 0xea <APP_GetID>
     e0a:	18 2f       	mov	r17, r24
			if(EmpID==GOBACK){
     e0c:	8f 3f       	cpi	r24, 0xFF	; 255
     e0e:	19 f4       	brne	.+6      	; 0xe16 <main+0x70>
				g_SystemState= INITIAL_STATE;
     e10:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <g_SystemState>
     e14:	eb cf       	rjmp	.-42     	; 0xdec <main+0x46>
			}
			else{
			g_SystemState = APP_CheckIDPresence(EmpID);
     e16:	0e 94 a8 00 	call	0x150	; 0x150 <APP_CheckIDPresence>
     e1a:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <g_SystemState>
			if(g_SystemState == FOUND_ID)
     e1e:	89 30       	cpi	r24, 0x09	; 9
     e20:	d1 f5       	brne	.+116    	; 0xe96 <main+0xf0>
			{
				/*In case ID is found then ask for the fingerPrint scan*/
				APP_PutFingerToScan();
     e22:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <APP_PutFingerToScan>
				FingerPS_AuraLedConfig();
     e26:	0e 94 29 02 	call	0x452	; 0x452 <FingerPS_AuraLedConfig>
     e2a:	2f ef       	ldi	r18, 0xFF	; 255
     e2c:	34 e3       	ldi	r19, 0x34	; 52
     e2e:	8c e0       	ldi	r24, 0x0C	; 12
     e30:	21 50       	subi	r18, 0x01	; 1
     e32:	30 40       	sbci	r19, 0x00	; 0
     e34:	80 40       	sbci	r24, 0x00	; 0
     e36:	e1 f7       	brne	.-8      	; 0xe30 <main+0x8a>
     e38:	00 c0       	rjmp	.+0      	; 0xe3a <main+0x94>
     e3a:	00 00       	nop
     e3c:	00 e0       	ldi	r16, 0x00	; 0
				_delay_ms(4000);
			do{
				if(MATCHED == FingerPS_CheckOneToOneMatch((u16) EmpID)){
     e3e:	e1 2e       	mov	r14, r17
     e40:	f1 2c       	mov	r15, r1
     e42:	c7 01       	movw	r24, r14
     e44:	0e 94 ad 03 	call	0x75a	; 0x75a <FingerPS_CheckOneToOneMatch>
     e48:	81 30       	cpi	r24, 0x01	; 1
     e4a:	51 f4       	brne	.+20     	; 0xe60 <main+0xba>
					/*If the fingerprint matches the employee's fingerprint saved lcd will show that the confirmation of attendance has been successful*/
					APP_Confirm_Attendance_Success(EmpID,&Current_Date_And_Time);
     e4c:	be 01       	movw	r22, r28
     e4e:	6f 5f       	subi	r22, 0xFF	; 255
     e50:	7f 4f       	sbci	r23, 0xFF	; 255
     e52:	81 2f       	mov	r24, r17
     e54:	0e 94 32 01 	call	0x264	; 0x264 <APP_Confirm_Attendance_Success>
					g_SystemState= INITIAL_STATE;
     e58:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <g_SystemState>
					WrongFingerPrintCounter=0;
     e5c:	00 e0       	ldi	r16, 0x00	; 0
     e5e:	18 c0       	rjmp	.+48     	; 0xe90 <main+0xea>
				}
				else if(NOTMATCHED == FingerPS_CheckOneToOneMatch((u16) EmpID)){
     e60:	c7 01       	movw	r24, r14
     e62:	0e 94 ad 03 	call	0x75a	; 0x75a <FingerPS_CheckOneToOneMatch>
     e66:	81 11       	cpse	r24, r1
     e68:	13 c0       	rjmp	.+38     	; 0xe90 <main+0xea>
					/*If the fingerprint doens't match the employee's fingerprint saved will try again for 3 times then a warning will be displayed*/
					WrongFingerPrintCounter++;
     e6a:	0f 5f       	subi	r16, 0xFF	; 255
					if(WrongFingerPrintCounter==MAX_TRIALS){
     e6c:	03 30       	cpi	r16, 0x03	; 3
     e6e:	81 f4       	brne	.+32     	; 0xe90 <main+0xea>
						if(APP_WarningHandler(FINGERPRINT_NOT_FOUND)==MAIN_MENU_BUTTON_PRESSED){
     e70:	82 e0       	ldi	r24, 0x02	; 2
     e72:	0e 94 83 01 	call	0x306	; 0x306 <APP_WarningHandler>
     e76:	83 34       	cpi	r24, 0x43	; 67
     e78:	19 f4       	brne	.+6      	; 0xe80 <main+0xda>
							/*Go back to the main menu to choose new enrollment*/
							g_SystemState = INITIAL_STATE;
     e7a:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <g_SystemState>
     e7e:	08 c0       	rjmp	.+16     	; 0xe90 <main+0xea>
						}
						else if(APP_WarningHandler(FINGERPRINT_NOT_FOUND)==GOBACK_BUTTON_PRESSED){
     e80:	82 e0       	ldi	r24, 0x02	; 2
     e82:	0e 94 83 01 	call	0x306	; 0x306 <APP_WarningHandler>
     e86:	81 34       	cpi	r24, 0x41	; 65
     e88:	19 f4       	brne	.+6      	; 0xe90 <main+0xea>
						/*Take one step back in the program and go back to confirm attendance*/
						g_SystemState = CONFIRM_ATTENDANCE_ENTER_ID;
     e8a:	87 e0       	ldi	r24, 0x07	; 7
     e8c:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <g_SystemState>
						}
					}
				}
			}
			while (WrongFingerPrintCounter<MAX_TRIALS);
     e90:	03 30       	cpi	r16, 0x03	; 3
     e92:	a8 f2       	brcs	.-86     	; 0xe3e <main+0x98>
     e94:	ab cf       	rjmp	.-170    	; 0xdec <main+0x46>
				/*Return the value of wrong fingerprint counter to 0*/
				WrongFingerPrintCounter=0;
			}
			else if (g_SystemState == NOTFOUND_ID)
     e96:	88 30       	cpi	r24, 0x08	; 8
     e98:	09 f0       	breq	.+2      	; 0xe9c <main+0xf6>
     e9a:	a8 cf       	rjmp	.-176    	; 0xdec <main+0x46>
			{
				if(APP_WarningHandler(ID_NOT_FOUND)==MAIN_MENU_BUTTON_PRESSED){
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	0e 94 83 01 	call	0x306	; 0x306 <APP_WarningHandler>
     ea2:	83 34       	cpi	r24, 0x43	; 67
     ea4:	19 f4       	brne	.+6      	; 0xeac <main+0x106>
					/*Go back to the main menu to choose new enrollment*/
					g_SystemState = INITIAL_STATE;
     ea6:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <g_SystemState>
     eaa:	a0 cf       	rjmp	.-192    	; 0xdec <main+0x46>
				}
				else if(GOBACK_BUTTON_PRESSED == APP_WarningHandler(ID_NOT_FOUND)){
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	0e 94 83 01 	call	0x306	; 0x306 <APP_WarningHandler>
     eb2:	81 34       	cpi	r24, 0x41	; 65
     eb4:	09 f0       	breq	.+2      	; 0xeb8 <main+0x112>
     eb6:	9a cf       	rjmp	.-204    	; 0xdec <main+0x46>
					/*Take one step back in the program and go back to confirm attendance*/
					g_SystemState = CONFIRM_ATTENDANCE_ENTER_ID;
     eb8:	87 e0       	ldi	r24, 0x07	; 7
     eba:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <g_SystemState>
     ebe:	96 cf       	rjmp	.-212    	; 0xdec <main+0x46>
			}
			}
		break;/*End of confirm attendance case*/

		case NEW_ENROLLMENT_SET_NEW_ID:
			EmpID = APP_GetID();
     ec0:	0e 94 75 00 	call	0xea	; 0xea <APP_GetID>
     ec4:	18 2f       	mov	r17, r24
			if(EmpID==GOBACK){
     ec6:	8f 3f       	cpi	r24, 0xFF	; 255
     ec8:	19 f4       	brne	.+6      	; 0xed0 <main+0x12a>
				g_SystemState= INITIAL_STATE;
     eca:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <g_SystemState>
     ece:	8e cf       	rjmp	.-228    	; 0xdec <main+0x46>
			}
			else{
			g_SystemState = APP_CheckIDPresence(EmpID);
     ed0:	0e 94 a8 00 	call	0x150	; 0x150 <APP_CheckIDPresence>
     ed4:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <g_SystemState>
			if(g_SystemState == NOTFOUND_ID)
     ed8:	88 30       	cpi	r24, 0x08	; 8
     eda:	71 f5       	brne	.+92     	; 0xf38 <main+0x192>
			{
				/*If the ID inserted out of range display on LCD warning that the ID is out of range*/
				if (EmpID == OUT_OF_RANGE_ID) {
     edc:	1e 3f       	cpi	r17, 0xFE	; 254
     ede:	91 f4       	brne	.+36     	; 0xf04 <main+0x15e>
					if (APP_WarningHandler(OUT_OF_RANGE_ID)==MAIN_MENU_BUTTON_PRESSED) {
     ee0:	8e ef       	ldi	r24, 0xFE	; 254
     ee2:	0e 94 83 01 	call	0x306	; 0x306 <APP_WarningHandler>
     ee6:	83 34       	cpi	r24, 0x43	; 67
     ee8:	19 f4       	brne	.+6      	; 0xef0 <main+0x14a>
						/*Go back to the main menu to choose new enrollment*/
						g_SystemState = INITIAL_STATE;
     eea:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <g_SystemState>
     eee:	7e cf       	rjmp	.-260    	; 0xdec <main+0x46>
					}
					else if (APP_WarningHandler(OUT_OF_RANGE_ID)==GOBACK_BUTTON_PRESSED) {
     ef0:	8e ef       	ldi	r24, 0xFE	; 254
     ef2:	0e 94 83 01 	call	0x306	; 0x306 <APP_WarningHandler>
     ef6:	81 34       	cpi	r24, 0x41	; 65
     ef8:	09 f0       	breq	.+2      	; 0xefc <main+0x156>
     efa:	78 cf       	rjmp	.-272    	; 0xdec <main+0x46>
						/*Take one step back in the program and go back to confirm attendance*/
						g_SystemState = NEW_ENROLLMENT_SET_NEW_ID;
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <g_SystemState>
     f02:	74 cf       	rjmp	.-280    	; 0xdec <main+0x46>
					}
				}
					else{
				/*Show Put your finger to scan on the lcd*/
				APP_PutFingerToScan();
     f04:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <APP_PutFingerToScan>
     f08:	9a e2       	ldi	r25, 0x2A	; 42
     f0a:	20 e5       	ldi	r18, 0x50	; 80
     f0c:	3e ef       	ldi	r19, 0xFE	; 254
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	91 50       	subi	r25, 0x01	; 1
     f12:	20 40       	sbci	r18, 0x00	; 0
     f14:	30 40       	sbci	r19, 0x00	; 0
     f16:	80 40       	sbci	r24, 0x00	; 0
     f18:	d9 f7       	brne	.-10     	; 0xf10 <main+0x16a>
     f1a:	00 00       	nop
				_delay_ms(100000);
				FingerPS_AuraLedConfig(); 
     f1c:	0e 94 29 02 	call	0x452	; 0x452 <FingerPS_AuraLedConfig>
				/*Save the new fingerprint of the new employee in the corresponding address in the fingerprint memory*/
				FingerPS_SetNewFingerPrint((u16) EmpID);
     f20:	81 2f       	mov	r24, r17
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	0e 94 4b 03 	call	0x696	; 0x696 <FingerPS_SetNewFingerPrint>
				/*Write the New employee ID in the corresponding address in the EEPROM */
				APP_SetNewID(EmpID);
     f28:	81 2f       	mov	r24, r17
     f2a:	0e 94 b4 00 	call	0x168	; 0x168 <APP_SetNewID>
				/*call LCD Display SUCCESS NEW ENROLLMENT
				 * press Go-back button to the main menu*/
				APP_NewEnrollemtSuccessful();
     f2e:	0e 94 bc 00 	call	0x178	; 0x178 <APP_NewEnrollemtSuccessful>
				g_SystemState = INITIAL_STATE;
     f32:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <g_SystemState>
     f36:	5a cf       	rjmp	.-332    	; 0xdec <main+0x46>
				}
			}
			else if (g_SystemState == FOUND_ID)
     f38:	89 30       	cpi	r24, 0x09	; 9
     f3a:	09 f0       	breq	.+2      	; 0xf3e <main+0x198>
     f3c:	57 cf       	rjmp	.-338    	; 0xdec <main+0x46>
			{
				if (APP_WarningHandler(ALREADY_TAKEN_ID)==MAIN_MENU_BUTTON_PRESSED) {
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	0e 94 83 01 	call	0x306	; 0x306 <APP_WarningHandler>
     f44:	83 34       	cpi	r24, 0x43	; 67
     f46:	19 f4       	brne	.+6      	; 0xf4e <main+0x1a8>
					/*Go back to the main menu to choose new enrollment*/
					g_SystemState = INITIAL_STATE;
     f48:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <g_SystemState>
     f4c:	4f cf       	rjmp	.-354    	; 0xdec <main+0x46>
				}
				else if (APP_WarningHandler(ALREADY_TAKEN_ID)==GOBACK_BUTTON_PRESSED) {
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	0e 94 83 01 	call	0x306	; 0x306 <APP_WarningHandler>
     f54:	81 34       	cpi	r24, 0x41	; 65
     f56:	09 f0       	breq	.+2      	; 0xf5a <main+0x1b4>
     f58:	49 cf       	rjmp	.-366    	; 0xdec <main+0x46>
					/*Take one step back in the program and go back to confirm attendance*/
					g_SystemState = NEW_ENROLLMENT_SET_NEW_ID;
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <g_SystemState>
     f60:	45 cf       	rjmp	.-374    	; 0xdec <main+0x46>

00000f62 <M_DIO_Void_SetPinDirection>:
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinDirection(u8 Copy_U8_Number, u8 Copy_U8_State)
{

	u8 Local_U8_Bit    = Copy_U8_Number % 10;
     f62:	9d ec       	ldi	r25, 0xCD	; 205
     f64:	89 9f       	mul	r24, r25
     f66:	91 2d       	mov	r25, r1
     f68:	11 24       	eor	r1, r1
     f6a:	29 2f       	mov	r18, r25
     f6c:	26 95       	lsr	r18
     f6e:	26 95       	lsr	r18
     f70:	26 95       	lsr	r18
     f72:	22 0f       	add	r18, r18
     f74:	32 2f       	mov	r19, r18
     f76:	33 0f       	add	r19, r19
     f78:	33 0f       	add	r19, r19
     f7a:	23 0f       	add	r18, r19
     f7c:	82 1b       	sub	r24, r18
     f7e:	28 2f       	mov	r18, r24
	u8 Local_U8_Group  = Copy_U8_Number / 10;
     f80:	96 95       	lsr	r25
     f82:	96 95       	lsr	r25
     f84:	96 95       	lsr	r25
	switch(Copy_U8_State)
     f86:	66 23       	and	r22, r22
     f88:	19 f0       	breq	.+6      	; 0xf90 <M_DIO_Void_SetPinDirection+0x2e>
     f8a:	61 30       	cpi	r22, 0x01	; 1
     f8c:	e1 f1       	breq	.+120    	; 0x1006 <M_DIO_Void_SetPinDirection+0xa4>
     f8e:	08 95       	ret
	{
	case INPUT:
		switch(Local_U8_Group)
     f90:	92 30       	cpi	r25, 0x02	; 2
     f92:	a9 f0       	breq	.+42     	; 0xfbe <M_DIO_Void_SetPinDirection+0x5c>
     f94:	18 f4       	brcc	.+6      	; 0xf9c <M_DIO_Void_SetPinDirection+0x3a>
     f96:	91 30       	cpi	r25, 0x01	; 1
     f98:	31 f0       	breq	.+12     	; 0xfa6 <M_DIO_Void_SetPinDirection+0x44>
     f9a:	08 95       	ret
     f9c:	93 30       	cpi	r25, 0x03	; 3
     f9e:	d9 f0       	breq	.+54     	; 0xfd6 <M_DIO_Void_SetPinDirection+0x74>
     fa0:	94 30       	cpi	r25, 0x04	; 4
     fa2:	29 f1       	breq	.+74     	; 0xfee <M_DIO_Void_SetPinDirection+0x8c>
     fa4:	08 95       	ret
		{
		case 1: CLR_BIT(DDRA_REG,Local_U8_Bit); break;
     fa6:	3a b3       	in	r19, 0x1a	; 26
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <M_DIO_Void_SetPinDirection+0x50>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	2a 95       	dec	r18
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <M_DIO_Void_SetPinDirection+0x4c>
     fb6:	80 95       	com	r24
     fb8:	83 23       	and	r24, r19
     fba:	8a bb       	out	0x1a, r24	; 26
     fbc:	08 95       	ret
		case 2: CLR_BIT(DDRB_REG,Local_U8_Bit); break;
     fbe:	37 b3       	in	r19, 0x17	; 23
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <M_DIO_Void_SetPinDirection+0x68>
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	2a 95       	dec	r18
     fcc:	e2 f7       	brpl	.-8      	; 0xfc6 <M_DIO_Void_SetPinDirection+0x64>
     fce:	80 95       	com	r24
     fd0:	83 23       	and	r24, r19
     fd2:	87 bb       	out	0x17, r24	; 23
     fd4:	08 95       	ret
		case 3: CLR_BIT(DDRC_REG,Local_U8_Bit); break;
     fd6:	34 b3       	in	r19, 0x14	; 20
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <M_DIO_Void_SetPinDirection+0x80>
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	2a 95       	dec	r18
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <M_DIO_Void_SetPinDirection+0x7c>
     fe6:	80 95       	com	r24
     fe8:	83 23       	and	r24, r19
     fea:	84 bb       	out	0x14, r24	; 20
     fec:	08 95       	ret
		case 4: CLR_BIT(DDRD_REG,Local_U8_Bit); break;
     fee:	31 b3       	in	r19, 0x11	; 17
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <M_DIO_Void_SetPinDirection+0x98>
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	2a 95       	dec	r18
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <M_DIO_Void_SetPinDirection+0x94>
     ffe:	80 95       	com	r24
    1000:	83 23       	and	r24, r19
    1002:	81 bb       	out	0x11, r24	; 17
    1004:	08 95       	ret
		default:                                break;
		}
		break;
		case OUTPUT:
			switch(Local_U8_Group)
    1006:	92 30       	cpi	r25, 0x02	; 2
    1008:	a1 f0       	breq	.+40     	; 0x1032 <M_DIO_Void_SetPinDirection+0xd0>
    100a:	18 f4       	brcc	.+6      	; 0x1012 <M_DIO_Void_SetPinDirection+0xb0>
    100c:	91 30       	cpi	r25, 0x01	; 1
    100e:	31 f0       	breq	.+12     	; 0x101c <M_DIO_Void_SetPinDirection+0xba>
    1010:	08 95       	ret
    1012:	93 30       	cpi	r25, 0x03	; 3
    1014:	c9 f0       	breq	.+50     	; 0x1048 <M_DIO_Void_SetPinDirection+0xe6>
    1016:	94 30       	cpi	r25, 0x04	; 4
    1018:	11 f1       	breq	.+68     	; 0x105e <M_DIO_Void_SetPinDirection+0xfc>
    101a:	08 95       	ret
			{
			case 1: SET_BIT(DDRA_REG,Local_U8_Bit); break;
    101c:	3a b3       	in	r19, 0x1a	; 26
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <M_DIO_Void_SetPinDirection+0xc6>
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	2a 95       	dec	r18
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <M_DIO_Void_SetPinDirection+0xc2>
    102c:	83 2b       	or	r24, r19
    102e:	8a bb       	out	0x1a, r24	; 26
    1030:	08 95       	ret
			case 2: SET_BIT(DDRB_REG,Local_U8_Bit); break;
    1032:	37 b3       	in	r19, 0x17	; 23
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	02 c0       	rjmp	.+4      	; 0x103e <M_DIO_Void_SetPinDirection+0xdc>
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	2a 95       	dec	r18
    1040:	e2 f7       	brpl	.-8      	; 0x103a <M_DIO_Void_SetPinDirection+0xd8>
    1042:	83 2b       	or	r24, r19
    1044:	87 bb       	out	0x17, r24	; 23
    1046:	08 95       	ret
			case 3: SET_BIT(DDRC_REG,Local_U8_Bit); break;
    1048:	34 b3       	in	r19, 0x14	; 20
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <M_DIO_Void_SetPinDirection+0xf2>
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	2a 95       	dec	r18
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <M_DIO_Void_SetPinDirection+0xee>
    1058:	83 2b       	or	r24, r19
    105a:	84 bb       	out	0x14, r24	; 20
    105c:	08 95       	ret
			case 4: SET_BIT(DDRD_REG,Local_U8_Bit); break;
    105e:	31 b3       	in	r19, 0x11	; 17
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 c0       	rjmp	.+4      	; 0x106a <M_DIO_Void_SetPinDirection+0x108>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	2a 95       	dec	r18
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <M_DIO_Void_SetPinDirection+0x104>
    106e:	83 2b       	or	r24, r19
    1070:	81 bb       	out	0x11, r24	; 17
    1072:	08 95       	ret

00001074 <M_DIO_Void_SetPinValue>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
void M_DIO_Void_SetPinValue(u8 Copy_U8_Number, u8 Copy_U8_State)
{
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    1074:	9d ec       	ldi	r25, 0xCD	; 205
    1076:	89 9f       	mul	r24, r25
    1078:	91 2d       	mov	r25, r1
    107a:	11 24       	eor	r1, r1
    107c:	29 2f       	mov	r18, r25
    107e:	26 95       	lsr	r18
    1080:	26 95       	lsr	r18
    1082:	26 95       	lsr	r18
    1084:	22 0f       	add	r18, r18
    1086:	32 2f       	mov	r19, r18
    1088:	33 0f       	add	r19, r19
    108a:	33 0f       	add	r19, r19
    108c:	23 0f       	add	r18, r19
    108e:	82 1b       	sub	r24, r18
    1090:	28 2f       	mov	r18, r24
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    1092:	96 95       	lsr	r25
    1094:	96 95       	lsr	r25
    1096:	96 95       	lsr	r25
	switch(Copy_U8_State)
    1098:	66 23       	and	r22, r22
    109a:	19 f0       	breq	.+6      	; 0x10a2 <M_DIO_Void_SetPinValue+0x2e>
    109c:	61 30       	cpi	r22, 0x01	; 1
    109e:	e1 f1       	breq	.+120    	; 0x1118 <M_DIO_Void_SetPinValue+0xa4>
    10a0:	08 95       	ret
	{
	case LOW:
		switch(Local_U8_Group)
    10a2:	92 30       	cpi	r25, 0x02	; 2
    10a4:	a9 f0       	breq	.+42     	; 0x10d0 <M_DIO_Void_SetPinValue+0x5c>
    10a6:	18 f4       	brcc	.+6      	; 0x10ae <M_DIO_Void_SetPinValue+0x3a>
    10a8:	91 30       	cpi	r25, 0x01	; 1
    10aa:	31 f0       	breq	.+12     	; 0x10b8 <M_DIO_Void_SetPinValue+0x44>
    10ac:	08 95       	ret
    10ae:	93 30       	cpi	r25, 0x03	; 3
    10b0:	d9 f0       	breq	.+54     	; 0x10e8 <M_DIO_Void_SetPinValue+0x74>
    10b2:	94 30       	cpi	r25, 0x04	; 4
    10b4:	29 f1       	breq	.+74     	; 0x1100 <M_DIO_Void_SetPinValue+0x8c>
    10b6:	08 95       	ret
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Bit); break;
    10b8:	3b b3       	in	r19, 0x1b	; 27
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	02 c0       	rjmp	.+4      	; 0x10c4 <M_DIO_Void_SetPinValue+0x50>
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	2a 95       	dec	r18
    10c6:	e2 f7       	brpl	.-8      	; 0x10c0 <M_DIO_Void_SetPinValue+0x4c>
    10c8:	80 95       	com	r24
    10ca:	83 23       	and	r24, r19
    10cc:	8b bb       	out	0x1b, r24	; 27
    10ce:	08 95       	ret
		case 2: CLR_BIT(PORTB_REG,Local_U8_Bit); break;
    10d0:	38 b3       	in	r19, 0x18	; 24
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	02 c0       	rjmp	.+4      	; 0x10dc <M_DIO_Void_SetPinValue+0x68>
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	2a 95       	dec	r18
    10de:	e2 f7       	brpl	.-8      	; 0x10d8 <M_DIO_Void_SetPinValue+0x64>
    10e0:	80 95       	com	r24
    10e2:	83 23       	and	r24, r19
    10e4:	88 bb       	out	0x18, r24	; 24
    10e6:	08 95       	ret
		case 3: CLR_BIT(PORTC_REG,Local_U8_Bit); break;
    10e8:	35 b3       	in	r19, 0x15	; 21
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <M_DIO_Void_SetPinValue+0x80>
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	2a 95       	dec	r18
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <M_DIO_Void_SetPinValue+0x7c>
    10f8:	80 95       	com	r24
    10fa:	83 23       	and	r24, r19
    10fc:	85 bb       	out	0x15, r24	; 21
    10fe:	08 95       	ret
		case 4: CLR_BIT(PORTD_REG,Local_U8_Bit); break;
    1100:	32 b3       	in	r19, 0x12	; 18
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	02 c0       	rjmp	.+4      	; 0x110c <M_DIO_Void_SetPinValue+0x98>
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	2a 95       	dec	r18
    110e:	e2 f7       	brpl	.-8      	; 0x1108 <M_DIO_Void_SetPinValue+0x94>
    1110:	80 95       	com	r24
    1112:	83 23       	and	r24, r19
    1114:	82 bb       	out	0x12, r24	; 18
    1116:	08 95       	ret
		default:                                 break;
		}
		break;
		case HIGH:
			switch(Local_U8_Group)
    1118:	92 30       	cpi	r25, 0x02	; 2
    111a:	a1 f0       	breq	.+40     	; 0x1144 <M_DIO_Void_SetPinValue+0xd0>
    111c:	18 f4       	brcc	.+6      	; 0x1124 <M_DIO_Void_SetPinValue+0xb0>
    111e:	91 30       	cpi	r25, 0x01	; 1
    1120:	31 f0       	breq	.+12     	; 0x112e <M_DIO_Void_SetPinValue+0xba>
    1122:	08 95       	ret
    1124:	93 30       	cpi	r25, 0x03	; 3
    1126:	c9 f0       	breq	.+50     	; 0x115a <M_DIO_Void_SetPinValue+0xe6>
    1128:	94 30       	cpi	r25, 0x04	; 4
    112a:	11 f1       	breq	.+68     	; 0x1170 <M_DIO_Void_SetPinValue+0xfc>
    112c:	08 95       	ret
			{
			case 1: SET_BIT(PORTA_REG,Local_U8_Bit); break;
    112e:	3b b3       	in	r19, 0x1b	; 27
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	02 c0       	rjmp	.+4      	; 0x113a <M_DIO_Void_SetPinValue+0xc6>
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	2a 95       	dec	r18
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <M_DIO_Void_SetPinValue+0xc2>
    113e:	83 2b       	or	r24, r19
    1140:	8b bb       	out	0x1b, r24	; 27
    1142:	08 95       	ret
			case 2: SET_BIT(PORTB_REG,Local_U8_Bit); break;
    1144:	38 b3       	in	r19, 0x18	; 24
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <M_DIO_Void_SetPinValue+0xdc>
    114c:	88 0f       	add	r24, r24
    114e:	99 1f       	adc	r25, r25
    1150:	2a 95       	dec	r18
    1152:	e2 f7       	brpl	.-8      	; 0x114c <M_DIO_Void_SetPinValue+0xd8>
    1154:	83 2b       	or	r24, r19
    1156:	88 bb       	out	0x18, r24	; 24
    1158:	08 95       	ret
			case 3: SET_BIT(PORTC_REG,Local_U8_Bit); break;
    115a:	35 b3       	in	r19, 0x15	; 21
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <M_DIO_Void_SetPinValue+0xf2>
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	2a 95       	dec	r18
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <M_DIO_Void_SetPinValue+0xee>
    116a:	83 2b       	or	r24, r19
    116c:	85 bb       	out	0x15, r24	; 21
    116e:	08 95       	ret
			case 4: SET_BIT(PORTD_REG,Local_U8_Bit); break;
    1170:	32 b3       	in	r19, 0x12	; 18
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 c0       	rjmp	.+4      	; 0x117c <M_DIO_Void_SetPinValue+0x108>
    1178:	88 0f       	add	r24, r24
    117a:	99 1f       	adc	r25, r25
    117c:	2a 95       	dec	r18
    117e:	e2 f7       	brpl	.-8      	; 0x1178 <M_DIO_Void_SetPinValue+0x104>
    1180:	83 2b       	or	r24, r19
    1182:	82 bb       	out	0x12, r24	; 18
    1184:	08 95       	ret

00001186 <M_DIO_Void_GetPinValue>:
/*--------------------------------------------------------------------------------------------*/
/*   FUNCTION BODY   */
/*--------------------------------------------------------------------------------------------*/
u8   M_DIO_Void_GetPinValue(u8 Copy_U8_Number)
{
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
    1186:	9d ec       	ldi	r25, 0xCD	; 205
    1188:	89 9f       	mul	r24, r25
    118a:	91 2d       	mov	r25, r1
    118c:	11 24       	eor	r1, r1
    118e:	29 2f       	mov	r18, r25
    1190:	26 95       	lsr	r18
    1192:	26 95       	lsr	r18
    1194:	26 95       	lsr	r18
    1196:	22 0f       	add	r18, r18
    1198:	32 2f       	mov	r19, r18
    119a:	33 0f       	add	r19, r19
    119c:	33 0f       	add	r19, r19
    119e:	23 0f       	add	r18, r19
    11a0:	82 1b       	sub	r24, r18
    11a2:	28 2f       	mov	r18, r24
	u8 Local_U8_Group  = Copy_U8_Number / 10;
    11a4:	89 2f       	mov	r24, r25
    11a6:	86 95       	lsr	r24
    11a8:	86 95       	lsr	r24
    11aa:	86 95       	lsr	r24
	u8 Local_U8_Reading = 0;
	switch(Local_U8_Group)
    11ac:	82 30       	cpi	r24, 0x02	; 2
    11ae:	91 f0       	breq	.+36     	; 0x11d4 <M_DIO_Void_GetPinValue+0x4e>
    11b0:	18 f4       	brcc	.+6      	; 0x11b8 <M_DIO_Void_GetPinValue+0x32>
    11b2:	81 30       	cpi	r24, 0x01	; 1
    11b4:	31 f0       	breq	.+12     	; 0x11c2 <M_DIO_Void_GetPinValue+0x3c>
    11b6:	29 c0       	rjmp	.+82     	; 0x120a <M_DIO_Void_GetPinValue+0x84>
    11b8:	83 30       	cpi	r24, 0x03	; 3
    11ba:	a9 f0       	breq	.+42     	; 0x11e6 <M_DIO_Void_GetPinValue+0x60>
    11bc:	84 30       	cpi	r24, 0x04	; 4
    11be:	e1 f0       	breq	.+56     	; 0x11f8 <M_DIO_Void_GetPinValue+0x72>
    11c0:	24 c0       	rjmp	.+72     	; 0x120a <M_DIO_Void_GetPinValue+0x84>
	{
	case 1: Local_U8_Reading = GET_BIT(PINA_REG,Local_U8_Bit); break;
    11c2:	89 b3       	in	r24, 0x19	; 25
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	02 c0       	rjmp	.+4      	; 0x11cc <M_DIO_Void_GetPinValue+0x46>
    11c8:	95 95       	asr	r25
    11ca:	87 95       	ror	r24
    11cc:	2a 95       	dec	r18
    11ce:	e2 f7       	brpl	.-8      	; 0x11c8 <M_DIO_Void_GetPinValue+0x42>
    11d0:	81 70       	andi	r24, 0x01	; 1
    11d2:	08 95       	ret
	case 2: Local_U8_Reading = GET_BIT(PINB_REG,Local_U8_Bit); break;
    11d4:	86 b3       	in	r24, 0x16	; 22
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <M_DIO_Void_GetPinValue+0x58>
    11da:	95 95       	asr	r25
    11dc:	87 95       	ror	r24
    11de:	2a 95       	dec	r18
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <M_DIO_Void_GetPinValue+0x54>
    11e2:	81 70       	andi	r24, 0x01	; 1
    11e4:	08 95       	ret
	case 3: Local_U8_Reading = GET_BIT(PINC_REG,Local_U8_Bit); break;
    11e6:	83 b3       	in	r24, 0x13	; 19
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <M_DIO_Void_GetPinValue+0x6a>
    11ec:	95 95       	asr	r25
    11ee:	87 95       	ror	r24
    11f0:	2a 95       	dec	r18
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <M_DIO_Void_GetPinValue+0x66>
    11f4:	81 70       	andi	r24, 0x01	; 1
    11f6:	08 95       	ret
	case 4: Local_U8_Reading = GET_BIT(PIND_REG,Local_U8_Bit); break;
    11f8:	80 b3       	in	r24, 0x10	; 16
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <M_DIO_Void_GetPinValue+0x7c>
    11fe:	95 95       	asr	r25
    1200:	87 95       	ror	r24
    1202:	2a 95       	dec	r18
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <M_DIO_Void_GetPinValue+0x78>
    1206:	81 70       	andi	r24, 0x01	; 1
    1208:	08 95       	ret
/*--------------------------------------------------------------------------------------------*/
u8   M_DIO_Void_GetPinValue(u8 Copy_U8_Number)
{
	u8 Local_U8_Bit    = Copy_U8_Number % 10;
	u8 Local_U8_Group  = Copy_U8_Number / 10;
	u8 Local_U8_Reading = 0;
    120a:	80 e0       	ldi	r24, 0x00	; 0
	case 3: Local_U8_Reading = GET_BIT(PINC_REG,Local_U8_Bit); break;
	case 4: Local_U8_Reading = GET_BIT(PIND_REG,Local_U8_Bit); break;
	default:                                                   break;
	}
	return Local_U8_Reading ;
}
    120c:	08 95       	ret

0000120e <M_Void_I2C_Init>:
#define SCL_CLK 200000 /*Select SCL_CLK in Hz*/
#define BITRATE(TWSR_REG)	((F_CPU/SCL_CLK)-16)/(2 * (1 << (TWSR_REG*2)))
/*************************		INITIATE I2C	******************/
void M_Void_I2C_Init (){
	#if TWPS == TWPS_Value1
		CLR_BIT(TWSR_REG,TWPS0);
    120e:	81 b1       	in	r24, 0x01	; 1
    1210:	8e 7f       	andi	r24, 0xFE	; 254
    1212:	81 b9       	out	0x01, r24	; 1
		CLR_BIT(TWSR_REG,TWPS1);
    1214:	81 b1       	in	r24, 0x01	; 1
    1216:	8d 7f       	andi	r24, 0xFD	; 253
    1218:	81 b9       	out	0x01, r24	; 1
		SET_BIT(TWSR_REG,TWPS1);
	#elif TWPS == TWPS_Value64 
		SET_BIT(TWSR_REG,TWPS0);
		SET_BIT(TWSR_REG,TWPS1);
	#endif
	TWBR_REG = BITRATE(TWSR_REG);	 
    121a:	81 b1       	in	r24, 0x01	; 1
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	22 e0       	ldi	r18, 0x02	; 2
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	02 c0       	rjmp	.+4      	; 0x122c <M_Void_I2C_Init+0x1e>
    1228:	22 0f       	add	r18, r18
    122a:	33 1f       	adc	r19, r19
    122c:	8a 95       	dec	r24
    122e:	e2 f7       	brpl	.-8      	; 0x1228 <M_Void_I2C_Init+0x1a>
    1230:	03 2e       	mov	r0, r19
    1232:	00 0c       	add	r0, r0
    1234:	44 0b       	sbc	r20, r20
    1236:	55 0b       	sbc	r21, r21
    1238:	60 e4       	ldi	r22, 0x40	; 64
    123a:	70 e0       	ldi	r23, 0x00	; 0
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	0e 94 a7 09 	call	0x134e	; 0x134e <__udivmodsi4>
    1244:	20 b9       	out	0x00, r18	; 0
    1246:	08 95       	ret

00001248 <M_U8_I2C_Start>:
} 
/*************************		SEND START		*******************/
u8 M_U8_I2C_Start(){
	u8 transmit_status;		
	TWCR_REG =(1<<TWSTA)|(1<<TWEN)|(1<<TWINT); /*Enable TWI, generate START*/
    1248:	84 ea       	ldi	r24, 0xA4	; 164
    124a:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR_REG & (1<<TWINT)));	/* Wait until TWI finish its current job*/
    124c:	06 b6       	in	r0, 0x36	; 54
    124e:	07 fe       	sbrs	r0, 7
    1250:	fd cf       	rjmp	.-6      	; 0x124c <M_U8_I2C_Start+0x4>
	transmit_status = (TWSR_REG & 0xF8);		/* Read TWI status register */
    1252:	81 b1       	in	r24, 0x01	; 1
    1254:	88 7f       	andi	r24, 0xF8	; 248
	if(transmit_status != TWI_START)		/* Check weather START transmitted or not? */
    1256:	88 30       	cpi	r24, 0x08	; 8
    1258:	09 f0       	breq	.+2      	; 0x125c <M_U8_I2C_Start+0x14>
	transmit_status = START_FAILED;			/* Return 0 to indicate start condition fail*/ 
    125a:	80 e0       	ldi	r24, 0x00	; 0
	return transmit_status;
} 
    125c:	08 95       	ret

0000125e <M_U8_I2C_SendSlaveAddressWithWrite>:
/*After Start we will send slave address with write*/
u8 M_U8_I2C_SendSlaveAddressWithWrite (u8 write_address){
	u8 transmit_status;
	/*SEND ADDRESS BYTE*/
	TWDR_REG = write_address;		    /* Write SLA+W in TWI data register */
    125e:	83 b9       	out	0x03, r24	; 3
	TWCR_REG = (1<<TWEN)|(1<<TWINT);	/* Enable TWI & clear interrupt flag */
    1260:	84 e8       	ldi	r24, 0x84	; 132
    1262:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR_REG&(1<<TWINT)));		/* Wait until TWI finish its current job */
    1264:	06 b6       	in	r0, 0x36	; 54
    1266:	07 fe       	sbrs	r0, 7
    1268:	fd cf       	rjmp	.-6      	; 0x1264 <M_U8_I2C_SendSlaveAddressWithWrite+0x6>
	
	/*CHECK TRANSMIT WITH ACK*/
	transmit_status= (TWSR_REG & 0xF8);		/* Read TWI status register */
    126a:	81 b1       	in	r24, 0x01	; 1
	/*TRANSMIT WITH NO ACK*/
	else if(transmit_status == TWI_MT_SLA_NACK)		/* Check for SLA+W transmitted*/
	transmit_status = TWI_MT_SLA_NACK;				/* Nack received */  
	
	return transmit_status;
}
    126c:	88 7f       	andi	r24, 0xF8	; 248
    126e:	08 95       	ret

00001270 <M_U8_I2C_Repeated_Start>:
/**************************		REPEAT START FUNCTION		****************/
u8 M_U8_I2C_Repeated_Start(){
	u8 transmit_status;									
	TWCR_REG = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT); /* Enable TWI, generate start */
    1270:	84 ea       	ldi	r24, 0xA4	; 164
    1272:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR_REG & (1<<TWINT)));			/* Wait until TWI finish its current job */
    1274:	06 b6       	in	r0, 0x36	; 54
    1276:	07 fe       	sbrs	r0, 7
    1278:	fd cf       	rjmp	.-6      	; 0x1274 <M_U8_I2C_Repeated_Start+0x4>
	transmit_status = TWSR_REG & 0xF8;					/* Read TWI status register */
    127a:	81 b1       	in	r24, 0x01	; 1
    127c:	88 7f       	andi	r24, 0xF8	; 248
	if(transmit_status!= TWI_REP_START)					/* Check for repeated start transmitted */
    127e:	80 31       	cpi	r24, 0x10	; 16
    1280:	09 f0       	breq	.+2      	; 0x1284 <M_U8_I2C_Repeated_Start+0x14>
	transmit_status = REP_START_FAILED;					/* repeated start condition fail */
    1282:	80 e0       	ldi	r24, 0x00	; 0
	
	return transmit_status; 
}
    1284:	08 95       	ret

00001286 <M_U8_I2C_SendSlaveAddressWithRead>:
/**************************		SEND SLAVE ADDRESS WITH WRITE	**************/
u8 M_U8_I2C_SendSlaveAddressWithRead(u8 read_address){
	u8 transmit_status; 
	TWDR_REG = read_address;					/* Write SLA+R in TWI data register */
    1286:	83 b9       	out	0x03, r24	; 3
	TWCR_REG = (1<<TWEN)|(1<<TWINT);			/* Enable TWI and clear interrupt flag */
    1288:	84 e8       	ldi	r24, 0x84	; 132
    128a:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR_REG&(1<<TWINT)));				/* Wait until TWI finish its current job */
    128c:	06 b6       	in	r0, 0x36	; 54
    128e:	07 fe       	sbrs	r0, 7
    1290:	fd cf       	rjmp	.-6      	; 0x128c <M_U8_I2C_SendSlaveAddressWithRead+0x6>
	transmit_status = TWSR_REG & 0xF8;					/* Read TWI status register */
    1292:	81 b1       	in	r24, 0x01	; 1
	transmit_status = TWI_MT_SLA_R_ACK;					/* Ack received */
	else if(transmit_status == TWI_MR_SLA_R_NACK)				/* Check for SLA+R transmitted*/
	transmit_status = TWI_MR_SLA_R_NACK;					/* Nack received */
	
	return transmit_status; 
}
    1294:	88 7f       	andi	r24, 0xF8	; 248
    1296:	08 95       	ret

00001298 <M_U8_I2C_Write>:
/**************************		WRITE DATA	FUNCTION	***********************/
u8 M_U8_I2C_Write(u8 data){
	u8 transmit_status;						
	TWDR_REG = data;				/* Copy data in TWI data register */
    1298:	83 b9       	out	0x03, r24	; 3
	TWCR_REG = (1<<TWEN)|(1<<TWINT);/* Enable TWI and clear interrupt flag */
    129a:	84 e8       	ldi	r24, 0x84	; 132
    129c:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR_REG&(1<<TWINT)));	/* Wait until TWI finish its current job */
    129e:	06 b6       	in	r0, 0x36	; 54
    12a0:	07 fe       	sbrs	r0, 7
    12a2:	fd cf       	rjmp	.-6      	; 0x129e <M_U8_I2C_Write+0x6>
	transmit_status = TWSR_REG & 0xF8;		/* Read TWI status register */
    12a4:	81 b1       	in	r24, 0x01	; 1
	transmit_status = TWI_MT_DATA_ACK;			/* Ack received */
	else if(transmit_status==TWI_MT_DATA_NACK)	/* Check for data transmitted*/
	transmit_status = TWI_MT_DATA_NACK;		/* Nack received */ 
	
	return transmit_status; 
}
    12a6:	88 7f       	andi	r24, 0xF8	; 248
    12a8:	08 95       	ret

000012aa <M_U8_I2C_ReadWithAck>:
u8 M_U8_I2C_ReadWithAck(){
	TWCR_REG = (1<<TWEN)|(1<<TWINT)|(1<<TWEA);	/* Enable TWI, generation of Ack */
    12aa:	84 ec       	ldi	r24, 0xC4	; 196
    12ac:	86 bf       	out	0x36, r24	; 54
    while(!(TWCR_REG&(1<<TWINT)));				/* Wait until TWI finish its current job */
    12ae:	06 b6       	in	r0, 0x36	; 54
    12b0:	07 fe       	sbrs	r0, 7
    12b2:	fd cf       	rjmp	.-6      	; 0x12ae <M_U8_I2C_ReadWithAck+0x4>
    return TWDR_REG;							/* Return received data */
    12b4:	83 b1       	in	r24, 0x03	; 3
}
    12b6:	08 95       	ret

000012b8 <M_U8_I2C_ReadWithNack>:
u8 M_U8_I2C_ReadWithNack(){
	TWCR_REG =(1<<TWEN)|(1<<TWINT);	/* Enable TWI and clear interrupt flag */
    12b8:	84 e8       	ldi	r24, 0x84	; 132
    12ba:	86 bf       	out	0x36, r24	; 54
    while(!(TWCR_REG&(1<<TWINT)));			/* Wait until TWI finish its current job */
    12bc:	06 b6       	in	r0, 0x36	; 54
    12be:	07 fe       	sbrs	r0, 7
    12c0:	fd cf       	rjmp	.-6      	; 0x12bc <M_U8_I2C_ReadWithNack+0x4>
    return TWDR_REG;					/* Return received data */
    12c2:	83 b1       	in	r24, 0x03	; 3
}
    12c4:	08 95       	ret

000012c6 <M_Void_I2C_STOP>:
void M_Void_I2C_STOP(){
    TWCR_REG=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);/* Enable TWI, generate stop */
    12c6:	84 e9       	ldi	r24, 0x94	; 148
    12c8:	86 bf       	out	0x36, r24	; 54
    while(TWCR_REG&(1<<TWSTO));				 /* Wait until stop condition execution */
    12ca:	06 b6       	in	r0, 0x36	; 54
    12cc:	04 fc       	sbrc	r0, 4
    12ce:	fd cf       	rjmp	.-6      	; 0x12ca <M_Void_I2C_STOP+0x4>
    12d0:	08 95       	ret

000012d2 <UART_Init>:
		/*WAIT UNTIL THE RECIEVER FLAG IS ONE*/
	}
	return (UDR);
}
void UART_receiveByteAsynchCallBack(void(*CpyPtr)(u8)){
	ptr_func = CpyPtr; 
    12d2:	80 b5       	in	r24, 0x20	; 32
    12d4:	8f 77       	andi	r24, 0x7F	; 127
    12d6:	80 bd       	out	0x20, r24	; 32
    12d8:	10 bc       	out	0x20, r1	; 32
    12da:	80 e1       	ldi	r24, 0x10	; 16
    12dc:	89 b9       	out	0x09, r24	; 9
    12de:	80 b5       	in	r24, 0x20	; 32
    12e0:	80 bd       	out	0x20, r24	; 32
    12e2:	88 e9       	ldi	r24, 0x98	; 152
    12e4:	8a b9       	out	0x0a, r24	; 10
    12e6:	80 b5       	in	r24, 0x20	; 32
    12e8:	80 68       	ori	r24, 0x80	; 128
    12ea:	80 bd       	out	0x20, r24	; 32
    12ec:	86 e8       	ldi	r24, 0x86	; 134
    12ee:	80 bd       	out	0x20, r24	; 32
    12f0:	08 95       	ret

000012f2 <UART_sendByte>:
    12f2:	5d 9b       	sbis	0x0b, 5	; 11
    12f4:	fe cf       	rjmp	.-4      	; 0x12f2 <UART_sendByte>
    12f6:	8c b9       	out	0x0c, r24	; 12
    12f8:	5e 9b       	sbis	0x0b, 6	; 11
    12fa:	fe cf       	rjmp	.-4      	; 0x12f8 <UART_sendByte+0x6>
    12fc:	08 95       	ret

000012fe <__vector_13>:
} 
ISR(USART_RXC_vect){
    12fe:	1f 92       	push	r1
    1300:	0f 92       	push	r0
    1302:	0f b6       	in	r0, 0x3f	; 63
    1304:	0f 92       	push	r0
    1306:	11 24       	eor	r1, r1
    1308:	2f 93       	push	r18
    130a:	3f 93       	push	r19
    130c:	4f 93       	push	r20
    130e:	5f 93       	push	r21
    1310:	6f 93       	push	r22
    1312:	7f 93       	push	r23
    1314:	8f 93       	push	r24
    1316:	9f 93       	push	r25
    1318:	af 93       	push	r26
    131a:	bf 93       	push	r27
    131c:	ef 93       	push	r30
    131e:	ff 93       	push	r31
	ptr_func(UDR);
    1320:	8c b1       	in	r24, 0x0c	; 12
    1322:	e0 91 b5 01 	lds	r30, 0x01B5	; 0x8001b5 <ptr_func>
    1326:	f0 91 b6 01 	lds	r31, 0x01B6	; 0x8001b6 <ptr_func+0x1>
    132a:	09 95       	icall
}
    132c:	ff 91       	pop	r31
    132e:	ef 91       	pop	r30
    1330:	bf 91       	pop	r27
    1332:	af 91       	pop	r26
    1334:	9f 91       	pop	r25
    1336:	8f 91       	pop	r24
    1338:	7f 91       	pop	r23
    133a:	6f 91       	pop	r22
    133c:	5f 91       	pop	r21
    133e:	4f 91       	pop	r20
    1340:	3f 91       	pop	r19
    1342:	2f 91       	pop	r18
    1344:	0f 90       	pop	r0
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	0f 90       	pop	r0
    134a:	1f 90       	pop	r1
    134c:	18 95       	reti

0000134e <__udivmodsi4>:
    134e:	a1 e2       	ldi	r26, 0x21	; 33
    1350:	1a 2e       	mov	r1, r26
    1352:	aa 1b       	sub	r26, r26
    1354:	bb 1b       	sub	r27, r27
    1356:	fd 01       	movw	r30, r26
    1358:	0d c0       	rjmp	.+26     	; 0x1374 <__udivmodsi4_ep>

0000135a <__udivmodsi4_loop>:
    135a:	aa 1f       	adc	r26, r26
    135c:	bb 1f       	adc	r27, r27
    135e:	ee 1f       	adc	r30, r30
    1360:	ff 1f       	adc	r31, r31
    1362:	a2 17       	cp	r26, r18
    1364:	b3 07       	cpc	r27, r19
    1366:	e4 07       	cpc	r30, r20
    1368:	f5 07       	cpc	r31, r21
    136a:	20 f0       	brcs	.+8      	; 0x1374 <__udivmodsi4_ep>
    136c:	a2 1b       	sub	r26, r18
    136e:	b3 0b       	sbc	r27, r19
    1370:	e4 0b       	sbc	r30, r20
    1372:	f5 0b       	sbc	r31, r21

00001374 <__udivmodsi4_ep>:
    1374:	66 1f       	adc	r22, r22
    1376:	77 1f       	adc	r23, r23
    1378:	88 1f       	adc	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	1a 94       	dec	r1
    137e:	69 f7       	brne	.-38     	; 0x135a <__udivmodsi4_loop>
    1380:	60 95       	com	r22
    1382:	70 95       	com	r23
    1384:	80 95       	com	r24
    1386:	90 95       	com	r25
    1388:	9b 01       	movw	r18, r22
    138a:	ac 01       	movw	r20, r24
    138c:	bd 01       	movw	r22, r26
    138e:	cf 01       	movw	r24, r30
    1390:	08 95       	ret

00001392 <__divmodsi4>:
    1392:	05 2e       	mov	r0, r21
    1394:	97 fb       	bst	r25, 7
    1396:	1e f4       	brtc	.+6      	; 0x139e <__divmodsi4+0xc>
    1398:	00 94       	com	r0
    139a:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <__negsi2>
    139e:	57 fd       	sbrc	r21, 7
    13a0:	07 d0       	rcall	.+14     	; 0x13b0 <__divmodsi4_neg2>
    13a2:	0e 94 a7 09 	call	0x134e	; 0x134e <__udivmodsi4>
    13a6:	07 fc       	sbrc	r0, 7
    13a8:	03 d0       	rcall	.+6      	; 0x13b0 <__divmodsi4_neg2>
    13aa:	4e f4       	brtc	.+18     	; 0x13be <__divmodsi4_exit>
    13ac:	0c 94 e0 09 	jmp	0x13c0	; 0x13c0 <__negsi2>

000013b0 <__divmodsi4_neg2>:
    13b0:	50 95       	com	r21
    13b2:	40 95       	com	r20
    13b4:	30 95       	com	r19
    13b6:	21 95       	neg	r18
    13b8:	3f 4f       	sbci	r19, 0xFF	; 255
    13ba:	4f 4f       	sbci	r20, 0xFF	; 255
    13bc:	5f 4f       	sbci	r21, 0xFF	; 255

000013be <__divmodsi4_exit>:
    13be:	08 95       	ret

000013c0 <__negsi2>:
    13c0:	90 95       	com	r25
    13c2:	80 95       	com	r24
    13c4:	70 95       	com	r23
    13c6:	61 95       	neg	r22
    13c8:	7f 4f       	sbci	r23, 0xFF	; 255
    13ca:	8f 4f       	sbci	r24, 0xFF	; 255
    13cc:	9f 4f       	sbci	r25, 0xFF	; 255
    13ce:	08 95       	ret

000013d0 <_exit>:
    13d0:	f8 94       	cli

000013d2 <__stop_program>:
    13d2:	ff cf       	rjmp	.-2      	; 0x13d2 <__stop_program>
